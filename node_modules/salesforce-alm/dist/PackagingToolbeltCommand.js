"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackagingToolbeltCommand = void 0;
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const ToolbeltCommand_1 = require("./ToolbeltCommand");
const Messages = require("./lib/messages");
const messages = Messages();
class PackagingToolbeltCommand extends ToolbeltCommand_1.ToolbeltCommand {
    static get description() {
        let description = this.theDescription;
        const ongoingMaintenanceMessage = this.getOngoingMaintenanceMessage(this.id);
        description = `${description}\n\nWARNING: ${ongoingMaintenanceMessage}`;
        if (this.extraHelp) {
            description += `\n\n${this.extraHelp}`;
        }
        if (this.help) {
            description += `\n\n${this.help}`;
        }
        return description;
    }
    static getOngoingMaintenanceMessage(commandId) {
        const idParts = commandId.split(':');
        const betaCommand = `${idParts[0]}:${idParts[1]}:beta:${idParts.slice(2).join(':')}`;
        const ongoingMaintenanceMessage = messages.getMessage('ongoingMaintenance', [commandId, betaCommand, betaCommand], 'packagingToolbelt');
        return ongoingMaintenanceMessage;
    }
    async execPackagingLegacyCommand(commandId, command, context, stdin) {
        var _a;
        if (!((_a = context === null || context === void 0 ? void 0 : context.flags) === null || _a === void 0 ? void 0 : _a.json)) {
            this.warn(PackagingToolbeltCommand.getOngoingMaintenanceMessage(commandId));
        }
        return await super.execLegacyCommand(command, context, stdin);
    }
}
exports.PackagingToolbeltCommand = PackagingToolbeltCommand;

//# sourceMappingURL=PackagingToolbeltCommand.js.map
