import { ConfigAggregator, SfProject } from '@salesforce/core';
import { AsyncCreatable } from '@salesforce/kit';
import { ProfileApiOptions } from '../interfaces';
export declare class PackageProfileApi extends AsyncCreatable<ProfileApiOptions> {
    private options;
    readonly profiles: ProfileInformation[];
    apiVersion: string;
    nodeEntities: {
        name: string[];
        childElement: string[];
        parentElement: string[];
    };
    otherProfileSettings: {
        name: string[];
        childElement: string[];
        parentElement: string[];
    };
    config: ConfigAggregator;
    project: SfProject;
    includeUserLicenses: boolean;
    generateProfileInformation: boolean;
    constructor(options: ProfileApiOptions);
    init(): Promise<void>;
    /**
     * For any profile present in the workspace, this function generates a subset of data that only contains references
     * to items in the manifest.
     *
     * @param destPath location of new profiles
     * @param manifest
     * @param excludedDirectories Directories to not include profiles from
     */
    generateProfiles(destPath: string, manifest: {
        Package: Array<{
            name: string[];
            members: string[];
        }>;
    }, excludedDirectories?: string[]): string[];
    /**
     * Filter out all profiles in the manifest and if any profiles exists in the workspace, add them to the manifest.
     *
     * @param typesArr array of objects { name[], members[] } that represent package types JSON.
     * @param excludedDirectories Direcotires not to generate profiles for
     */
    filterAndGenerateProfilesForManifest(typesArr: Array<{
        name: string[];
        members: string[];
    }>, excludedDirectories?: string[]): Array<{
        name: string[];
        members: string[];
    }>;
    getProfileInformation(): ProfileInformation[];
    private copyNodes;
    private findAllProfiles;
}
declare class ProfileInformation {
    ProfileName: string;
    ProfilePath: string;
    IsPackaged: boolean;
    settingsRemoved: string[];
    constructor(ProfileName: string, ProfilePath: string, IsPackaged: boolean, settingsRemoved: string[]);
    setIsPackaged(IsPackaged: boolean): void;
    appendRemovedSetting(setting: string): void;
    logDebug(): string;
    logInfo(): string;
}
export {};
