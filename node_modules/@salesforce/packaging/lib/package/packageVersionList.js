"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateDays = exports.constructWhere = exports.assembleQueryParts = exports.listPackageVersions = exports.DEFAULT_ORDER_BY_FIELDS = void 0;
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const packageUtils_1 = require("../utils/packageUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/packaging', 'package_version_create');
const defaultFields = [
    'Id',
    'Package2Id',
    'SubscriberPackageVersionId',
    'Name',
    'Package2.Name',
    'Package2.NamespacePrefix',
    'Package2.IsOrgDependent',
    'Description',
    'Tag',
    'Branch',
    'MajorVersion',
    'MinorVersion',
    'PatchVersion',
    'BuildNumber',
    'IsReleased',
    'CreatedDate',
    'LastModifiedDate',
    'IsPasswordProtected',
    'AncestorId',
    'ValidationSkipped',
    'CreatedById',
];
const verboseFields = [
    'CodeCoverage',
    'HasPassedCodeCoverageCheck',
    'ConvertedFromVersionId',
    'ReleaseVersion',
    'BuildDurationInSeconds',
    'HasMetadataRemoved',
];
const verbose57Fields = ['Language'];
exports.DEFAULT_ORDER_BY_FIELDS = 'Package2Id, Branch, MajorVersion, MinorVersion, PatchVersion, BuildNumber';
let logger;
const getLogger = () => {
    if (!logger) {
        logger = core_1.Logger.childFromRoot('packageVersionList');
    }
    return logger;
};
async function listPackageVersions(options) {
    return options.connection.autoFetchQuery(constructQuery(options), {
        tooling: true,
    });
}
exports.listPackageVersions = listPackageVersions;
function constructQuery(options) {
    // construct custom WHERE clause, if applicable
    const where = constructWhere(options.packages, options.createdLastDays, options.modifiedLastDays, options.isReleased);
    let queryFields = defaultFields;
    if (options.verbose) {
        queryFields = [...queryFields, ...verboseFields];
        if (Number(options.connection.version) >= 57) {
            queryFields = [...queryFields, ...verbose57Fields];
        }
    }
    const query = `SELECT ${queryFields.toString()} FROM Package2Version`;
    return assembleQueryParts(query, where, options.orderBy);
}
function assembleQueryParts(select, where, orderBy) {
    // construct ORDER BY clause
    const orderByPart = `ORDER BY ${orderBy ? orderBy : exports.DEFAULT_ORDER_BY_FIELDS}`;
    const wherePart = where.length > 0 ? `WHERE ${where.join(' AND ')}` : '';
    const query = `${select} ${wherePart} ${orderByPart}`;
    getLogger().debug(query);
    return query;
}
exports.assembleQueryParts = assembleQueryParts;
// construct custom WHERE clause parts
function constructWhere(packageIds, createdLastDays, lastModLastDays, isReleased) {
    const where = [];
    // filter on given package ids
    if (packageIds?.length > 0) {
        // remove dups
        const uniquePackageIds = [...new Set(packageIds)];
        // validate ids
        uniquePackageIds.forEach((packageId) => {
            (0, packageUtils_1.validateId)(packageUtils_1.BY_LABEL.PACKAGE_ID, packageId);
        });
        // stash where part
        where.push(`Package2Id IN ('${uniquePackageIds.join("','")}')`);
    }
    // filter on created date, days ago: 0 for today, etc
    if ((0, ts_types_1.isNumber)(createdLastDays)) {
        createdLastDays = validateDays('createdlastdays', createdLastDays);
        where.push(`CreatedDate = LAST_N_DAYS:${createdLastDays}`);
    }
    // filter on last mod date, days ago: 0 for today, etc
    if ((0, ts_types_1.isNumber)(lastModLastDays)) {
        lastModLastDays = validateDays('modifiedlastdays', lastModLastDays);
        where.push(`LastModifiedDate = LAST_N_DAYS:${lastModLastDays}`);
    }
    if (isReleased) {
        where.push('IsReleased = true');
    }
    // exclude deleted
    where.push('IsDeprecated = false');
    return where;
}
exports.constructWhere = constructWhere;
function validateDays(paramName, lastDays) {
    if (lastDays < 0) {
        throw messages.createError('invalidDaysNumber', [paramName, `${lastDays}`]);
    }
    return lastDays;
}
exports.validateDays = validateDays;
//# sourceMappingURL=packageVersionList.js.map