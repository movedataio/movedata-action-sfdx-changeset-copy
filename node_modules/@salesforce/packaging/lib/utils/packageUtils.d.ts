import { Connection, SfdcUrl, SfError, SfProject } from '@salesforce/core';
import { Many, Nullable } from '@salesforce/ts-types';
import { SaveError } from 'jsforce';
import { Duration } from '@salesforce/kit';
import { PackageType, PackagingSObjects } from '../interfaces';
export declare const VERSION_NUMBER_SEP = ".";
export type IdRegistryValue = {
    prefix: string;
    label: string;
};
export type IdRegistry = {
    [key: string]: IdRegistryValue;
};
export declare const INSTALL_URL_BASE: SfdcUrl;
export declare const POLL_INTERVAL_SECONDS = 30;
export declare const DEFAULT_PACKAGE_DIR: {
    path: string;
    package: string;
    versionName: string;
    versionNumber: string;
    default: boolean;
};
export declare const BY_LABEL: IdRegistry;
/**
 * A function to generate a unique id and return it in the context of a template, if supplied.
 *
 * A template is a string that can contain `${%s}` to be replaced with a unique id.
 * If the template contains the "%s" placeholder, it will be replaced with the unique id otherwise the id will be appended to the template.
 *
 * @param options an object with the following properties:
 * - template: a template string.
 * - length: the length of the unique id as presented in hexadecimal.
 */
export declare function uniqid(options?: {
    template?: string;
    length?: number;
}): string;
export declare function validateId(idObj: Many<IdRegistryValue>, value: string): void;
export declare function validateIdNoThrow(idObj: Many<IdRegistryValue>, value: string): IdRegistryValue | boolean;
export declare function applyErrorAction(err: Error): Error;
export declare function massageErrorMessage(err: Error): Error;
/**
 * Given a subscriber package version ID (04t) or package version ID (05i), return the package version ID (05i)
 *
 * @param versionId The subscriber package version ID
 * @param connection For tooling query
 */
export declare function getPackageVersionId(versionId: string, connection: Connection): Promise<string>;
export declare function escapeInstallationKey(key?: string): Nullable<string>;
/**
 * Get the ContainerOptions for the specified Package2 (0Ho) IDs.
 *
 * @return Map of 0Ho id to container option api value
 * @param packageIds The list of package IDs
 * @param connection For tooling query
 */
export declare function getContainerOptions(packageIds: string[], connection: Connection): Promise<Map<string, PackageType>>;
/**
 * Given a list of subscriber package version IDs (04t), return the associated version strings (e.g., Major.Minor.Patch.Build)
 *
 * @return Map of subscriberPackageVersionId to versionString
 * @param subscriberPackageVersionIds
 * @param connection For tooling query
 */
export declare function getPackageVersionStrings(subscriberPackageVersionIds: string[], connection: Connection): Promise<Map<string, string>>;
export declare function getPackageVersionNumber(package2VersionObj: PackagingSObjects.Package2Version): string;
/**
 * Generate package alias json entry for this package version that can be written to sfdx-project.json
 *
 * @param connection
 * @param project SfProject instance for the project
 * @param packageVersionId 04t id of the package to create the alias entry for
 * @param packageVersionNumber that will be appended to the package name to form the alias
 * @param branch
 * @param packageId the 0Ho id
 * @private
 */
export declare function generatePackageAliasEntry(connection: Connection, project: SfProject, packageVersionId: string, packageVersionNumber: string, branch: string, packageId: string): Promise<[string, string]>;
export declare function combineSaveErrors(sObject: string, crudOperation: string, errors: SaveError[]): SfError;
/**
 * Returns a Duration object from param duration when it is a number, otherwise return itself
 *
 * @param duration = number to be converted to a Duration or Duration object
 * @param unit = (Default Duration.Unit.MILLISECONDS) Duration unit of number - See @link {Duration.Unit} for valid values
 */
export declare function numberToDuration(duration: number | Duration, unit?: Duration.Unit): Duration;
/**
 * Zips directory to given zipfile.
 *
 * https://github.com/archiverjs/node-archiver
 *
 * @param dir to zip
 * @param zipfile
 */
export declare function zipDir(dir: string, zipfile: string): Promise<void>;
export declare function copyDir(src: string, dest: string): void;
