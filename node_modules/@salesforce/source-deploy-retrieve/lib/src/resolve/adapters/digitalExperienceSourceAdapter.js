"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DigitalExperienceSourceAdapter = void 0;
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const common_1 = require("../../common");
const __1 = require("..");
const utils_1 = require("../../utils");
const bundleSourceAdapter_1 = require("./bundleSourceAdapter");
/**
 * Source Adapter for DigitalExperience metadata types. This metadata type is a bundled type of the format
 *
 * __Example Structure__:
 *
 *```text
 * site/
 * ├── foos/
 * |   ├── sfdc_cms__appPage/
 * |   |   ├── mainAppPage/
 * |   |   |  ├── _meta.json
 * |   |   |  ├── content.json
 * |   ├── sfdc_cms__view/
 * |   |   ├── view1/
 * |   |   |  ├── _meta.json
 * |   |   |  ├── content.json
 * |   |   |  ├── fr.json
 * |   |   |  ├── en.json
 * |   |   ├── view2/
 * |   |   |  ├── _meta.json
 * |   |   |  ├── content.json
 * |   |   |  ├── ar.json
 * |   |   ├── view3/
 * |   |   |  ├── _meta.json
 * |   |   |  ├── content.json
 * |   |   |  ├── mobile/
 * |   |   |  |   ├──mobile.json
 * |   |   |  ├── tablet/
 * |   |   |  |   ├──tablet.json
 * |   ├── foos.digitalExperience-meta.xml
 * content/
 * ├── bars/
 * |   ├── bars.digitalExperience-meta.xml
 * ```
 *
 * In the above structure the metadata xml file ending with "digitalExperience-meta.xml" belongs to DigitalExperienceBundle MD type.
 * The "_meta.json" files are child metadata files of DigitalExperienceBundle belonging to DigitalExperience MD type. The rest of the files in the
 * corresponding folder are the contents to the DigitalExperience metadata. So, incase of DigitalExperience the metadata file is a JSON file
 * and not an XML file
 */
class DigitalExperienceSourceAdapter extends bundleSourceAdapter_1.BundleSourceAdapter {
    getRootMetadataXmlPath(trigger) {
        if (this.isBundleType()) {
            return this.getBundleMetadataXmlPath(trigger);
        }
        // metafile name = metaFileSuffix for DigitalExperience.
        return (0, path_1.join)((0, path_1.dirname)(trigger), this.type.metaFileSuffix);
    }
    trimPathToContent(path) {
        if (this.isBundleType()) {
            return;
        }
        const pathToContent = (0, path_1.dirname)(path);
        const parts = pathToContent.split(path_1.sep);
        /* Handle mobile or tablet variants.Eg- digitalExperiences/site/lwr11/sfdc_cms__view/home/mobile/mobile.json
         Go back to one level in that case
         Bundle hierarchy baseType/spaceApiName/contentType/contentApiName/variantFolders/file */
        const digitalExperiencesIndex = parts.indexOf('digitalExperiences');
        if (digitalExperiencesIndex > -1) {
            const depth = parts.length - digitalExperiencesIndex - 1;
            if (depth === digitalExperienceBundleWithVariantsDepth) {
                parts.pop();
                return parts.join(path_1.sep);
            }
        }
        return pathToContent;
    }
    populate(trigger, component) {
        if (this.isBundleType()) {
            // for top level types we don't need to resolve parent
            return component;
        }
        const source = super.populate(trigger, component);
        const parentType = this.registry.getParentType(this.type.id);
        const parent = new __1.SourceComponent({
            name: this.getBundleName(source.content),
            type: parentType,
            xml: this.getBundleMetadataXmlPath(source.content),
        }, this.tree, this.forceIgnore);
        return new __1.SourceComponent({
            name: calculateNameFromPath(source.content),
            type: this.type,
            content: source.content,
            xml: source.xml,
            parent,
            parentType,
        }, this.tree, this.forceIgnore);
    }
    parseMetadataXml(path) {
        const xml = super.parseMetadataXml(path);
        if (xml) {
            return {
                fullName: this.getBundleName(path),
                suffix: xml.suffix,
                path: xml.path,
            };
        }
    }
    getBundleName(contentPath) {
        const bundlePath = this.getBundleMetadataXmlPath(contentPath);
        return `${(0, utils_1.parentName)((0, path_1.dirname)(bundlePath))}/${(0, utils_1.parentName)(bundlePath)}`;
    }
    getBundleMetadataXmlPath(path) {
        if (this.isBundleType() && path.endsWith(common_1.META_XML_SUFFIX)) {
            // if this is the bundle type and it ends with -meta.xml, then this is the bundle metadata xml path
            return path;
        }
        const pathParts = path.split(path_1.sep);
        const typeFolderIndex = pathParts.lastIndexOf(this.type.directoryName);
        // 3 because we want 'digitaExperiences' directory, 'baseType' directory and 'bundleName' directory
        const basePath = pathParts.slice(0, typeFolderIndex + 3).join(path_1.sep);
        const bundleFileName = pathParts[typeFolderIndex + 2];
        const suffix = this.isBundleType() ? this.type.suffix : this.registry.getParentType(this.type.id).suffix;
        return `${basePath}${path_1.sep}${bundleFileName}.${suffix}${common_1.META_XML_SUFFIX}`;
    }
    isBundleType() {
        return this.type.id === 'digitalexperiencebundle';
    }
}
exports.DigitalExperienceSourceAdapter = DigitalExperienceSourceAdapter;
/**
 * @param contentPath This hook is called only after trimPathToContent() is called. so this will always be a folder structure
 * @returns name of type/apiName format
 */
const calculateNameFromPath = (contentPath) => `${(0, utils_1.parentName)(contentPath)}/${(0, utils_1.baseName)(contentPath)}`;
// Bundle hierarchy baseType/spaceApiName/contentType/contentApiName/variantFolders/file
const digitalExperienceBundleWithVariantsDepth = 5;
//# sourceMappingURL=digitalExperienceSourceAdapter.js.map