"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package1VersionCreateGetCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package1_version_create_get');
class Package1VersionCreateGetCommand extends command_1.SfdxCommand {
    async run() {
        const result = await packaging_1.Package1Version.getCreateStatus(this.org.getConnection(), this.flags.requestid);
        if (result.Status === 'ERROR') {
            // toolbelt was accessing request.Errors.errors, I'm unsure about this type, but was unable to reproduce an error
            // in the wild, and decided to trust how it was working
            const errors = result.Errors?.errors?.map((e) => e.message).join('\n');
            throw messages.createError('uploadFailure', [errors ?? 'Package version creation failed with unknown error']);
        }
        else {
            const arg = result.Status === 'SUCCESS' ? [result.MetadataPackageVersionId] : [result.Id, this.org.getUsername()];
            this.ux.log(messages.getMessage(result.Status, arg));
        }
        return result;
    }
}
exports.Package1VersionCreateGetCommand = Package1VersionCreateGetCommand;
Package1VersionCreateGetCommand.description = messages.getMessage('cliDescription');
Package1VersionCreateGetCommand.examples = messages.getMessage('examples').split(os.EOL);
Package1VersionCreateGetCommand.requiresUsername = true;
Package1VersionCreateGetCommand.flagsConfig = {
    requestid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('requestId'),
        longDescription: messages.getMessage('requestIdLong'),
        required: true,
    }),
};
//# sourceMappingURL=get.js.map