"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package1VersionDisplayCommand = void 0;
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package1_version_display');
class Package1VersionDisplayCommand extends command_1.SfdxCommand {
    async run() {
        const pv1 = new packaging_1.Package1Version(this.org.getConnection(), this.flags.packageversionid);
        const results = (await pv1.getPackageVersion()).map((result) => ({
            MetadataPackageVersionId: result.Id,
            MetadataPackageId: result.MetadataPackageId,
            Name: result.Name,
            ReleaseState: result.ReleaseState,
            Version: `${result.MajorVersion}.${result.MinorVersion}.${result.PatchVersion}`,
            BuildNumber: result.BuildNumber,
        }));
        if (results.length === 0) {
            this.ux.log('No results found');
        }
        else {
            this.ux.table(results, {
                MetadataPackageVersionId: { header: 'MetadataPackageVersionId' },
                MetadataPackageId: { header: 'MetadataPackageId' },
                Name: { header: 'Name' },
                Version: { header: 'Version' },
                ReleaseState: { header: 'ReleaseState' },
                BuildNumber: { header: 'BuildNumber' },
            });
        }
        return results;
    }
}
exports.Package1VersionDisplayCommand = Package1VersionDisplayCommand;
Package1VersionDisplayCommand.description = messages.getMessage('description');
Package1VersionDisplayCommand.requiresUsername = true;
Package1VersionDisplayCommand.flagsConfig = {
    packageversionid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('packageId'),
        longDescription: messages.getMessage('packageIdLong'),
        required: true,
        validate: (id) => {
            if (/^04t.{12,15}$/.test(id)) {
                return true;
            }
            throw messages.createError('packageIdInvalid');
        },
    }),
};
//# sourceMappingURL=display.js.map