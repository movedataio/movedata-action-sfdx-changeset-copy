"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUpdateCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_update');
const packageCreate = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_create');
class PackageUpdateCommand extends command_1.SfdxCommand {
    async run() {
        const pkg = new packaging_1.Package({
            packageAliasOrId: this.flags.package,
            connection: this.hubOrg.getConnection(),
            project: this.project,
        });
        const result = await pkg.update({
            Id: pkg.getId(),
            Name: this.flags.name,
            Description: this.flags.description,
            PackageErrorUsername: this.flags.errornotificationusername,
        });
        this.ux.log(messages.getMessage('success', [pkg.getId()]));
        return result;
    }
}
exports.PackageUpdateCommand = PackageUpdateCommand;
PackageUpdateCommand.description = messages.getMessage('cliDescription');
PackageUpdateCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageUpdateCommand.requiresDevhubUsername = true;
PackageUpdateCommand.requiresProject = true;
PackageUpdateCommand.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('packageLong'),
        required: true,
    }),
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('name'),
        longDescription: messages.getMessage('nameLong'),
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('description'),
        longDescription: messages.getMessage('descriptionLong'),
    }),
    errornotificationusername: command_1.flags.string({
        char: 'o',
        description: packageCreate.getMessage('errorNotificationUsername'),
        longDescription: packageCreate.getMessage('errorNotificationUsernameLong'),
    }),
};
//# sourceMappingURL=update.js.map