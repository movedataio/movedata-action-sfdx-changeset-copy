"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const install_1 = require("../install");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_install_report');
const installMsgs = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_install');
class Report extends command_1.SfdxCommand {
    async run() {
        const connection = this.org.getConnection();
        const pkgInstallRequest = await packaging_1.SubscriberPackageVersion.getInstallRequest(this.flags.requestid, connection);
        install_1.Install.parseStatus(pkgInstallRequest, this.ux, installMsgs, this.org.getUsername());
        return pkgInstallRequest;
    }
}
exports.Report = Report;
Report.description = messages.getMessage('cliDescription');
Report.examples = messages.getMessage('examples').split(os.EOL);
Report.requiresUsername = true;
Report.flagsConfig = {
    requestid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('requestId'),
        longDescription: messages.getMessage('requestIdLong'),
        required: true,
    }),
};
//# sourceMappingURL=report.js.map