"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageCreateCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_create');
class PackageCreateCommand extends command_1.SfdxCommand {
    async run() {
        const options = {
            description: (this.flags.description || ''),
            errorNotificationUsername: this.flags.errornotificationusername,
            name: this.flags.name,
            noNamespace: this.flags.nonamespace,
            orgDependent: this.flags.orgdependent,
            packageType: this.flags.packagetype,
            path: this.flags.path,
        };
        const result = await packaging_1.Package.create(this.hubOrg.getConnection(), this.project, options);
        this.display(result);
        return result;
    }
    display(result) {
        this.ux.styledHeader('Ids');
        this.ux.table([{ name: 'Package Id', value: result.Id }], { name: { header: 'NAME' }, value: { header: 'VALUE' } });
    }
}
exports.PackageCreateCommand = PackageCreateCommand;
PackageCreateCommand.description = messages.getMessage('cliDescription');
PackageCreateCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageCreateCommand.requiresDevhubUsername = true;
PackageCreateCommand.requiresProject = true;
PackageCreateCommand.flagsConfig = {
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('name'),
        longDescription: messages.getMessage('nameLong'),
        required: true,
    }),
    packagetype: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('packageType'),
        longDescription: messages.getMessage('packageTypeLong'),
        required: true,
        options: ['Managed', 'Unlocked'],
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('description'),
        longDescription: messages.getMessage('descriptionLong'),
    }),
    nonamespace: command_1.flags.boolean({
        char: 'e',
        description: messages.getMessage('noNamespace'),
        longDescription: messages.getMessage('noNamespaceLong'),
    }),
    path: command_1.flags.directory({
        char: 'r',
        description: messages.getMessage('path'),
        longDescription: messages.getMessage('longPath'),
        required: true,
    }),
    orgdependent: command_1.flags.boolean({
        description: messages.getMessage('orgDependent'),
        longDescription: messages.getMessage('orgDependentLong'),
    }),
    errornotificationusername: command_1.flags.string({
        char: 'o',
        description: messages.getMessage('errorNotificationUsername'),
        longDescription: messages.getMessage('errorNotificationUsernameLong'),
    }),
};
//# sourceMappingURL=create.js.map