"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUninstallReportCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_uninstall_report');
class PackageUninstallReportCommand extends command_1.SfdxCommand {
    async run() {
        const requestId = this.flags.requestid;
        const result = await packaging_1.SubscriberPackageVersion.uninstallStatus(requestId, this.org.getConnection());
        const arg = result.Status === 'Success' ? [result.SubscriberPackageVersionId] : [result.Id, this.org.getUsername()];
        this.ux.log(messages.getMessage(result.Status, arg));
        return result;
    }
}
exports.PackageUninstallReportCommand = PackageUninstallReportCommand;
PackageUninstallReportCommand.description = messages.getMessage('cliDescription');
PackageUninstallReportCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageUninstallReportCommand.requiresUsername = true;
PackageUninstallReportCommand.flagsConfig = {
    requestid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('requestId'),
        longDescription: messages.getMessage('requestIdLong'),
        required: true,
        validate: (id) => {
            if (/^06y.{12,15}$/.test(id)) {
                return true;
            }
            throw messages.createError('packageIdInvalid');
        },
    }),
};
//# sourceMappingURL=report.js.map