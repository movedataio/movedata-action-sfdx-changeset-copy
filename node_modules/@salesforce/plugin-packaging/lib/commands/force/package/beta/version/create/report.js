"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionCreateReportCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const pkgUtils = require("@salesforce/packaging");
const packaging_1 = require("@salesforce/packaging");
const chalk = require("chalk");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create_report');
const pvclMessages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create_list');
const plMessages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_list');
const ERROR_LIMIT = 12;
class PackageVersionCreateReportCommand extends command_1.SfdxCommand {
    async run() {
        const result = await packaging_1.PackageVersion.getCreateStatus(this.flags.packagecreaterequestid, this.hubOrg.getConnection());
        this.display(result);
        return [result];
    }
    display(record) {
        const installUrlValue = record.Status === 'Success' ? `${pkgUtils.INSTALL_URL_BASE.toString()}${record.SubscriberPackageVersionId}` : '';
        const data = [
            {
                key: pvclMessages.getMessage('id'),
                value: record.Id,
            },
            {
                key: pvclMessages.getMessage('status'),
                value: (0, kit_1.camelCaseToTitleCase)(record.Status),
            },
            {
                key: pvclMessages.getMessage('packageId'),
                value: record.Package2Id,
            },
            {
                key: pvclMessages.getMessage('packageVersionId'),
                value: record.Package2VersionId,
            },
            {
                key: pvclMessages.getMessage('subscriberPackageVersionId'),
                value: record.SubscriberPackageVersionId,
            },
            {
                key: pvclMessages.getMessage('tag'),
                value: record.Tag,
            },
            {
                key: pvclMessages.getMessage('branch'),
                value: record.Branch,
            },
            { key: 'Created Date', value: record.CreatedDate },
            {
                key: pvclMessages.getMessage('installUrl'),
                value: installUrlValue,
            },
            {
                key: plMessages.getMessage('createdBy'),
                value: record.CreatedBy,
            },
        ];
        this.ux.styledHeader(chalk.blue('Package Version Create Request'));
        this.ux.table(data, {
            key: { header: 'Name' },
            value: { header: 'Value' },
        });
        if (record.Error?.length > 0) {
            this.ux.log('');
            const errors = [];
            record.Error.slice(0, ERROR_LIMIT).forEach((error) => {
                errors.push(`(${errors.length + 1}) ${error}`);
            });
            this.ux.styledHeader(chalk.red('Errors'));
            this.ux.log(errors.join('\n'));
            // Check if errors were truncated.  If so, inform the user with
            // instructions on how to retrieve the remaining errors.
            if (record.Error.length > ERROR_LIMIT) {
                this.ux.log(messages.getMessage('truncatedErrors', [
                    this.flags.packagecreaterequestid,
                    this.hubOrg.getUsername(),
                ]));
            }
        }
    }
}
exports.PackageVersionCreateReportCommand = PackageVersionCreateReportCommand;
PackageVersionCreateReportCommand.description = messages.getMessage('cliDescription');
PackageVersionCreateReportCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageVersionCreateReportCommand.requiresDevhubUsername = true;
PackageVersionCreateReportCommand.flagsConfig = {
    packagecreaterequestid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('requestId'),
        longDescription: messages.getMessage('requestIdLong'),
        required: true,
    }),
};
//# sourceMappingURL=report.js.map