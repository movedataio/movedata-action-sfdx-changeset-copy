"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageDeleteCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_delete');
class PackageDeleteCommand extends command_1.SfdxCommand {
    async run() {
        const promptMsg = this.flags.undelete ? 'promptUndelete' : 'promptDelete';
        const accepted = this.flags.noprompt || this.flags.json ? true : await this.ux.confirm(messages.getMessage(promptMsg));
        if (!accepted) {
            throw messages.createError('promptDeleteDeny');
        }
        const pkg = new packaging_1.Package({
            connection: this.hubOrg.getConnection(),
            project: this.project,
            packageAliasOrId: this.flags.package,
        });
        const result = this.flags.undelete ? await pkg.undelete() : await pkg.delete();
        this.display(result);
        return result;
    }
    display(result) {
        const message = messages.getMessage(this.flags.undelete ? 'humanSuccessUndelete' : 'humanSuccess', [result.id]);
        this.ux.log();
        this.ux.log(message);
    }
}
exports.PackageDeleteCommand = PackageDeleteCommand;
PackageDeleteCommand.description = messages.getMessage('cliDescription');
PackageDeleteCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageDeleteCommand.requiresDevhubUsername = true;
PackageDeleteCommand.requiresProject = true;
PackageDeleteCommand.flagsConfig = {
    noprompt: command_1.flags.boolean({
        char: 'n',
        description: messages.getMessage('noPrompt'),
        longDescription: messages.getMessage('noPromptLong'),
    }),
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('packageLong'),
        required: true,
    }),
    undelete: command_1.flags.boolean({
        description: messages.getMessage('undelete'),
        longDescription: messages.getMessage('undeleteLong'),
        hidden: true,
        default: false,
    }),
};
//# sourceMappingURL=delete.js.map