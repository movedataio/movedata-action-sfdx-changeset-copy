"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUninstallCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_uninstall');
class PackageUninstallCommand extends command_1.SfdxCommand {
    async run() {
        // no awaits in async method
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.uninstall, async (data) => {
            // Request still in progress.  Just print a console message and move on. Server will be polled again.
            this.ux.log(`Waiting for the package uninstall request to get processed. Status = ${data.Status}`);
        });
        const packageVersion = new packaging_1.SubscriberPackageVersion({
            aliasOrId: this.flags.package,
            connection: this.org.getConnection(),
            password: undefined,
        });
        const result = await packageVersion.uninstall(kit_1.Duration.seconds(30), this.flags.wait);
        const arg = result.Status === 'Success' ? [result.SubscriberPackageVersionId] : [result.Id, this.org.getUsername()];
        this.ux.log(messages.getMessage(result.Status, arg));
        return result;
    }
}
exports.PackageUninstallCommand = PackageUninstallCommand;
PackageUninstallCommand.description = messages.getMessage('cliDescription');
PackageUninstallCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageUninstallCommand.requiresUsername = true;
PackageUninstallCommand.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait'),
        longDescription: messages.getMessage('waitLong'),
        default: kit_1.Duration.minutes(0),
    }),
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('packageLong'),
        required: true,
    }),
};
//# sourceMappingURL=uninstall.js.map