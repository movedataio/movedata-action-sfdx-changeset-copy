"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionPromoteCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_promote');
class PackageVersionPromoteCommand extends command_1.SfdxCommand {
    async run() {
        const packageVersion = new packaging_1.PackageVersion({
            connection: this.hubOrg.getConnection(),
            project: this.project,
            idOrAlias: this.flags.package,
        });
        const packageVersionData = await packageVersion.getData();
        if (!this.flags.json && !this.flags.noprompt) {
            // Warn when a Managed package has removed metadata
            if (packageVersionData.HasMetadataRemoved) {
                this.ux.warn(messages.getMessage('hasMetadataRemovedWarning'));
            }
            // Prompt for confirmation
            if (!(await this.ux.confirm(messages.getMessage('packageVersionPromoteConfirm', [this.flags.package])))) {
                return;
            }
        }
        let result;
        try {
            result = await packageVersion.promote();
            result.id = packageVersionData.SubscriberPackageVersionId;
        }
        catch (e) {
            const err = core_1.SfError.wrap(e);
            if (err.name === 'DUPLICATE_VALUE' && err.message.includes('previously released')) {
                err.message = messages.getMessage('previouslyReleasedMessage');
                err.actions = [messages.getMessage('previouslyReleasedAction')];
            }
            throw err;
        }
        this.ux.log(messages.getMessage('humanSuccess', [result.id]));
        return result;
    }
}
exports.PackageVersionPromoteCommand = PackageVersionPromoteCommand;
PackageVersionPromoteCommand.description = messages.getMessage('cliDescription');
PackageVersionPromoteCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageVersionPromoteCommand.requiresDevhubUsername = true;
PackageVersionPromoteCommand.requiresProject = true;
PackageVersionPromoteCommand.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('packageLong'),
        required: true,
    }),
    noprompt: command_1.flags.boolean({
        char: 'n',
        description: messages.getMessage('setasreleasedForce'),
        longDescription: messages.getMessage('setasreleasedForceLong'),
    }),
};
//# sourceMappingURL=promote.js.map