"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageConvert = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const kit_2 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_convert');
const pvcMessages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create');
class PackageConvert extends command_1.SfdxCommand {
    async run() {
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.convert.progress, async (data) => {
            this.ux.log(`Request in progress. Sleeping 30 seconds. Will wait a total of ${data.timeRemaining.seconds} more seconds before timing out. Current Status='${(0, kit_2.camelCaseToTitleCase)(data.packageVersionCreateRequestResult.Status)}'`);
        });
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.convert.success, async () => {
            this.ux.log('SUCCESS');
        });
        // initialize the project instance if in a project
        let project;
        try {
            project = await core_1.SfProject.resolve();
        }
        catch (err) {
            // ignore project is optional
        }
        const result = await packaging_1.Package.convert(this.flags.package, this.hubOrg.getConnection(), {
            wait: this.flags.wait,
            installationKey: this.flags.installationkey,
            definitionfile: this.flags.definitionfile,
            installationKeyBypass: this.flags.installationkeybypass,
            buildInstance: this.flags.buildinstance,
        }, project);
        switch (result.Status) {
            case 'Error':
                throw new core_1.SfError(result.Error?.join('\n') ?? pvcMessages.getMessage('unknownError'));
            case 'Success':
                this.ux.log(pvcMessages.getMessage(result.Status, [
                    result.Id,
                    result.SubscriberPackageVersionId,
                    packaging_1.INSTALL_URL_BASE.toString(),
                    result.SubscriberPackageVersionId,
                ]));
                break;
            default:
                this.ux.log(pvcMessages.getMessage('InProgress', [(0, kit_2.camelCaseToTitleCase)(result.Status), result.Id]));
        }
        return result;
    }
}
exports.PackageConvert = PackageConvert;
PackageConvert.description = messages.getMessage('cliDescription');
PackageConvert.examples = messages.getMessage('examples').split(os.EOL);
PackageConvert.requiresDevhubUsername = true;
PackageConvert.hidden = true;
PackageConvert.flagsConfig = {
    package: command_1.flags.id({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('longPackage'),
        required: true,
        validate: /^033/,
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('key'),
        longDescription: messages.getMessage('longKey'),
        exactlyOne: ['installationkey', 'installationkeybypass'],
    }),
    definitionfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('definitionfile'),
        longDescription: messages.getMessage('longDefinitionfile'),
        hidden: true,
    }),
    installationkeybypass: command_1.flags.boolean({
        char: 'x',
        description: messages.getMessage('keyBypass'),
        longDescription: messages.getMessage('longKeyBypass'),
        exactlyOne: ['installationkey', 'installationkeybypass'],
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait'),
        longDescription: messages.getMessage('longWait'),
        default: kit_1.Duration.minutes(0),
    }),
    buildinstance: command_1.flags.string({
        char: 's',
        description: messages.getMessage('instance'),
        longDescription: messages.getMessage('longInstance'),
        hidden: true,
    }),
};
//# sourceMappingURL=convert.js.map