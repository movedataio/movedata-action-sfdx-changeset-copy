"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionCreateListCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const chalk = require("chalk");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create_list');
const packaging = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'packaging');
class PackageVersionCreateListCommand extends command_1.SfdxCommand {
    async run() {
        const connection = this.hubOrg.getConnection();
        const results = await packaging_1.PackageVersion.getPackageVersionCreateRequests(connection, { ...this.flags });
        if (results.length === 0) {
            this.ux.log('No results found');
        }
        else {
            this.ux.styledHeader(chalk.blue(`Package Version Create Requests  [${results.length}]`));
            const columnData = {
                Id: {},
                Status: {
                    header: messages.getMessage('status'),
                },
                Package2Id: {
                    header: messages.getMessage('packageId'),
                },
                Package2VersionId: {
                    header: messages.getMessage('packageVersionId'),
                },
                SubscriberPackageVersionId: {
                    header: messages.getMessage('subscriberPackageVersionId'),
                },
                Tag: {
                    header: messages.getMessage('tag'),
                },
                Branch: {
                    header: messages.getMessage('branch'),
                },
                CreatedDate: { header: 'Created Date' },
                CreatedBy: {
                    header: messages.getMessage('createdBy'),
                },
            };
            this.ux.table(results, columnData, { 'no-truncate': true });
        }
        return results;
    }
}
exports.PackageVersionCreateListCommand = PackageVersionCreateListCommand;
PackageVersionCreateListCommand.description = messages.getMessage('cliDescription');
PackageVersionCreateListCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageVersionCreateListCommand.requiresDevhubUsername = true;
PackageVersionCreateListCommand.flagsConfig = {
    createdlastdays: command_1.flags.number({
        char: 'c',
        description: packaging.getMessage('createdLastDaysDescription'),
        longDescription: packaging.getMessage('createdLastDaysLongDescription'),
    }),
    status: command_1.flags.enum({
        char: 's',
        description: messages.getMessage('statusDescription'),
        longDescription: messages.getMessage('statusLongDescription'),
        options: ['Queued', 'InProgress', 'Success', 'Error'],
    }),
};
//# sourceMappingURL=list.js.map