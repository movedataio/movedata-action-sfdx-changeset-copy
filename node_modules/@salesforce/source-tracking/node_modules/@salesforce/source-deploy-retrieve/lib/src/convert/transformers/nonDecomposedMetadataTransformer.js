"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonDecomposedMetadataTransformer = void 0;
const ts_types_1 = require("@salesforce/ts-types");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const decomposedMetadataTransformer_1 = require("./decomposedMetadataTransformer");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/source-deploy-retrieve', 'sdr');
/**
 * Metadata Transformer for metadata types with children types that are NOT decomposed into separate files.
 *
 * Example Types:
 * - CustomLabels
 */
class NonDecomposedMetadataTransformer extends decomposedMetadataTransformer_1.DecomposedMetadataTransformer {
    // streams uses mergeWith for all types.  Removing it would break the interface
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async toSourceFormat(component, mergeWith) {
        var _a;
        // this will only include the incoming (retrieved) labels, not the local file
        const parentXml = await component.parseXml();
        const xmlPathToChildren = `${component.type.name}.${component.type.directoryName}`;
        const incomingChildrenXml = (0, kit_1.ensureArray)((0, ts_types_1.get)(parentXml, xmlPathToChildren));
        if (!component.type.children) {
            throw messages.createError('noChildTypes', [component.type.name, component.fullName, component.xml]);
        }
        // presumes they only have 1 child!
        const [childTypeId] = Object.keys(component.type.children.types);
        const { uniqueIdElement } = component.type.children.types[childTypeId];
        (_a = this.context.nonDecomposition.transactionState).exampleComponent ?? (_a.exampleComponent = component);
        incomingChildrenXml.map((child) => {
            if (!uniqueIdElement) {
                throw messages.createError('uniqueIdElementNotInRegistry', [
                    component.type.name,
                    component.fullName,
                    component.xml,
                ]);
            }
            const childName = (0, ts_types_1.getString)(child, uniqueIdElement);
            if (!childName) {
                throw messages.createError('uniqueIdElementNotInChild', [uniqueIdElement, component.fullName, component.xml]);
            }
            this.context.nonDecomposition.transactionState.childrenByUniqueElement.set(childName, child);
        });
        return [];
    }
}
exports.NonDecomposedMetadataTransformer = NonDecomposedMetadataTransformer;
//# sourceMappingURL=nonDecomposedMetadataTransformer.js.map