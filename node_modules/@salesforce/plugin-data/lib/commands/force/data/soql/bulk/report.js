"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkQueryReport = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const bulk_1 = require("jsforce/lib/api/bulk");
const query_1 = require("../query");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.report');
class BulkQueryReport extends query_1.DataSoqlQueryCommand {
    async run() {
        const job = new bulk_1.QueryJobV2({
            operation: 'query',
            pollingOptions: { pollTimeout: 0, pollInterval: 0 },
            query: '',
            connection: this.org.getConnection(),
        });
        job.jobInfo = { id: this.flags.bulkqueryid };
        const results = await job.getResults();
        const soqlQuery = new query_1.SoqlQuery();
        const queryResult = soqlQuery.transformBulkResults(results, '');
        this.displayResults({ ...queryResult });
        return queryResult.result;
    }
}
exports.BulkQueryReport = BulkQueryReport;
BulkQueryReport.description = messages.getMessage('description');
BulkQueryReport.requiresUsername = true;
BulkQueryReport.examples = messages.getMessage('examples').split(os.EOL);
BulkQueryReport.flagsConfig = {
    bulkqueryid: command_1.flags.string({
        char: 'i',
        required: true,
        description: messages.getMessage('bulkQueryIdDescription'),
    }),
    resultformat: query_1.DataSoqlQueryCommand.flagsConfig.resultformat,
};
//# sourceMappingURL=report.js.map