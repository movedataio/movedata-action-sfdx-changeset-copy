import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.promise";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { PassThrough } from 'stream';
import { concatStreamsAsDuplex, readAll } from './util/stream';
import FormData from 'form-data';
/**
 *
 */

export function createHttpRequestHandlerStreams(req) {
  const {
    body: reqBody
  } = req;
  const input = new PassThrough();
  const output = new PassThrough();
  const duplex = concatStreamsAsDuplex(input, output);

  if (typeof reqBody !== 'undefined') {
    _setTimeout(() => {
      if (reqBody instanceof FormData) {
        duplex.end(reqBody.getBuffer());
      } else {
        duplex.end(reqBody, 'utf8');
      }
    }, 0);
  }

  duplex.on('response', async res => {
    if (duplex.listenerCount('complete') > 0) {
      const resBody = await readAll(duplex);
      duplex.emit('complete', _objectSpread(_objectSpread({}, res), {}, {
        body: resBody
      }));
    }
  });
  return {
    input,
    output,
    stream: duplex
  };
}
const redirectStatuses = new _Set([301, 302, 303, 307, 308]);
/**
 *
 */

export function isRedirect(status) {
  return redirectStatuses.has(status);
}
/**
 *
 */

const MAX_REDIRECT_COUNT = 10;
/**
 *
 */

export function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
  if (counter >= MAX_REDIRECT_COUNT) {
    throw new Error('Reached to maximum redirect count');
  }

  const redirectUrl = res.headers['location'];

  if (!redirectUrl) {
    throw new Error('No redirect URI found');
  }

  const getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : () => ({
    method: 'GET',
    url: redirectUrl,
    headers: req.headers
  });
  const nextReqParams = getRedirectRequest(redirectUrl);

  if (!nextReqParams) {
    throw new Error('Cannot handle redirect for ' + redirectUrl);
  }

  redirectCallback(nextReqParams);
}
/**
 *
 */

export async function executeWithTimeout(execFn, msec, cancelCallback) {
  let timeout = false;
  let pid = msec != null ? _setTimeout(() => {
    timeout = true;
    cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
  }, msec) : undefined;
  let res;

  try {
    res = await execFn();
  } finally {
    if (pid) {
      clearTimeout(pid);
    }
  }

  if (timeout) {
    throw new Error('Request Timeout');
  }

  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LWhlbHBlci50cyJdLCJuYW1lcyI6WyJQYXNzVGhyb3VnaCIsImNvbmNhdFN0cmVhbXNBc0R1cGxleCIsInJlYWRBbGwiLCJGb3JtRGF0YSIsImNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMiLCJyZXEiLCJib2R5IiwicmVxQm9keSIsImlucHV0Iiwib3V0cHV0IiwiZHVwbGV4IiwiZW5kIiwiZ2V0QnVmZmVyIiwib24iLCJyZXMiLCJsaXN0ZW5lckNvdW50IiwicmVzQm9keSIsImVtaXQiLCJzdHJlYW0iLCJyZWRpcmVjdFN0YXR1c2VzIiwiaXNSZWRpcmVjdCIsInN0YXR1cyIsImhhcyIsIk1BWF9SRURJUkVDVF9DT1VOVCIsInBlcmZvcm1SZWRpcmVjdFJlcXVlc3QiLCJmb2xsb3dSZWRpcmVjdCIsImNvdW50ZXIiLCJyZWRpcmVjdENhbGxiYWNrIiwiRXJyb3IiLCJyZWRpcmVjdFVybCIsImhlYWRlcnMiLCJnZXRSZWRpcmVjdFJlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJuZXh0UmVxUGFyYW1zIiwiZXhlY3V0ZVdpdGhUaW1lb3V0IiwiZXhlY0ZuIiwibXNlYyIsImNhbmNlbENhbGxiYWNrIiwidGltZW91dCIsInBpZCIsInVuZGVmaW5lZCIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxXQUFULFFBQTRCLFFBQTVCO0FBQ0EsU0FBU0MscUJBQVQsRUFBZ0NDLE9BQWhDLFFBQStDLGVBQS9DO0FBRUEsT0FBT0MsUUFBUCxNQUFxQixXQUFyQjtBQUVBO0FBQ0E7QUFDQTs7QUFDQSxPQUFPLFNBQVNDLCtCQUFULENBQXlDQyxHQUF6QyxFQUEyRDtBQUNoRSxRQUFNO0FBQUVDLElBQUFBLElBQUksRUFBRUM7QUFBUixNQUFvQkYsR0FBMUI7QUFDQSxRQUFNRyxLQUFLLEdBQUcsSUFBSVIsV0FBSixFQUFkO0FBQ0EsUUFBTVMsTUFBTSxHQUFHLElBQUlULFdBQUos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LEdBS0lJLFNBTk47QUFPQSxNQUFJM0IsR0FBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLEdBQUcsR0FBRyxNQUFNc0IsTUFBTSxFQUFsQjtBQUNELEdBRkQsU0FFVTtBQUNSLFFBQUlJLEdBQUosRUFBUztBQUNQRSxNQUFBQSxZQUFZLENBQUNGLEdBQUQsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsTUFBSUQsT0FBSixFQUFhO0FBQ1gsVUFBTSxJQUFJWCxLQUFKLENBQVUsaUJBQVYsQ0FBTjtBQUNEOztBQUNELFNBQU9kLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhc3NUaHJvdWdoIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IGNvbmNhdFN0cmVhbXNBc0R1cGxleCwgcmVhZEFsbCB9IGZyb20gJy4vdXRpbC9zdHJlYW0nO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBSZXF1ZXN0T3B0aW9ucywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSHR0cFJlcXVlc3RIYW5kbGVyU3RyZWFtcyhyZXE6IEh0dHBSZXF1ZXN0KSB7XG4gIGNvbnN0IHsgYm9keTogcmVxQm9keSB9ID0gcmVxO1xuICBjb25zdCBpbnB1dCA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICBjb25zdCBvdXRwdXQgPSBuZXcgUGFzc1Rocm91Z2goKTtcbiAgY29uc3QgZHVwbGV4ID0gY29uY2F0U3RyZWFtc0FzRHVwbGV4KGlucHV0LCBvdXRwdXQpO1xuXG4gIGlmICh0eXBlb2YgcmVxQm9keSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChyZXFCb2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgZHVwbGV4LmVuZChyZXFCb2R5LmdldEJ1ZmZlcigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR1cGxleC5lbmQocmVxQm9keSwgJ3V0ZjgnKTtcbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfVxuICBkdXBsZXgub24oJ3Jlc3BvbnNlJywgYXN5bmMgKHJlcykgPT4ge1xuICAgIGlmIChkdXBsZXgubGlzdGVuZXJDb3VudCgnY29tcGxldGUnKSA+IDApIHtcbiAgICAgIGNvbnN0IHJlc0JvZHkgPSBhd2FpdCByZWFkQWxsKGR1cGxleCk7XG4gICAgICBkdXBsZXguZW1pdCgnY29tcGxldGUnLCB7XG4gICAgICAgIC4uLnJlcyxcbiAgICAgICAgYm9keTogcmVzQm9keSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7IGlucHV0LCBvdXRwdXQsIHN0cmVhbTogZHVwbGV4IH07XG59XG5cbmNvbnN0IHJlZGlyZWN0U3RhdHVzZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZGlyZWN0KHN0YXR1czogbnVtYmVyKSB7XG4gIHJldHVybiByZWRpcmVjdFN0YXR1c2VzLmhhcyhzdGF0dXMpO1xufVxuXG4vKipcbiAqXG4gKi9cbmNvbnN0IE1BWF9SRURJUkVDVF9DT1VOVCA9IDEwO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtUmVkaXJlY3RSZXF1ZXN0KFxuICByZXE6IEh0dHBSZXF1ZXN0LFxuICByZXM6IE9taXQ8SHR0cFJlc3BvbnNlLCAnYm9keSc+LFxuICBmb2xsb3dSZWRpcmVjdDogTm9uTnVsbGFibGU8SHR0cFJlcXVlc3RPcHRpb25zWydmb2xsb3dSZWRpcmVjdCddPixcbiAgY291bnRlcjogbnVtYmVyLFxuICByZWRpcmVjdENhbGxiYWNrOiAocmVxOiBIdHRwUmVxdWVzdCkgPT4gdm9pZCxcbikge1xuICBpZiAoY291bnRlciA+PSBNQVhfUkVESVJFQ1RfQ09VTlQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWNoZWQgdG8gbWF4aW11bSByZWRpcmVjdCBjb3VudCcpO1xuICB9XG4gIGNvbnN0IHJlZGlyZWN0VXJsID0gcmVzLmhlYWRlcnNbJ2xvY2F0aW9uJ107XG4gIGlmICghcmVkaXJlY3RVcmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJlZGlyZWN0IFVSSSBmb3VuZCcpO1xuICB9XG4gIGNvbnN0IGdldFJlZGlyZWN0UmVxdWVzdCA9XG4gICAgdHlwZW9mIGZvbGxvd1JlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGZvbGxvd1JlZGlyZWN0XG4gICAgICA6ICgpID0+ICh7XG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyBhcyBjb25zdCxcbiAgICAgICAgICB1cmw6IHJlZGlyZWN0VXJsLFxuICAgICAgICAgIGhlYWRlcnM6IHJlcS5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgY29uc3QgbmV4dFJlcVBhcmFtcyA9IGdldFJlZGlyZWN0UmVxdWVzdChyZWRpcmVjdFVybCk7XG4gIGlmICghbmV4dFJlcVBhcmFtcykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGhhbmRsZSByZWRpcmVjdCBmb3IgJyArIHJlZGlyZWN0VXJsKTtcbiAgfVxuICByZWRpcmVjdENhbGxiYWNrKG5leHRSZXFQYXJhbXMpO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlV2l0aFRpbWVvdXQ8VD4oXG4gIGV4ZWNGbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgbXNlYzogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICBjYW5jZWxDYWxsYmFjaz86ICgpID0+IHZvaWQsXG4pOiBQcm9taXNlPFQ+IHtcbiAgbGV0IHRpbWVvdXQgPSBmYWxzZTtcbiAgbGV0IHBpZCA9XG4gICAgbXNlYyAhPSBudWxsXG4gICAgICA/IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgIGNhbmNlbENhbGxiYWNrPy4oKTtcbiAgICAgICAgfSwgbXNlYylcbiAgICAgIDogdW5kZWZpbmVkO1xuICBsZXQgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGF3YWl0IGV4ZWNGbigpO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChwaWQpIHtcbiAgICAgIGNsZWFyVGltZW91dChwaWQpO1xuICAgIH1cbiAgfVxuICBpZiAodGltZW91dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVxdWVzdCBUaW1lb3V0Jyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbiJdfQ==