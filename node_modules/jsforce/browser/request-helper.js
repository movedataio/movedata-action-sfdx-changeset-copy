import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { PassThrough } from 'stream';
import { concatStreamsAsDuplex, readAll } from './util/stream';
import FormData from 'form-data';
/**
 *
 */

export function createHttpRequestHandlerStreams(req) {
  var reqBody = req.body;
  var input = new PassThrough();
  var output = new PassThrough();
  var duplex = concatStreamsAsDuplex(input, output);

  if (typeof reqBody !== 'undefined') {
    _setTimeout(function () {
      if (reqBody instanceof FormData) {
        duplex.end(reqBody.getBuffer());
      } else {
        duplex.end(reqBody, 'utf8');
      }
    }, 0);
  }

  duplex.on('response', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {
      var resBody;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(duplex.listenerCount('complete') > 0)) {
                _context.next = 5;
                break;
              }

              _context.next = 3;
              return readAll(duplex);

            case 3:
              resBody = _context.sent;
              duplex.emit('complete', _objectSpread(_objectSpread({}, res), {}, {
                body: resBody
              }));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  return {
    input: input,
    output: output,
    stream: duplex
  };
}
var redirectStatuses = new _Set([301, 302, 303, 307, 308]);
/**
 *
 */

export function isRedirect(status) {
  return redirectStatuses.has(status);
}
/**
 *
 */

var MAX_REDIRECT_COUNT = 10;
/**
 *
 */

export function performRedirectRequest(req, res, followRedirect, counter, redirectCallback) {
  if (counter >= MAX_REDIRECT_COUNT) {
    throw new Error('Reached to maximum redirect count');
  }

  var redirectUrl = res.headers['location'];

  if (!redirectUrl) {
    throw new Error('No redirect URI found');
  }

  var getRedirectRequest = typeof followRedirect === 'function' ? followRedirect : function () {
    return {
      method: 'GET',
      url: redirectUrl,
      headers: req.headers
    };
  };
  var nextReqParams = getRedirectRequest(redirectUrl);

  if (!nextReqParams) {
    throw new Error('Cannot handle redirect for ' + redirectUrl);
  }

  redirectCallback(nextReqParams);
}
/**
 *
 */

export function executeWithTimeout(_x2, _x3, _x4) {
  return _executeWithTimeout.apply(this, arguments);
}

function _executeWithTimeout() {
  _executeWithTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(execFn, msec, cancelCallback) {
    var timeout, pid, res;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            timeout = false;
            pid = msec != null ? _setTimeout(function () {
              timeout = true;
              cancelCallback === null || cancelCallback === void 0 ? void 0 : cancelCallback();
            }, msec) : undefined;
            _context2.prev = 2;
            _context2.next = 5;
            return execFn();

          case 5:
            res = _context2.sent;

          case 6:
            _context2.prev = 6;

            if (pid) {
              clearTimeout(pid);
            }

            return _context2.finish(6);

          case 9:
            if (!timeout) {
              _context2.next = 11;
              break;
            }

            throw new Error('Request Timeout');

          case 11:
            return _context2.abrupt("return", res);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2,, 6, 9]]);
  }));
  return _executeWithTimeout.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LWhlbHBlci50cyJdLCJuYW1lcyI6WyJQYXNzVGhyb3VnaCIsImNvbmNhdFN0cmVhbXNBc0R1cGxleCIsInJlYWRBbGwiLCJGb3JtRGF0YSIsImNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMiLCJyZXEiLCJyZXFCb2R5IiwiYm9keSIsImlucHV0Iiwib3V0cHV0IiwiZHVwbGV4IiwiZW5kIiwiZ2V0QnVmZmVyIiwib24iLCJyZXMiLCJsaXN0ZW5lckNvdW50IiwicmVzQm9keSIsImVtaXQiLCJzdHJlYW0iLCJyZWRpcmVjdFN0YXR1c2VzIiwiaXNSZWRpcmVjdCIsInN0YXR1cyIsImhhcyIsIk1BWF9SRURJUkVDVF9DT1VOVCIsInBlcmZvcm1SZWRpcmVjdFJlcXVlc3QiLCJmb2xsb3dSZWRpcmVjdCIsImNvdW50ZXIiLCJyZWRpcmVjdENhbGxiYWNrIiwiRXJyb3IiLCJyZWRpcmVjdFVybCIsImhlYWRlcnMiLCJnZXRSZWRpcmVjdFJlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJuZXh0UmVxUGFyYW1zIiwiZXhlY3V0ZVdpdGhUaW1lb3V0IiwiZXhlY0ZuIiwibXNlYyIsImNhbmNlbENhbGxiYWNrIiwidGltZW91dCIsInBpZCIsInVuZGVmaW5lZCIsImNsZWFyVGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLFdBQVQsUUFBNEIsUUFBNUI7QUFDQSxTQUFTQyxxQkFBVCxFQUFnQ0MsT0FBaEMsUUFBK0MsZUFBL0M7QUFFQSxPQUFPQyxRQUFQLE1BQXFCLFdBQXJCO0FBRUE7QUFDQTtBQUNBOztBQUNBLE9BQU8sU0FBU0MsK0JBQVQsQ0FBeUNDLEdBQXpDLEVBQTJEO0FBQUEsTUFDbERDLE9BRGtELEdBQ3RDRCxHQURzQyxDQUN4REUsSUFEd0Q7QUFFaEUsTUFBTUMsS0FBSyxHQUFHLElBQUlSLFdBQUosRUFBZDtBQUNBLE1BQU1TLE1BQU0sR0FBRyxJQUFJVCxXQUFKLEVBQWY7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QyxHQUtTLEtBTFQ7QUFNREMsWUFBQUEsR0FOQyxHQU9ISCxJQUFJLElBQUksSUFBUixHQUNJLFlBQVcsWUFBTTtBQUNmRSxjQUFBQSxPQUFPLEdBQUcsSUFBVjtBQUNBRCxjQUFBQSxjQUFjLFNBQWQsSUFBQUEsY0FBYyxXQUFkLFlBQUFBLGNBQWM7QUFDZixhQUhELEVBR0dELElBSEgsQ0FESixHQUtJSSxTQVpEO0FBQUE7QUFBQTtBQUFBLG1CQWVTTCxNQUFNLEVBZmY7O0FBQUE7QUFlSHRCLFlBQUFBLEdBZkc7O0FBQUE7QUFBQTs7QUFpQkgsZ0JBQUkwQixHQUFKLEVBQVM7QUFDUEUsY0FBQUEsWUFBWSxDQUFDRixHQUFELENBQVo7QUFDRDs7QUFuQkU7O0FBQUE7QUFBQSxpQkFxQkRELE9BckJDO0FBQUE7QUFBQTtBQUFBOztBQUFBLGtCQXNCRyxJQUFJWCxLQUFKLENBQVUsaUJBQVYsQ0F0Qkg7O0FBQUE7QUFBQSw4Q0F3QkVkLEdBeEJGOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzVGhyb3VnaCB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBjb25jYXRTdHJlYW1zQXNEdXBsZXgsIHJlYWRBbGwgfSBmcm9tICcuL3V0aWwvc3RyZWFtJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwUmVxdWVzdE9wdGlvbnMsIEh0dHBSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJ2Zvcm0tZGF0YSc7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0dHBSZXF1ZXN0SGFuZGxlclN0cmVhbXMocmVxOiBIdHRwUmVxdWVzdCkge1xuICBjb25zdCB7IGJvZHk6IHJlcUJvZHkgfSA9IHJlcTtcbiAgY29uc3QgaW5wdXQgPSBuZXcgUGFzc1Rocm91Z2goKTtcbiAgY29uc3Qgb3V0cHV0ID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gIGNvbnN0IGR1cGxleCA9IGNvbmNhdFN0cmVhbXNBc0R1cGxleChpbnB1dCwgb3V0cHV0KTtcblxuICBpZiAodHlwZW9mIHJlcUJvZHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAocmVxQm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICAgIGR1cGxleC5lbmQocmVxQm9keS5nZXRCdWZmZXIoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkdXBsZXguZW5kKHJlcUJvZHksICd1dGY4Jyk7XG4gICAgICB9XG4gICAgfSwgMCk7XG4gIH1cbiAgZHVwbGV4Lm9uKCdyZXNwb25zZScsIGFzeW5jIChyZXMpID0+IHtcbiAgICBpZiAoZHVwbGV4Lmxpc3RlbmVyQ291bnQoJ2NvbXBsZXRlJykgPiAwKSB7XG4gICAgICBjb25zdCByZXNCb2R5ID0gYXdhaXQgcmVhZEFsbChkdXBsZXgpO1xuICAgICAgZHVwbGV4LmVtaXQoJ2NvbXBsZXRlJywge1xuICAgICAgICAuLi5yZXMsXG4gICAgICAgIGJvZHk6IHJlc0JvZHksXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBpbnB1dCwgb3V0cHV0LCBzdHJlYW06IGR1cGxleCB9O1xufVxuXG5jb25zdCByZWRpcmVjdFN0YXR1c2VzID0gbmV3IFNldChbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdKTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZWRpcmVjdChzdGF0dXM6IG51bWJlcikge1xuICByZXR1cm4gcmVkaXJlY3RTdGF0dXNlcy5oYXMoc3RhdHVzKTtcbn1cblxuLyoqXG4gKlxuICovXG5jb25zdCBNQVhfUkVESVJFQ1RfQ09VTlQgPSAxMDtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybVJlZGlyZWN0UmVxdWVzdChcbiAgcmVxOiBIdHRwUmVxdWVzdCxcbiAgcmVzOiBPbWl0PEh0dHBSZXNwb25zZSwgJ2JvZHknPixcbiAgZm9sbG93UmVkaXJlY3Q6IE5vbk51bGxhYmxlPEh0dHBSZXF1ZXN0T3B0aW9uc1snZm9sbG93UmVkaXJlY3QnXT4sXG4gIGNvdW50ZXI6IG51bWJlcixcbiAgcmVkaXJlY3RDYWxsYmFjazogKHJlcTogSHR0cFJlcXVlc3QpID0+IHZvaWQsXG4pIHtcbiAgaWYgKGNvdW50ZXIgPj0gTUFYX1JFRElSRUNUX0NPVU5UKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjaGVkIHRvIG1heGltdW0gcmVkaXJlY3QgY291bnQnKTtcbiAgfVxuICBjb25zdCByZWRpcmVjdFVybCA9IHJlcy5oZWFkZXJzWydsb2NhdGlvbiddO1xuICBpZiAoIXJlZGlyZWN0VXJsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyByZWRpcmVjdCBVUkkgZm91bmQnKTtcbiAgfVxuICBjb25zdCBnZXRSZWRpcmVjdFJlcXVlc3QgPVxuICAgIHR5cGVvZiBmb2xsb3dSZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBmb2xsb3dSZWRpcmVjdFxuICAgICAgOiAoKSA9PiAoe1xuICAgICAgICAgIG1ldGhvZDogJ0dFVCcgYXMgY29uc3QsXG4gICAgICAgICAgdXJsOiByZWRpcmVjdFVybCxcbiAgICAgICAgICBoZWFkZXJzOiByZXEuaGVhZGVycyxcbiAgICAgICAgfSk7XG4gIGNvbnN0IG5leHRSZXFQYXJhbXMgPSBnZXRSZWRpcmVjdFJlcXVlc3QocmVkaXJlY3RVcmwpO1xuICBpZiAoIW5leHRSZXFQYXJhbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYW5kbGUgcmVkaXJlY3QgZm9yICcgKyByZWRpcmVjdFVybCk7XG4gIH1cbiAgcmVkaXJlY3RDYWxsYmFjayhuZXh0UmVxUGFyYW1zKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVdpdGhUaW1lb3V0PFQ+KFxuICBleGVjRm46ICgpID0+IFByb21pc2U8VD4sXG4gIG1zZWM6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgY2FuY2VsQ2FsbGJhY2s/OiAoKSA9PiB2b2lkLFxuKTogUHJvbWlzZTxUPiB7XG4gIGxldCB0aW1lb3V0ID0gZmFsc2U7XG4gIGxldCBwaWQgPVxuICAgIG1zZWMgIT0gbnVsbFxuICAgICAgPyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgICBjYW5jZWxDYWxsYmFjaz8uKCk7XG4gICAgICAgIH0sIG1zZWMpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgbGV0IHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhd2FpdCBleGVjRm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAocGlkKSB7XG4gICAgICBjbGVhclRpbWVvdXQocGlkKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVlc3QgVGltZW91dCcpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG4iXX0=