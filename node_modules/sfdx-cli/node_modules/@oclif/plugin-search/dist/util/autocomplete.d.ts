/// <reference types="node" />
/**
 * TODO: this functionality should eventually be moved to a separate library so that other plugins can use it.
 *
 * NOTE: this code was adapted from https://github.com/mokkabonna/inquirer-autocomplete-prompt
 */
import { Interface as ReadLineInterface } from 'node:readline';
import Base = require('inquirer/lib/prompts/base');
import InquirerChoices = require('inquirer/lib/objects/choices');
import * as Inquirer from 'inquirer';
import Fuse from 'fuse.js';
declare type SearchOptions = Fuse.IFuseOptions<Record<string, unknown>>;
declare type QuestionOpts = {
    searchText: string;
    footer: (currentChoices: Choices, index: number, output: string) => string;
    searchOpts: SearchOptions;
    emptyText: string;
    displayKey: string;
};
export declare class Choices extends InquirerChoices {
    constructor(choices: string[], options?: {
        separator?: string;
    });
}
export declare class AutocompleteSearch extends Base {
    rl: ReadLineInterface;
    opt: Inquirer.prompts.PromptOptions<Inquirer.Question> & QuestionOpts & {
        loop: boolean;
        pageSize: number;
        options: Array<Record<string, unknown>>;
    };
    private currentChoices;
    private firstRender;
    private selected;
    private initialValue;
    private paginator;
    private done;
    private answer;
    private shortAnswer;
    private answerName;
    private searching;
    private nbChoices;
    private searchedOnce;
    private lastSearchTerm;
    private fuse;
    constructor(question: Inquirer.Question & Partial<QuestionOpts>, rl: ReadLineInterface, answers?: Record<string, any>);
    _run(cb: (state: unknown) => void): Promise<AutocompleteSearch>;
    render(error?: string): void;
    onSubmit(line: string): void;
    onSubmitAfterValidation(line: string): void;
    search(searchTerm?: string): void;
    ensureSelectedInRange(): void;
    onKeypress(e: {
        key: {
            name: string;
            ctrl: boolean;
        };
        value: string;
    }): void;
}
export {};
