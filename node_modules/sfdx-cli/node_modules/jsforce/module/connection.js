import _Symbol$toPrimitive from "@babel/runtime-corejs3/core-js-stable/symbol/to-primitive";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import "core-js/modules/es.string.replace";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[_Symbol$toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source), true)).call(_context6, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context7; _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 *
 */
import { EventEmitter } from 'events';
import jsforce from './jsforce';
import Transport, { CanvasTransport, XdProxyTransport, HttpProxyTransport } from './transport';
import { getLogger } from './util/logger';
import OAuth2 from './oauth2';
import Cache from './cache';
import HttpApi from './http-api';
import SessionRefreshDelegate from './session-refresh-delegate';
import Query from './query';
import SObject from './sobject';
import QuickAction from './quick-action';
import Process from './process';
import { formatDate } from './util/formatter';

/**
 *
 */
const defaultConnectionConfig = {
  loginUrl: 'https://login.salesforce.com',
  instanceUrl: '',
  version: '50.0',
  logLevel: 'NONE',
  maxRequest: 10
};
/**
 *
 */

function esc(str) {
  return String(str || '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}
/**
 *
 */


function parseSignedRequest(sr) {
  if (typeof sr === 'string') {
    if (sr[0] === '{') {
      // might be JSON
      return JSON.parse(sr);
    } // might be original base64-encoded signed request


    const msg = sr.split('.').pop(); // retrieve latter part

    if (!msg) {
      throw new Error('Invalid signed request');
    }

    const json = Buffer.from(msg, 'base64').toString('utf-8');
    return JSON.parse(json);
  }

  return sr;
}
/** @private **/


function parseIdUrl(url) {
  var _context;

  const [organizationId, id] = _sliceInstanceProperty(_context = url.split('/')).call(_context, -2);

  return {
    id,
    organizationId,
    url
  };
}
/**
 * Session Refresh delegate function for OAuth2 authz code flow
 * @private
 */


async function oauthRefreshFn(conn, callback) {
  try {
    if (!conn.refreshToken) {
      throw new Error('No refresh token found in the connection');
    }

    const res = await conn.oauth2.refreshToken(conn.refreshToken);
    const userInfo = parseIdUrl(res.id);

    conn._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      userInfo
    });

    callback(undefined, res.access_token, res);
  } catch (err) {
    if (err instanceof Error) {
      callback(err);
    } else {
      throw err;
    }
  }
}
/**
 * Session Refresh delegate function for username/password login
 * @private
 */


function createUsernamePasswordRefreshFn(username, password) {
  return async (conn, callback) => {
    try {
      await conn.login(username, password);

      if (!conn.accessToken) {
        throw new Error('Access token not found after login');
      }

      callback(null, conn.accessToken);
    } catch (err) {
      if (err instanceof Error) {
        callback(err);
      } else {
        throw err;
      }
    }
  };
}
/**
 * @private
 */


function toSaveResult(err) {
  return {
    success: false,
    errors: [err]
  };
}
/**
 *
 */


function raiseNoModuleError(name) {
  throw new Error(`API module '${name}' is not loaded, load 'jsforce/api/${name}' explicitly`);
}
/*
 * Constant of maximum records num in DML operation (update/delete)
 */


const MAX_DML_COUNT = 200;
/**
 *
 */

export class Connection extends EventEmitter {
  // describe: (name: string) => Promise<DescribeSObjectResult>;
  // describeGlobal: () => Promise<DescribeGlobalResult>;
  // API libs are not instantiated here so that core module to remain without dependencies to them
  // It is responsible for developers to import api libs explicitly if they are using 'jsforce/core' instead of 'jsforce'.
  get analytics() {
    return raiseNoModuleError('analytics');
  }

  get apex() {
    return raiseNoModuleError('apex');
  }

  get bulk() {
    return raiseNoModuleError('bulk');
  }

  get bulk2() {
    return raiseNoModuleError('bulk2');
  }

  get chatter() {
    return raiseNoModuleError('chatter');
  }

  get metadata() {
    return raiseNoModuleError('metadata');
  }

  get soap() {
    return raiseNoModuleError('soap');
  }

  get streaming() {
    return raiseNoModuleError('streaming');
  }

  get tooling() {
    return raiseNoModuleError('tooling');
  }
  /**
   *
   */


  constructor(config = {}) {
    super();

    _defineProperty(this, "version", void 0);

    _defineProperty(this, "loginUrl", void 0);

    _defineProperty(this, "instanceUrl", void 0);

    _defineProperty(this, "accessToken", void 0);

    _defineProperty(this, "refreshToken", void 0);

    _defineProperty(this, "userInfo", void 0);

    _defineProperty(this, "limitInfo", {});

    _defineProperty(this, "oauth2", void 0);

    _defineProperty(this, "sobjects", {});

    _defineProperty(this, "cache", void 0);

    _defineProperty(this, "_callOptions", void 0);

    _defineProperty(this, "_maxRequest", void 0);

    _defineProperty(this, "_logger", void 0);

    _defineProperty(this, "_logLevel", void 0);

    _defineProperty(this, "_transport", void 0);

    _defineProperty(this, "_sessionType", void 0);

    _defineProperty(this, "_refreshDelegate", void 0);

    _defineProperty(this, "describe$", void 0);

    _defineProperty(this, "describe$$", void 0);

    _defineProperty(this, "describeSObject", void 0);

    _defineProperty(this, "describeSObject$", void 0);

    _defineProperty(this, "describeSObject$$", void 0);

    _defineProperty(this, "describeGlobal$", void 0);

    _defineProperty(this, "describeGlobal$$", void 0);

    _defineProperty(this, "insert", this.create);

    _defineProperty(this, "delete", this.destroy);

    _defineProperty(this, "del", this.destroy);

    _defineProperty(this, "process", new Process(this));

    const {
      loginUrl,
      instanceUrl,
      version,
      oauth2,
      maxRequest,
      logLevel,
      proxyUrl,
      httpProxy
    } = config;
    this.loginUrl = loginUrl || defaultConnectionConfig.loginUrl;
    this.instanceUrl = instanceUrl || defaultConnectionConfig.instanceUrl;
    this.version = version || defaultConnectionConfig.version;
    this.oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(_objectSpread({
      loginUrl: this.loginUrl,
      proxyUrl,
      httpProxy
    }, oauth2));
    let refreshFn = config.refreshFn;

    if (!refreshFn && this.oauth2.clientId) {
      refreshFn = oauthRefreshFn;
    }

    if (refreshFn) {
      this._refreshDelegate = new SessionRefreshDelegate(this, refreshFn);
    }

    this._maxRequest = maxRequest || defaultConnectionConfig.maxRequest;
    this._logger = logLevel ? Connection._logger.createInstance(logLevel) : Connection._logger;
    this._logLevel = logLevel;
    this._transport = proxyUrl ? new XdProxyTransport(proxyUrl) : httpProxy ? new HttpProxyTransport(httpProxy) : new Transport();
    this._callOptions = config.callOptions;
    this.cache = new Cache();

    const describeCacheKey = type => type ? `describe.${type}` : 'describe';

    const describe = Connection.prototype.describe;
    this.describe = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    });
    this.describe$ = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    });
    this.describe$$ = this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    });
    this.describeSObject = this.describe;
    this.describeSObject$ = this.describe$;
    this.describeSObject$$ = this.describe$$;
    const describeGlobal = Connection.prototype.describeGlobal;
    this.describeGlobal = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    });
    this.describeGlobal$ = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    });
    this.describeGlobal$$ = this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    });
    const {
      accessToken,
      refreshToken,
      sessionId,
      serverUrl,
      signedRequest
    } = config;

    this._establish({
      accessToken,
      refreshToken,
      instanceUrl,
      sessionId,
      serverUrl,
      signedRequest
    });

    jsforce.emit('connection:new', this);
  }
  /* @private */


  _establish(options) {
    var _context2;

    const {
      accessToken,
      refreshToken,
      instanceUrl,
      sessionId,
      serverUrl,
      signedRequest,
      userInfo
    } = options;
    this.instanceUrl = serverUrl ? _sliceInstanceProperty(_context2 = serverUrl.split('/')).call(_context2, 0, 3).join('/') : instanceUrl || this.instanceUrl;
    this.accessToken = sessionId || accessToken || this.accessToken;
    this.refreshToken = refreshToken || this.refreshToken;

    if (this.refreshToken && !this._refreshDelegate) {
      throw new Error('Refresh token is specified without oauth2 client information or refresh function');
    }

    const signedRequestObject = signedRequest && parseSignedRequest(signedRequest);

    if (signedRequestObject) {
      this.accessToken = signedRequestObject.client.oauthToken;

      if (CanvasTransport.supported) {
        this._transport = new CanvasTransport(signedRequestObject);
      }
    }

    this.userInfo = userInfo || this.userInfo;
    this._sessionType = sessionId ? 'soap' : 'oauth2';

    this._resetInstance();
  }
  /* @priveate */


  _clearSession() {
    this.accessToken = null;
    this.refreshToken = null;
    this.instanceUrl = defaultConnectionConfig.instanceUrl;
    this.userInfo = null;
    this._sessionType = null;
  }
  /* @priveate */


  _resetInstance() {
    this.limitInfo = {};
    this.sobjects = {}; // TODO impl cache

    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', ({
      result
    }) => {
      if (result) {
        for (const so of result.sobjects) {
          this.sobject(so.name);
        }
      }
    });
    /*
    if (this.tooling) {
      this.tooling._resetInstance();
    }
    */
  }
  /**
   * Authorize (using oauth2 web server flow)
   */


  async authorize(code, params = {}) {
    const res = await this.oauth2.requestToken(code, params);
    const userInfo = parseIdUrl(res.id);

    this._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      refreshToken: res.refresh_token,
      userInfo
    });

    this._logger.debug(`<login> completed. user id = ${userInfo.id}, org id = ${userInfo.organizationId}`);

    return userInfo;
  }
  /**
   *
   */


  async login(username, password) {
    this._refreshDelegate = new SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));

    if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {
      return this.loginByOAuth2(username, password);
    }

    return this.loginBySoap(username, password);
  }
  /**
   * Login by OAuth2 username & password flow
   */


  async loginByOAuth2(username, password) {
    const res = await this.oauth2.authenticate(username, password);
    const userInfo = parseIdUrl(res.id);

    this._establish({
      instanceUrl: res.instance_url,
      accessToken: res.access_token,
      userInfo
    });

    this._logger.info(`<login> completed. user id = ${userInfo.id}, org id = ${userInfo.organizationId}`);

    return userInfo;
  }
  /**
   *
   */


  async loginBySoap(username, password) {
    var _context3;

    if (!username || !password) {
      return _Promise.reject(new Error('no username password given'));
    }

    const body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header/>', '<se:Body>', '<login xmlns="urn:partner.soap.sforce.com">', `<username>${esc(username)}</username>`, `<password>${esc(password)}</password>`, '</login>', '</se:Body>', '</se:Envelope>'].join('');
    const soapLoginEndpoint = [this.loginUrl, 'services/Soap/u', this.version].join('/');
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: soapLoginEndpoint,
      body,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      }
    });
    let m;

    if (response.statusCode >= 400) {
      m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      const faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    }

    this._logger.debug(`SOAP response = ${response.body}`);

    m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
    const serverUrl = m && m[1];
    m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
    const sessionId = m && m[1];
    m = response.body.match(/<userId>([^<]+)<\/userId>/);
    const userId = m && m[1];
    m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
    const organizationId = m && m[1];

    if (!serverUrl || !sessionId || !userId || !organizationId) {
      throw new Error('could not extract session information from login response');
    }

    const idUrl = [this.loginUrl, 'id', organizationId, userId].join('/');
    const userInfo = {
      id: userId,
      organizationId,
      url: idUrl
    };

    this._establish({
      serverUrl: _sliceInstanceProperty(_context3 = serverUrl.split('/')).call(_context3, 0, 3).join('/'),
      sessionId,
      userInfo
    });

    this._logger.info(`<login> completed. user id = ${userId}, org id = ${organizationId}`);

    return userInfo;
  }
  /**
   * Logout the current session
   */


  async logout(revoke) {
    this._refreshDelegate = undefined;

    if (this._sessionType === 'oauth2') {
      return this.logoutByOAuth2(revoke);
    }

    return this.logoutBySoap(revoke);
  }
  /**
   * Logout the current session by revoking access token via OAuth2 session revoke
   */


  async logoutByOAuth2(revoke) {
    const token = revoke ? this.refreshToken : this.accessToken;

    if (token) {
      await this.oauth2.revokeToken(token);
    } // Destroy the session bound to this connection


    this._clearSession();

    this._resetInstance();
  }
  /**
   * Logout the session by using SOAP web service API
   */


  async logoutBySoap(revoke) {
    const body = ['<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">', '<se:Header>', '<SessionHeader xmlns="urn:partner.soap.sforce.com">', `<sessionId>${esc(revoke ? this.refreshToken : this.accessToken)}</sessionId>`, '</SessionHeader>', '</se:Header>', '<se:Body>', '<logout xmlns="urn:partner.soap.sforce.com"/>', '</se:Body>', '</se:Envelope>'].join('');
    const response = await this._transport.httpRequest({
      method: 'POST',
      url: [this.instanceUrl, 'services/Soap/u', this.version].join('/'),
      body,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      }
    });

    this._logger.debug(`SOAP statusCode = ${response.statusCode}, response = ${response.body}`);

    if (response.statusCode >= 400) {
      const m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      const faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    } // Destroy the session bound to this connection


    this._clearSession();

    this._resetInstance();
  }
  /**
   * Send REST API request with given HTTP request info, with connected session information.
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  request(request, options = {}) {
    // if request is simple string, regard it as url in GET method
    let request_ = typeof request === 'string' ? {
      method: 'GET',
      url: request
    } : request; // if url is given in relative path, prepend base url or instance url before.

    request_ = _objectSpread(_objectSpread({}, request_), {}, {
      url: this._normalizeUrl(request_.url)
    });
    const httpApi = new HttpApi(this, options); // log api usage and its quota

    httpApi.on('response', response => {
      if (response.headers && response.headers['sforce-limit-info']) {
        const apiUsage = response.headers['sforce-limit-info'].match(/api-usage=(\d+)\/(\d+)/);

        if (apiUsage) {
          this.limitInfo = {
            apiUsage: {
              used: _parseInt(apiUsage[1], 10),
              limit: _parseInt(apiUsage[2], 10)
            }
          };
        }
      }
    });
    return httpApi.request(request_);
  }
  /**
   * Send HTTP GET request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestGet(url, options) {
    const request = {
      method: 'GET',
      url
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP POST request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPost(url, body, options) {
    const request = {
      method: 'POST',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP PUT request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPut(url, body, options) {
    const request = {
      method: 'PUT',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP PATCH request with JSON body
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestPatch(url, body, options) {
    const request = {
      method: 'PATCH',
      url,
      body: _JSON$stringify(body),
      headers: {
        'content-type': 'application/json'
      }
    };
    return this.request(request, options);
  }
  /**
   * Send HTTP DELETE request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   */


  requestDelete(url, options) {
    const request = {
      method: 'DELETE',
      url
    };
    return this.request(request, options);
  }
  /** @private **/


  _baseUrl() {
    return [this.instanceUrl, 'services/data', `v${this.version}`].join('/');
  }
  /**
   * Convert path to absolute url
   * @private
   */


  _normalizeUrl(url) {
    if (url[0] === '/') {
      if (_indexOfInstanceProperty(url).call(url, this.instanceUrl + '/services/') === 0) {
        return url;
      }

      if (_indexOfInstanceProperty(url).call(url, '/services/') === 0) {
        return this.instanceUrl + url;
      }

      return this._baseUrl() + url;
    }

    return url;
  }
  /**
   *
   */


  query(soql, options) {
    return new Query(this, soql, options);
  }
  /**
   * Execute search by SOSL
   *
   * @param {String} sosl - SOSL string
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */


  search(sosl) {
    var url = this._baseUrl() + '/search?q=' + encodeURIComponent(sosl);
    return this.request(url);
  }
  /**
   *
   */


  queryMore(locator, options) {
    return new Query(this, {
      locator
    }, options);
  }
  /* */


  _ensureVersion(majorVersion) {
    const versions = this.version.split('.');
    return _parseInt(versions[0], 10) >= majorVersion;
  }
  /* */


  _supports(feature) {
    switch (feature) {
      case 'sobject-collection':
        // sobject collection is available only in API ver 42.0+
        return this._ensureVersion(42);

      default:
        return false;
    }
  }
  /**
   * Retrieve specified records
   */


  async retrieve(type, ids, options = {}) {
    return _Array$isArray(ids) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._retrieveMany(type, ids, options) : this._retrieveParallel(type, ids, options) : this._retrieveSingle(type, ids, options);
  }
  /** @private */


  async _retrieveSingle(type, id, options) {
    if (!id) {
      throw new Error('Invalid record ID. Specify valid record ID value');
    }

    let url = [this._baseUrl(), 'sobjects', type, id].join('/');
    const {
      fields,
      headers
    } = options;

    if (fields) {
      url += `?fields=${fields.join(',')}`;
    }

    return this.request({
      method: 'GET',
      url,
      headers
    });
  }
  /** @private */


  async _retrieveParallel(type, ids, options) {
    if (ids.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(ids).call(ids, id => this._retrieveSingle(type, id, options).catch(err => {
      if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {
        throw err;
      }

      return null;
    })));
  }
  /** @private */


  async _retrieveMany(type, ids, options) {
    var _context4;

    if (ids.length === 0) {
      return [];
    }

    const url = [this._baseUrl(), 'composite', 'sobjects', type].join('/');

    const fields = options.fields || _mapInstanceProperty(_context4 = (await this.describe$(type)).fields).call(_context4, field => field.name);

    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify({
        ids,
        fields
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Create records
   */


  /**
   * @param type
   * @param records
   * @param options
   */
  async create(type, records, options = {}) {
    const ret = _Array$isArray(records) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? await this._createMany(type, records, options) : await this._createParallel(type, records, options) : await this._createSingle(type, records, options);
    return ret;
  }
  /** @private */


  async _createSingle(type, record, options) {
    const {
      Id,
      type: rtype,
      attributes
    } = record,
          rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

    const sobjectType = type || attributes && attributes.type || rtype;

    if (!sobjectType) {
      throw new Error('No SObject Type defined in record');
    }

    const url = [this._baseUrl(), 'sobjects', sobjectType].join('/');
    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify(rec),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /** @private */


  async _createParallel(type, records, options) {
    if (records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(records).call(records, record => this._createSingle(type, record, options).catch(err => {
      // be aware that allOrNone in parallel mode will not revert the other successful requests
      // it only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _createMany(type, records, options) {
    if (records.length === 0) {
      return _Promise.resolve([]);
    }

    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._createMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options)), ...(await this._createMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options))];
    }

    const _records = _mapInstanceProperty(records).call(records, record => {
      const {
        Id,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

      const sobjectType = type || attributes && attributes.type || rtype;

      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }

      return _objectSpread({
        attributes: {
          type: sobjectType
        }
      }, rec);
    });

    const url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'POST',
      url,
      body: _JSON$stringify({
        allOrNone: options.allOrNone || false,
        records: _records
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Synonym of Connection#create()
   */


  /**
   * @param type
   * @param records
   * @param options
   */
  update(type, records, options = {}) {
    return _Array$isArray(records) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._updateMany(type, records, options) : this._updateParallel(type, records, options) : this._updateSingle(type, records, options);
  }
  /** @private */


  async _updateSingle(type, record, options) {
    const {
      Id: id,
      type: rtype,
      attributes
    } = record,
          rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

    if (!id) {
      throw new Error('Record id is not found in record.');
    }

    const sobjectType = type || attributes && attributes.type || rtype;

    if (!sobjectType) {
      throw new Error('No SObject Type defined in record');
    }

    const url = [this._baseUrl(), 'sobjects', sobjectType, id].join('/');
    return this.request({
      method: 'PATCH',
      url,
      body: _JSON$stringify(rec),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    }, {
      noContentResponse: {
        id,
        success: true,
        errors: []
      }
    });
  }
  /** @private */


  async _updateParallel(type, records, options) {
    if (records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(records).call(records, record => this._updateSingle(type, record, options).catch(err => {
      // be aware that allOrNone in parallel mode will not revert the other successful requests
      // it only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _updateMany(type, records, options) {
    if (records.length === 0) {
      return [];
    }

    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._updateMany(type, _sliceInstanceProperty(records).call(records, 0, MAX_DML_COUNT), options)), ...(await this._updateMany(type, _sliceInstanceProperty(records).call(records, MAX_DML_COUNT), options))];
    }

    const _records = _mapInstanceProperty(records).call(records, record => {
      const {
        Id: id,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, ["Id", "type", "attributes"]);

      if (!id) {
        throw new Error('Record id is not found in record.');
      }

      const sobjectType = type || attributes && attributes.type || rtype;

      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }

      return _objectSpread({
        id,
        attributes: {
          type: sobjectType
        }
      }, rec);
    });

    const url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'PATCH',
      url,
      body: _JSON$stringify({
        allOrNone: options.allOrNone || false,
        records: _records
      }),
      headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
        'content-type': 'application/json'
      })
    });
  }
  /**
   * Upsert records
   */


  /**
   *
   * @param type
   * @param records
   * @param extIdField
   * @param options
   */
  async upsert(type, records, extIdField, options = {}) {
    const isArray = _Array$isArray(records);

    const _records = _Array$isArray(records) ? records : [records];

    if (_records.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    const results = await _Promise.all(_mapInstanceProperty(_records).call(_records, record => {
      var _context5;

      const {
        [extIdField]: extId,
        type: rtype,
        attributes
      } = record,
            rec = _objectWithoutProperties(record, _mapInstanceProperty(_context5 = [extIdField, "type", "attributes"]).call(_context5, _toPropertyKey));

      const url = [this._baseUrl(), 'sobjects', type, extIdField, extId].join('/');
      return this.request({
        method: 'PATCH',
        url,
        body: _JSON$stringify(rec),
        headers: _objectSpread(_objectSpread({}, options.headers || {}), {}, {
          'content-type': 'application/json'
        })
      }, {
        noContentResponse: {
          success: true,
          errors: []
        }
      }).catch(err => {
        // Be aware that `allOrNone` option in upsert method
        // will not revert the other successful requests.
        // It only raises error when met at least one failed request.
        if (!isArray || options.allOrNone || !err.errorCode) {
          throw err;
        }

        return toSaveResult(err);
      });
    }));
    return isArray ? results : results[0];
  }
  /**
   * Delete records
   */


  /**
   * @param type
   * @param ids
   * @param options
   */
  async destroy(type, ids, options = {}) {
    return _Array$isArray(ids) ? // check the version whether SObject collection API is supported (42.0)
    this._ensureVersion(42) ? this._destroyMany(type, ids, options) : this._destroyParallel(type, ids, options) : this._destroySingle(type, ids, options);
  }
  /** @private */


  async _destroySingle(type, id, options) {
    const url = [this._baseUrl(), 'sobjects', type, id].join('/');
    return this.request({
      method: 'DELETE',
      url,
      headers: options.headers || {}
    }, {
      noContentResponse: {
        id,
        success: true,
        errors: []
      }
    });
  }
  /** @private */


  async _destroyParallel(type, ids, options) {
    if (ids.length > this._maxRequest) {
      throw new Error('Exceeded max limit of concurrent call');
    }

    return _Promise.all(_mapInstanceProperty(ids).call(ids, id => this._destroySingle(type, id, options).catch(err => {
      // Be aware that `allOrNone` option in parallel mode
      // will not revert the other successful requests.
      // It only raises error when met at least one failed request.
      if (options.allOrNone || !err.errorCode) {
        throw err;
      }

      return toSaveResult(err);
    })));
  }
  /** @private */


  async _destroyMany(type, ids, options) {
    if (ids.length === 0) {
      return [];
    }

    if (ids.length > MAX_DML_COUNT && options.allowRecursive) {
      return [...(await this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, 0, MAX_DML_COUNT), options)), ...(await this._destroyMany(type, _sliceInstanceProperty(ids).call(ids, MAX_DML_COUNT), options))];
    }

    let url = [this._baseUrl(), 'composite', 'sobjects?ids='].join('/') + ids.join(',');

    if (options.allOrNone) {
      url += '&allOrNone=true';
    }

    return this.request({
      method: 'DELETE',
      url,
      headers: options.headers || {}
    });
  }
  /**
   * Synonym of Connection#destroy()
   */


  /**
   * Describe SObject metadata
   */
  async describe(type) {
    const url = [this._baseUrl(), 'sobjects', type, 'describe'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Describe global SObjects
   */


  async describeGlobal() {
    const url = `${this._baseUrl()}/sobjects`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Get SObject instance
   */


  sobject(type) {
    const so = this.sobjects[type] || new SObject(this, type);
    this.sobjects[type] = so;
    return so;
  }
  /**
   * Get identity information of current user
   */


  async identity(options = {}) {
    let url = this.userInfo && this.userInfo.url;

    if (!url) {
      const res = await this.request({
        method: 'GET',
        url: this._baseUrl(),
        headers: options.headers
      });
      url = res.identity;
    }

    url += '?format=json';

    if (this.accessToken) {
      url += `&oauth_token=${encodeURIComponent(this.accessToken)}`;
    }

    const res = await this.request({
      method: 'GET',
      url
    });
    this.userInfo = {
      id: res.user_id,
      organizationId: res.organization_id,
      url: res.id
    };
    return res;
  }
  /**
   * List recently viewed records
   */


  async recent(type, limit) {
    /* eslint-disable no-param-reassign */
    if (typeof type === 'number') {
      limit = type;
      type = undefined;
    }

    let url;

    if (type) {
      url = [this._baseUrl(), 'sobjects', type].join('/');
      const {
        recentItems
      } = await this.request(url);
      return limit ? _sliceInstanceProperty(recentItems).call(recentItems, 0, limit) : recentItems;
    }

    url = `${this._baseUrl()}/recent`;

    if (limit) {
      url += `?limit=${limit}`;
    }

    return this.request(url);
  }
  /**
   * Retrieve updated records
   */


  async updated(type, start, end) {
    /* eslint-disable no-param-reassign */
    let url = [this._baseUrl(), 'sobjects', type, 'updated'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    start = formatDate(start);
    url += `?start=${encodeURIComponent(start)}`;

    if (typeof end === 'string') {
      end = new Date(end);
    }

    end = formatDate(end);
    url += `&end=${encodeURIComponent(end)}`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Retrieve deleted records
   */


  async deleted(type, start, end) {
    /* eslint-disable no-param-reassign */
    let url = [this._baseUrl(), 'sobjects', type, 'deleted'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    start = formatDate(start);
    url += `?start=${encodeURIComponent(start)}`;

    if (typeof end === 'string') {
      end = new Date(end);
    }

    end = formatDate(end);
    url += `&end=${encodeURIComponent(end)}`;
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns a list of all tabs
   */


  async tabs() {
    const url = [this._baseUrl(), 'tabs'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns current system limit in the organization
   */


  async limits() {
    const url = [this._baseUrl(), 'limits'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns a theme info
   */


  async theme() {
    const url = [this._baseUrl(), 'theme'].join('/');
    const body = await this.request(url);
    return body;
  }
  /**
   * Returns all registered global quick actions
   */


  async quickActions() {
    const body = await this.request('/quickActions');
    return body;
  }
  /**
   * Get reference for specified global quick action
   */


  quickAction(actionName) {
    return new QuickAction(this, `/quickActions/${actionName}`);
  }
  /**
   * Module which manages process rules and approval processes
   */


}

_defineProperty(Connection, "_logger", getLogger('connection'));

export default Connection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,