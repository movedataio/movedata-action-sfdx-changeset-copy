"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-command-reference', 'jit.install', [
    'summary',
    'examples',
    'flags.dry-run.summary',
]);
class JitInstall extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(JitInstall);
        this.styledHeader(`Install all JIT Plugins${flags['dry-run'] ? ' (dry-run)' : ''}`);
        for (const [plugin, version] of Object.entries(this.config.pjson.oclif.jitPlugins)) {
            this.log(`â€¢ ${plugin} ${chalk.dim(version)}`);
            if (flags['dry-run'])
                continue;
            try {
                await this.config.runCommand('plugins:install', [`${plugin}@${version}`]);
            }
            catch {
                this.log(`Failed to install ${plugin} ${chalk.dim(version)}.`);
            }
        }
    }
}
exports.default = JitInstall;
JitInstall.summary = messages.getMessage('summary');
JitInstall.examples = messages.getMessages('examples');
JitInstall.flags = {
    'dry-run': sf_plugins_core_1.Flags.boolean({
        char: 'd',
        summary: messages.getMessage('flags.dry-run.summary'),
    }),
};
//# sourceMappingURL=install.js.map