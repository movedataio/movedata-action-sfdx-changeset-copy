"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ditamap = void 0;
const path_1 = require("path");
const fs = require("fs/promises");
const mkdirp = require("mkdirp");
const debugCreator = require("debug");
const hb = require("handlebars");
const debug = debugCreator('commandreference');
hb.registerHelper('toUpperCase', (str) => str.toUpperCase());
hb.registerHelper('join', (array) => array.join(', '));
hb.registerHelper('xmlFile', (...strings) => {
    const parts = strings.filter((s) => typeof s === 'string');
    return Ditamap.file(parts.join('_'), 'xml');
});
hb.registerHelper('uniqueId', (...strings) => {
    const parts = strings.filter((s) => typeof s === 'string');
    return Ditamap.file(parts.join('_'), 'xml').replace('.xml', '');
});
/*
 * Returns true if the string should be formatted as code block in docs
 */
// tslint:disable-next-line: no-any
hb.registerHelper('isCodeBlock', function (val, options) {
    return val.indexOf('sf') === 0 || val.indexOf('sfdx') === 0 || val.indexOf('$') >= 0 || val.indexOf('>>') >= 0
        ? options.fn(this)
        : options.inverse(this);
});
hb.registerHelper('nextVersion', (value) => parseInt(value, 2) + 1);
class Ditamap {
    static get suffix() {
        return Ditamap._suffix;
    }
    static set suffix(suffix) {
        Ditamap._suffix = suffix;
    }
    static file(name, ext) {
        return Ditamap.suffix ? `${name}_${Ditamap.suffix}.${ext}` : `${name}.${ext}`;
    }
    constructor(filename, data) {
        this.filename = filename;
        this.data = data;
        this.source = (0, path_1.join)(Ditamap.templatesDir, this.getTemplateFileName());
        this.destination = (0, path_1.join)(Ditamap.outputDir, filename);
    }
    getFilename() {
        return this.filename;
    }
    getOutputFilePath() {
        return this.destination;
    }
    async write() {
        await mkdirp((0, path_1.dirname)(this.destination));
        const output = await this.transformToDitamap();
        await fs.writeFile(this.destination, output);
    }
    formatParagraphs(textToFormat) {
        return textToFormat ? textToFormat.split('\n').filter((n) => n !== '') : [];
    }
    /**
     * Applies the named handlebars template to the supplied data
     *
     * @param data
     * @param templateName
     * @returns {object}
     */
    async transformToDitamap() {
        debug(`Generating ${this.destination} from ${this.getTemplateFileName()}`);
        const src = await fs.readFile(this.source, 'utf8');
        const template = hb.compile(src, { noEscape: false });
        return template(this.data);
    }
}
exports.Ditamap = Ditamap;
Ditamap.SUFFIX = 'unified';
Ditamap.templatesDir = (0, path_1.join)(__dirname, '..', '..', 'templates');
//# sourceMappingURL=ditamap.js.map