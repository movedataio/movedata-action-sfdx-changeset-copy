import { UxBase } from '.';
/**
 * Class for display a progress bar to the console. Will automatically be suppressed if the --json flag is present.
 */
export declare class Progress extends UxBase {
    private static DEFAULT_OPTIONS;
    private bar;
    private total;
    private started;
    constructor(outputEnabled: boolean);
    /**
     * Set the total number of expected components.
     */
    setTotal(total: number): void;
    /**
     * Start the progress bar.
     */
    start(total: number, payload?: Progress.Payload, options?: Partial<Progress.Options>): void;
    /**
     * Update the progress bar.
     */
    update(num: number, payload?: {}): void;
    /**
     * Update the progress bar with the final number and stop it.
     */
    finish(payload?: {}): void;
    /**
     * Stop the progress bar.
     */
    stop(): void;
}
export declare namespace Progress {
    type Bar = {
        start: (total: number, startValue: number, payload?: object) => void;
        update: (num: number, payload?: object) => void;
        setTotal: (num: number) => void;
        stop: () => void;
    };
    type Options = {
        title: string;
        format: string;
        barCompleteChar: string;
        barIncompleteChar: string;
        linewrap: boolean;
    };
    type Payload = Record<string, unknown>;
}
//# sourceMappingURL=progress.d.ts.map