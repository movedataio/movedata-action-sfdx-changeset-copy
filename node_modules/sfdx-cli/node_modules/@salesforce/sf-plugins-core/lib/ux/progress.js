"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Progress = void 0;
const util = require("util");
const core_1 = require("@oclif/core");
const _1 = require(".");
/**
 * Class for display a progress bar to the console. Will automatically be suppressed if the --json flag is present.
 */
class Progress extends _1.UxBase {
    constructor(outputEnabled) {
        super(outputEnabled);
        this.started = false;
    }
    /**
     * Set the total number of expected components.
     */
    setTotal(total) {
        this.total = total;
        if (this.bar)
            this.bar.setTotal(total);
    }
    /**
     * Start the progress bar.
     */
    start(total, payload = {}, options = Progress.DEFAULT_OPTIONS) {
        if (this.started)
            return;
        this.started = true;
        this.maybeNoop(() => {
            const opts = Object.assign(Progress.DEFAULT_OPTIONS, options);
            opts.format = util.format(opts.format, opts.title);
            this.bar = core_1.ux.progress({
                format: opts.format,
                barCompleteChar: opts.barCompleteChar,
                barIncompleteChar: opts.barIncompleteChar,
                linewrap: opts.linewrap,
            });
            this.bar.setTotal(total);
            this.bar.start(total, 0);
            if (Object.keys(payload).length) {
                this.bar.update(0, payload);
            }
        });
    }
    /**
     * Update the progress bar.
     */
    update(num, payload = {}) {
        if (this.bar)
            this.bar.update(num, payload);
    }
    /**
     * Update the progress bar with the final number and stop it.
     */
    finish(payload = {}) {
        if (this.bar) {
            this.bar.update(this.total, payload);
            this.bar.stop();
        }
    }
    /**
     * Stop the progress bar.
     */
    stop() {
        if (this.bar)
            this.bar.stop();
    }
}
exports.Progress = Progress;
Progress.DEFAULT_OPTIONS = {
    title: 'PROGRESS',
    format: '%s | {bar} | {value}/{total} Components',
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
    linewrap: true,
};
//# sourceMappingURL=progress.js.map