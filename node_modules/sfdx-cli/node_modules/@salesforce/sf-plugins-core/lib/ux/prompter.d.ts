import { QuestionCollection, ChoiceBase } from 'inquirer';
import { Dictionary, Nullable } from '@salesforce/ts-types';
export declare class Prompter {
    /**
     * Prompt user for information. See https://www.npmjs.com/package/inquirer for more.
     */
    prompt<T extends Prompter.Answers>(questions: Prompter.Questions<T>, initialAnswers?: Partial<T>): Promise<T>;
    /**
     * Prompt user for information with a timeout (in milliseconds). See https://www.npmjs.com/package/inquirer for more.
     */
    timedPrompt<T extends Prompter.Answers>(questions: Prompter.Questions<T>, ms?: number, initialAnswers?: Partial<T>): Promise<T>;
    /**
     * Simplified prompt for single-question confirmation. Times out and throws after 10s
     *
     * @param message text to display.  Do not include a question mark.
     * @param ms milliseconds to wait for user input.  Defaults to 10s.
     * @param defaultAnswer default answer for the prompt.  Defaults to true.  Pass in `false` to require a positive response.
     * @return true if the user confirms, false if they do not.
     */
    confirm(message: string, ms?: number, defaultAnswer?: boolean): Promise<boolean>;
}
export declare namespace Prompter {
    type Answers<T = Record<string, unknown>> = T & Record<string, unknown>;
    type Questions<T extends Answers> = QuestionCollection<T>;
}
/**
 * Generate a formatted table for list and checkbox prompts
 *
 * Each option should contain the same keys as specified in columns.
 *
 * @example
 * ```
 * const columns = { name: 'Name', type: 'Type', path: 'Path' };
 * const options = [{ name: 'foo', type: 'org', path: '/path/to/foo/' }];
 * generateTableChoices(columns, options);
 * ```
 */
export declare function generateTableChoices<T>(columns: Dictionary<string>, choices: Array<Dictionary<Nullable<string> | T>>, padForCheckbox?: boolean): ChoiceBase[];
//# sourceMappingURL=prompter.d.ts.map