"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ux = void 0;
const core_1 = require("@oclif/core");
const base_1 = require("./base");
const prompter_1 = require("./prompter");
const spinner_1 = require("./spinner");
/**
 * UX methods for plugins. Automatically suppress console output if outputEnabled is set to false.
 *
 * @example
 * ```
 * import { SfCommand, Ux } from '@salesforce/sf-plugins-core';
 * import { AnyJson } from '@salesforce/ts-types';
 *
 * class MyCommand extends SfCommand<AnyJson> {
 *   public async run(): Promise<AnyJson> {
 *     const ux = new Ux(!this.jsonEnabled());
 *   }
 * }
 *
 * ```
 */
class Ux extends base_1.UxBase {
    constructor({ jsonEnabled } = { jsonEnabled: false }) {
        super(!jsonEnabled);
        this.outputEnabled = !jsonEnabled;
        this.spinner = new spinner_1.Spinner(this.outputEnabled);
        this.prompter = new prompter_1.Prompter();
    }
    /**
     * Log a message to the console. This will be automatically suppressed if output is disabled.
     *
     * @param message Message to log. Formatting is supported.
     * @param args Args to be used for formatting.
     */
    log(message, ...args) {
        this.maybeNoop(() => core_1.ux.log(message, ...args));
    }
    /**
     * Log a warning message to the console. This will be automatically suppressed if output is disabled.
     *
     * @param message Warning message to log.
     */
    warn(message) {
        this.maybeNoop(() => core_1.ux.warn(message));
    }
    /**
     * Display a table to the console. This will be automatically suppressed if output is disabled.
     *
     * @param data Data to be displayed
     * @param columns Columns to display the data in
     * @param options Options for how the table should be displayed
     */
    table(data, columns, options) {
        this.maybeNoop(() => core_1.ux.table(data, columns, options));
    }
    /**
     * Display a url to the console. This will be automatically suppressed if output is disabled.
     *
     * @param text text to display
     * @param uri URL link
     * @param params
     */
    url(text, uri, params = {}) {
        this.maybeNoop(() => core_1.ux.url(text, uri, params));
    }
    /**
     * Display stylized JSON to the console. This will be automatically suppressed if output is disabled.
     *
     * @param obj JSON to display
     */
    styledJSON(obj) {
        this.maybeNoop(() => core_1.ux.styledJSON(obj));
    }
    /**
     * Display stylized object to the console. This will be automatically suppressed if output is disabled.
     *
     * @param obj Object to display
     * @param keys Keys of object to display
     */
    styledObject(obj, keys) {
        this.maybeNoop(() => core_1.ux.styledObject(obj, keys));
    }
    /**
     * Display stylized header to the console. This will be automatically suppressed if output is disabled.
     *
     * @param text header to display
     */
    styledHeader(text) {
        this.maybeNoop(() => core_1.ux.styledHeader(text));
    }
}
exports.Ux = Ux;
//# sourceMappingURL=ux.js.map