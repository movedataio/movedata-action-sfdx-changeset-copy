import { ux, Command, Config, HelpSection } from '@oclif/core';
import { SfProject, StructuredMessage, SfError, ConfigAggregator } from '@salesforce/core';
import { AnyJson } from '@salesforce/ts-types';
import * as chalk from 'chalk';
import { Progress, Prompter, Spinner, Ux } from './ux';
export interface SfCommandInterface extends Command.Class {
    configurationVariablesSection?: HelpSection;
    envVariablesSection?: HelpSection;
    errorCodes?: HelpSection;
}
export declare const StandardColors: {
    error: chalk.Chalk;
    warning: chalk.Chalk;
    info: chalk.Chalk;
    success: chalk.Chalk;
};
/**
 * A base command that provided common functionality for all sf commands.
 * Functionality includes:
 *  - JSON support
 *  - progress bars
 *  - spinners
 *  - prompts
 *  - stylized output (JSON, url, objects, headers)
 *  - lifecycle events
 *  - configuration variables help section
 *  - environment variables help section
 *  - error codes help section
 *
 * All implementations of this class need to implement the run() method.
 *
 * Additionally, all implementations of this class need to provide a generic type that describes the JSON output.
 *
 * See {@link https://github.com/salesforcecli/plugin-template-sf/blob/main/src/commands/hello/world.ts example implementation}.
 *
 * @example
 *
 * ```
 * import { SfCommand } from '@salesforce/sf-plugins-core';
 * export type MyJsonOutput = { success: boolean };
 * export default class MyCommand extends SfCommand<MyJsonOutput> {
 *   public async run(): Promise<MyJsonOutput> {
 *    return { success: true };
 *  }
 * }
 * ```
 */
export declare abstract class SfCommand<T> extends Command {
    static SF_ENV: string;
    static enableJsonFlag: boolean;
    /**
     * Add a CONFIGURATION VARIABLES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * import { OrgConfigProperties } from '@salesforce/core';
     * export default class MyCommand extends SfCommand {
     *   public static configurationVariablesSection = toHelpSection(
     *     'CONFIGURATION VARIABLES',
     *     OrgConfigProperties.TARGET_ORG,
     *     OrgConfigProperties.ORG_API_VERSION,
     *   );
     * }
     * ```
     */
    static configurationVariablesSection?: HelpSection;
    /**
     * Add an Environment VARIABLES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * import { EnvironmentVariable } from '@salesforce/core';
     * export default class MyCommand extends SfCommand {
     *   public static envVariablesSection = toHelpSection(
     *     'ENVIRONMENT VARIABLES',
     *     EnvironmentVariable.SF_TARGET_ORG,
     *     EnvironmentVariable.SF_USE_PROGRESS_BAR,
     *   );
     * }
     * ```
     */
    static envVariablesSection?: HelpSection;
    /**
     * Add an ERROR CODES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * export default class MyCommand extends SfCommand {
     *   public static errorCodes = toHelpSection(
     *     'ERROR CODES',
     *     { 0: 'Success', 1: 'Failure' },
     *   );
     * }
     * ```
     */
    static errorCodes?: HelpSection;
    /**
     * Flags that you can use for manipulating tables.
     *
     * @example
     * ```
     * import { SfCommand } from '@salesforce/sf-plugins-core';
     * export default class MyCommand extends SfCommand {
     *   public static flags = {
     *    ...SfCommand.tableFags,
     *    'my-flags: flags.string({ char: 'm', description: 'my flag' }),
     *   }
     * }
     * ```
     */
    static tableFlags: typeof ux.Table.table.flags;
    /**
     * Set to true if the command must be executed inside a Salesforce project directory.
     *
     * If set to true the command will throw an error if the command is executed outside of a Salesforce project directory.
     * Additionally, this.project will be set to the current Salesforce project (SfProject).
     *
     */
    static requiresProject: boolean;
    /**
     * Add a spinner to the console. {@link Spinner}
     */
    spinner: Spinner;
    /**
     * Add a progress bar to the console. {@link Progress}
     */
    progress: Progress;
    project: SfProject;
    /**
     * ConfigAggregator instance for accessing global and local configuration.
     *
     * NOTE: If the active executable is sfdx, this will be an instance of SfdxConfigAggregator, which supports
     * the deprecated sfdx config vars like defaultusername, defaultdevhubusername, apiversion, etc. Otherwise,
     * it will be an instance of ConfigAggregator will only supports the config vars introduce by @salesforce/core@v3.
     *
     * The executable is determined by `this.config.bin` which is supplied by the base oclif/core Command class. The value
     * of `this.config.bin` will be the executable running (e.g. sfdx or sf) or, for local development (e.g. using bin/dev),
     * it will be the value of oclif.bin in the plugin's package.json.
     *
     * If you need to write NUTS for a plugin that needs to work with both sets of config vars you can
     * use set the `SF_USE_DEPRECATED_CONFIG_VARS` to `true` to force configAggregator to be an instance of SfdxConfigAggregator or
     * `false` to force configAggregator to be an instance of ConfigAggregator.
     *
     * @example
     * ```
     * import { execCmd } from '@salesforce/cli-plugins-testkit';
     * execCmd('config:set defaultusername=test@example.com', {
     *   env: {
     *     ...process.env,
     *     SF_USE_DEPRECATED_CONFIG_VARS: true,
     *   }
     * })
     * ```
     */
    configAggregator: ConfigAggregator;
    private warnings;
    private ux;
    private prompter;
    private lifecycle;
    constructor(argv: string[], config: Config);
    protected get statics(): typeof SfCommand;
    /**
     * Log a success message that has the standard success message color applied.
     *
     * @param message The message to log.
     */
    logSuccess(message: string): void;
    /**
     * Log warning to users. If --json is enabled, then the warning will be added to the json output under the warnings property.
     *
     * @param input {@link SfCommand.Warning} The message to log.
     */
    warn(input: SfCommand.Warning): SfCommand.Warning;
    /**
     * Log info message to users.
     *
     * @param input {@link SfCommand.Info} The message to log.
     */
    info(input: SfCommand.Info): void;
    /**
     * Warn user about sensitive information (access tokens, etc...) before logging to the console.
     *
     * @param msg The message to log.
     */
    logSensitive(msg?: string): void;
    /**
     * Display a table on the console. Will automatically be suppressed when --json flag is present.
     */
    table<R extends Ux.Table.Data>(data: R[], columns: Ux.Table.Columns<R>, options?: Ux.Table.Options): void;
    /**
     * Log a stylized url to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param text The text to display for the url.
     * @param uri The url to display.
     */
    url(text: string, uri: string, params?: {}): void;
    /**
     * Log stylized JSON to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param obj The JSON to log.
     */
    styledJSON(obj: AnyJson): void;
    /**
     * Log stylized object to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param obj The object to log.
     */
    styledObject(obj: AnyJson): void;
    /**
     * Log stylized header to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param text the text to display as a header.
     */
    styledHeader(text: string): void;
    logJson(json: AnyJson | unknown): void;
    /**
     * Prompt user for information. See https://www.npmjs.com/package/inquirer for more.
     *
     * This will NOT be automatically suppressed when the --json flag is present since we assume
     * that any command that prompts the user for required information will not also support the --json flag.
     *
     * If you need to conditionally suppress prompts to support json output, then do the following:
     *
     * @example
     * if (!this.jsonEnabled()) {
     *   await this.prompt();
     * }
     */
    prompt<R extends Prompter.Answers>(questions: Prompter.Questions<R>, initialAnswers?: Partial<R>): Promise<R>;
    /**
     * Simplified prompt for single-question confirmation. Times out and throws after 10s
     *
     * @param message text to display.  Do not include a question mark.
     * @param ms milliseconds to wait for user input.  Defaults to 10s.
     * @param defaultAnswer boolean to set the default answer to.  Defaults to true.
     * @return true if the user confirms, false if they do not.
     */
    confirm(message: string, ms?: number, defaultAnswer?: boolean): Promise<boolean>;
    /**
     * Prompt user for information with a timeout (in milliseconds). See https://www.npmjs.com/package/inquirer for more.
     */
    timedPrompt<R extends Prompter.Answers>(questions: Prompter.Questions<R>, ms?: number, initialAnswers?: Partial<R>): Promise<R>;
    _run<R>(): Promise<R>;
    /**
     * Wrap the command result into the standardized JSON structure.
     */
    protected toSuccessJson(result: T): SfCommand.Json<T>;
    /**
     * Wrap the command error into the standardized JSON structure.
     */
    protected toErrorJson(error: SfCommand.Error): SfCommand.Error;
    protected assignProject(): Promise<SfProject>;
    protected catch(error: Error | SfError | SfCommand.Error): Promise<SfCommand.Error>;
    /**
     * Format errors and actions for human consumption. Adds 'Error (<ErrorCode>):',
     * When there are actions, we add 'Try this:' in blue
     * followed by each action in red on its own line.
     * If Error.code is present it is output last in parentheses
     *
     * @returns {string} Returns decorated messages.
     */
    protected formatError(error: SfCommand.Error): string;
    /**
     * Utility function to format actions lines
     *
     * @param actions
     * @param options
     * @private
     */
    private formatActions;
    abstract run(): Promise<T>;
}
export declare namespace SfCommand {
    type Info = StructuredMessage | string;
    type Warning = StructuredMessage | string;
    interface Json<T> {
        status: number;
        result: T;
        warnings?: Warning[];
    }
    interface Error {
        status: number;
        name: string;
        message: string;
        stack: string | undefined;
        warnings?: Warning[];
        actions?: string[];
        code?: unknown;
        exitCode?: number;
        data?: unknown;
        context?: string;
    }
}
//# sourceMappingURL=sfCommand.d.ts.map