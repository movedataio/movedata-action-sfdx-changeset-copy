"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.durationFlag = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
/**
 * Duration flag with built-in default and min/max validation
 * You must specify a unit
 * Defaults to undefined if you don't specify a default
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *    wait: Flags.duration({
 *       min: 1,
 *       unit: 'minutes'
 *       defaultValue: 33,
 *       char: 'w',
 *       description: 'Wait time in minutes'
 *    }),
 * }
 * ```
 */
exports.durationFlag = core_1.Flags.custom({
    parse: async (input, _, opts) => validate(input, opts),
    default: async (context) => context.options.defaultValue ? toDuration(context.options.defaultValue, context.options.unit) : undefined,
});
const validate = (input, config) => {
    const { min, max, unit } = config || {};
    let parsedInput;
    try {
        parsedInput = parseInt(input, 10);
        if (typeof parsedInput !== 'number' || isNaN(parsedInput)) {
            throw messages.createError('errors.InvalidDuration');
        }
    }
    catch (e) {
        throw messages.createError('errors.InvalidDuration');
    }
    if (min && parsedInput < min) {
        throw messages.createError('errors.DurationBounds', [min, max]);
    }
    if (max && parsedInput > max) {
        throw messages.createError('errors.DurationBounds', [min, max]);
    }
    return toDuration(parsedInput, unit);
};
const toDuration = (parsedInput, unit) => kit_1.Duration[unit](parsedInput);
//# sourceMappingURL=duration.js.map