"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.salesforceIdFlag = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
/**
 * Id flag with built-in validation.  Short character is `i`
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // set length or prefix
 *    'flag-name': salesforceId({ length: 15, startsWith: '00D' }),
 *    // add flag properties
 *    'flag2': salesforceId({
 *        required: true,
 *        description: 'flag2 description',
 *     }),
 *    // override the character i
 *    'flag3': salesforceId({
 *        char: 'j',
 *     }),
 * }
 * ```
 */
exports.salesforceIdFlag = core_1.Flags.custom({
    parse: async (input, _ctx, opts) => validate(input, opts),
    char: 'i',
});
const validate = (input, config) => {
    const { length, startsWith } = config ?? {};
    // If the flag doesn't specify a length or specifies "both", then let it accept both 15 or 18.
    const allowedIdLength = (!length || length === 'both') ? [15, 18] : [length];
    if (!allowedIdLength.includes(input.length)) {
        throw messages.createError('errors.InvalidIdLength', [
            allowedIdLength.join(` ${messages.getMessage('errors.InvalidIdLength.or')} `),
        ]);
    }
    if (!core_2.sfdc.validateSalesforceId(input)) {
        throw messages.createError('errors.InvalidId');
    }
    if (startsWith && !input.startsWith(startsWith)) {
        throw messages.createError('errors.InvalidPrefix', [startsWith]);
    }
    return input;
};
//# sourceMappingURL=salesforceId.js.map