"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionalHubFlag = exports.requiredHubFlag = exports.requiredOrgFlag = exports.optionalOrgFlag = exports.getHubOrThrow = exports.getOrgOrThrow = exports.maybeGetHub = exports.maybeGetOrg = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
async function maybeGetOrg(input) {
    try {
        return await core_2.Org.create({ aliasOrUsername: input });
    }
    catch (e) {
        if (!input) {
            return undefined;
        }
        else {
            throw e;
        }
    }
}
exports.maybeGetOrg = maybeGetOrg;
const maybeGetHub = async (input) => {
    let org;
    // user provided input, verify the org exits
    if (input) {
        org = await (0, exports.getOrgOrThrow)(input);
    }
    else {
        // no input, check config for a default
        const aliasOrUsername = await getDefaultHub(false);
        // if there is a default, verify the org exists
        if (aliasOrUsername) {
            org = await (0, exports.getOrgOrThrow)(aliasOrUsername);
        }
    }
    if (org) {
        return ensureDevHub(org, org.getUsername());
    }
    else {
        return undefined;
    }
};
exports.maybeGetHub = maybeGetHub;
const getOrgOrThrow = async (input) => {
    const org = await maybeGetOrg(input);
    if (!org) {
        throw messages.createError('errors.NoDefaultEnv');
    }
    return org;
};
exports.getOrgOrThrow = getOrgOrThrow;
const ensureDevHub = async (org, aliasOrUsername) => {
    if (await org.determineIfDevHubOrg()) {
        return org;
    }
    throw messages.createError('errors.NotADevHub', [aliasOrUsername ?? org.getUsername()]);
};
async function getDefaultHub(throwIfNotFound) {
    // check config for a default
    const config = await core_2.ConfigAggregator.create();
    const aliasOrUsername = config.getInfo(core_2.OrgConfigProperties.TARGET_DEV_HUB)?.value;
    if (throwIfNotFound && !aliasOrUsername) {
        throw messages.createError('errors.NoDefaultDevHub');
    }
    return aliasOrUsername;
}
const getHubOrThrow = async (aliasOrUsername) => {
    const resolved = aliasOrUsername ?? (await getDefaultHub(true));
    const org = await core_2.Org.create({ aliasOrUsername: resolved, isDevHub: true });
    return ensureDevHub(org, resolved);
};
exports.getHubOrThrow = getHubOrThrow;
/**
 * An optional org specified by username or alias
 * Will default to the default org if one is not specified.
 * Will not throw if the specified org and default do not exist
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': Flags.optionalOrg(),
 *    // adding properties
 *    'flag2': Flags.optionalOrg({
 *        required: true,
 *        description: 'flag2 description',
 *     }),
 * }
 * ```
 */
exports.optionalOrgFlag = core_1.Flags.custom({
    char: 'o',
    parse: async (input) => maybeGetOrg(input),
    default: async () => maybeGetOrg(),
    defaultHelp: async () => (await maybeGetOrg())?.getUsername(),
});
/**
 * A required org, specified by username or alias
 * Will throw if the specified org default do not exist
 * Will default to the default org if one is not specified.
 * Will throw if no default org exists and none is specified
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': Flags.requiredOrg(),
 *    // adding properties
 *    'flag2': Flags.requiredOrg({
 *        required: true,
 *        description: 'flag2 description',
 *        char: 'o'
 *     }),
 * }
 * ```
 */
exports.requiredOrgFlag = core_1.Flags.custom({
    char: 'o',
    summary: messages.getMessage('flags.targetOrg.summary'),
    parse: async (input) => (0, exports.getOrgOrThrow)(input),
    default: async () => (0, exports.getOrgOrThrow)(),
    defaultHelp: async () => (await (0, exports.getOrgOrThrow)())?.getUsername(),
    required: true,
});
/**
 * A required org that is a devHub
 * Will throw if the specified org does not exist
 * Will default to the default dev hub if one is not specified
 * Will throw if no default deb hub exists and none is specified
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': requiredHub(),
 *    // adding properties
 *    'flag2': requiredHub({
 *        required: true,
 *        description: 'flag2 description',
 *        char: 'h'
 *     }),
 * }
 * ```
 */
exports.requiredHubFlag = core_1.Flags.custom({
    char: 'v',
    summary: messages.getMessage('flags.targetDevHubOrg.summary'),
    parse: async (input) => (0, exports.getHubOrThrow)(input),
    default: async () => (0, exports.getHubOrThrow)(),
    defaultHelp: async () => (await (0, exports.getHubOrThrow)())?.getUsername(),
    required: true,
});
/**
 * An optional org that, if present, must be a devHub
 * Will throw if the specified org does not exist
 * Will default to the default dev hub if one is not specified
 * Will NOT throw if no default deb hub exists and none is specified
 *
 * @example
 *
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': optionalHubFlag(),
 *    // adding properties
 *    'flag2': optionalHubFlag({
 *        description: 'flag2 description',
 *        char: 'h'
 *     }),
 * }
 * ```
 */
exports.optionalHubFlag = core_1.Flags.custom({
    char: 'v',
    summary: messages.getMessage('flags.targetDevHubOrg.summary'),
    parse: async (input) => (0, exports.maybeGetHub)(input),
    default: async () => (0, exports.maybeGetHub)(),
    defaultHelp: async () => (await (0, exports.maybeGetHub)())?.getUsername(),
    required: false,
});
//# sourceMappingURL=orgFlags.js.map