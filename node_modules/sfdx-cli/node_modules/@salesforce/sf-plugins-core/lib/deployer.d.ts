/// <reference types="node" />
import { EventEmitter } from 'events';
import { AnyJson, JsonMap } from '@salesforce/ts-types';
import { QuestionCollection, Answers } from 'inquirer';
export type DeployerResult = {
    exitCode: number;
};
export declare abstract class Deployable {
    abstract getName(): string;
    abstract getType(): string;
    abstract getPath(): string;
    abstract getParent(): Deployer;
}
/**
 * Interface for deploying Deployables.
 */
export declare abstract class Deployer extends EventEmitter {
    /**
     * Deployables are individual pieces that can be deployed on their own. For example,
     * each package in a salesforce project is considered a deployable that can be deployed
     * on its own.
     */
    deployables: Deployable[];
    private prompter;
    /**
     * Method for displaying deploy progress to the user
     */
    progress(current: number, total: number, message: string): void;
    /**
     * Log messages to the console
     */
    log(msg?: string | undefined, ...args: string[]): void;
    /**
     * Prompt user for additional information
     */
    prompt<T extends Answers>(questions: QuestionCollection<T>, initialAnswers?: Partial<T>): Promise<T>;
    /**
     * Overwrite the deployables property on the class.
     */
    selectDeployables(deployables: Deployable[]): void;
    /**
     * The human readable name of the deployer
     */
    abstract getName(): string;
    /**
     * Perform any initialization or setup. This is the time to prompt the
     * user for any needed information.
     *
     * If options are passed it, it should use those instead of prompting the for the passed in information
     *
     * Uses the returned dictionary as the information to store in the deploy-options.json file.
     */
    abstract setup(flags: Deployer.Flags, options: Deployer.Options): Promise<Deployer.Options>;
    /**
     * Deploy the app.
     */
    abstract deploy<R extends DeployerResult>(): Promise<void | R>;
}
export declare namespace Deployer {
    type Flags = {
        interactive: boolean;
    };
    /**
     * This interface represents the aggregation of all deployer options, e.g.
     *
     * @example
     * ```
     * {
     *   'Salesforce Apps': {
     *      testLevel: 'RunLocalTests',
     *      apps: ['force-app'],
     *    },
     *   'Salesforce Functions': { username: 'user@salesforce.com' },
     * }
     * ```
     */
    type Options<T = AnyJson> = JsonMap & {
        [key: string]: T | undefined;
    };
}
//# sourceMappingURL=deployer.d.ts.map