import { Config } from '@oclif/core/lib/interfaces/config';
import { Hook, Hooks } from '@oclif/core/lib/interfaces/hooks';
import { Deployer } from './deployer';
import { EnvList, EnvDisplay, JsonObject, Deploy, Login, Logout } from './types';
import { Deauthorizer } from './deauthorizer';
/**
 * Interface that defines the well known Unified CLI command hooks.
 */
interface SfHooks<T = unknown> extends Hooks {
    'sf:env:list': EnvList.HookMeta<T & JsonObject>;
    'sf:env:display': EnvDisplay.HookMeta<T & JsonObject>;
    'sf:deploy': Deploy.HookMeta<T & Deployer>;
    'sf:login': Login.HookMeta;
    'sf:logout': Logout.HookMeta<T & Deauthorizer>;
}
type GenericHook<T extends keyof SfHooks, P> = Hook<T, SfHooks<P>>;
/**
 * Class that provides a static method to run a pre-defined sf hook. See {@link SfHooks}.
 */
export declare class SfHook {
    /**
     * Executes a well known Unified CLI hook. See {@link SfHooks}.
     */
    static run<T extends keyof SfHooks>(config: Config, hookName: T, options?: SfHooks[T]['options']): Promise<Hook.Result<SfHooks[T]['return']>>;
}
export declare namespace SfHook {
    type EnvList<T> = GenericHook<'sf:env:list', T>;
    type EnvDisplay<T> = GenericHook<'sf:env:display', T>;
    type Deploy<T> = GenericHook<'sf:deploy', T>;
    type Login = Hook<'sf:login', SfHooks>;
    type Logout = Hook<'sf:logout', SfHooks>;
}
export {};
//# sourceMappingURL=hooks.d.ts.map