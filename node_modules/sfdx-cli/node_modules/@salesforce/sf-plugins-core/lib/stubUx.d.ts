import { SinonSandbox } from 'sinon';
import { SfCommand } from './sfCommand';
import { Prompter, Ux } from './ux';
export declare function stubUx(sandbox: SinonSandbox): {
    log: import("sinon").SinonStub<[message?: string | undefined, ...args: string[]], void>;
    warn: import("sinon").SinonStub<[message: string | Error], void>;
    table: import("sinon").SinonStub<[data: Ux.Table.Data[], columns: Ux.Table.Columns<Ux.Table.Data>, options?: import("@oclif/core/lib/cli-ux/styled/table").table.Options | undefined], void>;
    url: import("sinon").SinonStub<[text: string, uri: string, params?: {} | undefined], void>;
    styledHeader: import("sinon").SinonStub<[text: string], void>;
    styledObject: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson, keys?: string[] | undefined], void>;
    styledJSON: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson], void>;
};
export declare function stubSfCommandUx(sandbox: SinonSandbox): {
    log: import("sinon").SinonStub<[message?: string | undefined, ...args: any[]], void>;
    logJson: import("sinon").SinonStub<[json: unknown], void>;
    logToStderr: import("sinon").SinonStub<[message?: string | undefined, ...args: any[]], void>;
    logSuccess: import("sinon").SinonStub<[message: string], void>;
    logSensitive: import("sinon").SinonStub<[msg?: string | undefined], void>;
    info: import("sinon").SinonStub<[input: SfCommand.Info], void>;
    warn: import("sinon").SinonStub<[input: SfCommand.Warning], SfCommand.Warning>;
    table: import("sinon").SinonStub<[data: Ux.Table.Data[], columns: Ux.Table.Columns<Ux.Table.Data>, options?: import("@oclif/core/lib/cli-ux/styled/table").table.Options | undefined], void>;
    url: import("sinon").SinonStub<[text: string, uri: string, params?: {} | undefined], void>;
    styledHeader: import("sinon").SinonStub<[text: string], void>;
    styledObject: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson], void>;
    styledJSON: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson], void>;
};
export declare function stubSpinner(sandbox: SinonSandbox): {
    start: import("sinon").SinonStub<[action: string, status?: string | undefined, opts?: {
        stdout?: boolean | undefined;
    } | undefined], void>;
    stop: import("sinon").SinonStub<[msg?: string | undefined], void>;
};
export declare function stubPrompter(sandbox: SinonSandbox): {
    prompt: import("sinon").SinonStub<[questions: Prompter.Questions<Record<string, unknown>>, initialAnswers?: Partial<Record<string, unknown>> | undefined], Promise<Record<string, unknown>>>;
    confirm: import("sinon").SinonStub<[message: string, ms?: number | undefined, defaultAnswer?: boolean | undefined], Promise<boolean>>;
    timedPrompt: import("sinon").SinonStub<[questions: Prompter.Questions<Record<string, unknown>>, ms?: number | undefined, initialAnswers?: Partial<Record<string, unknown>> | undefined], Promise<Record<string, unknown>>>;
};
//# sourceMappingURL=stubUx.d.ts.map