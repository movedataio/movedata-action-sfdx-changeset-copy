"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayWithDeprecation = exports.optionalHubFlagWithDeprecations = exports.requiredHubFlagWithDeprecations = exports.requiredOrgFlagWithDeprecations = exports.optionalOrgFlagWithDeprecations = exports.loglevel = exports.orgApiVersionFlagWithDeprecations = void 0;
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const orgApiVersion_1 = require("./flags/orgApiVersion");
const orgFlags_1 = require("./flags/orgFlags");
/**
 * Adds an alias for the deprecated sfdx-style "apiversion" and provides a warning if it is used
 * See orgApiVersionFlag for full details
 *
 * @deprecated
 * @example
 * ```
 * import { Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *    'api-version': Flags.orgApiVersion({
 *       char: 'a',
 *       description: 'api version for the org'
 *    }),
 * }
 * ```
 */
exports.orgApiVersionFlagWithDeprecations = (0, orgApiVersion_1.orgApiVersionFlag)({
    aliases: ['apiversion'],
    deprecateAliases: true,
});
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
/**
 * Use only for commands that maintain sfdx compatibility.
 * Flag will be hidden and will show a warning if used.
 * Flag does *not* set the loglevel
 *
 * @deprecated
 *
 */
exports.loglevel = core_1.Flags.string({
    hidden: true,
    deprecated: {
        message: messages.getMessage('warning.loglevel'),
    },
});
const deprecatedOrgAliases = {
    aliases: ['targetusername', 'u'],
    deprecateAliases: true,
};
/**
 * @deprecated
 */
exports.optionalOrgFlagWithDeprecations = (0, orgFlags_1.optionalOrgFlag)({
    ...deprecatedOrgAliases,
});
/**
 * @deprecated
 */
exports.requiredOrgFlagWithDeprecations = (0, orgFlags_1.requiredOrgFlag)({
    ...deprecatedOrgAliases,
    required: true,
});
/**
 * @deprecated
 */
exports.requiredHubFlagWithDeprecations = (0, orgFlags_1.requiredHubFlag)({
    aliases: ['targetdevhubusername'],
    deprecateAliases: true,
    required: true,
});
/**
 * @deprecated
 */
exports.optionalHubFlagWithDeprecations = (0, orgFlags_1.optionalHubFlag)({
    aliases: ['targetdevhubusername'],
    deprecateAliases: true,
    required: false,
});
/**
 * @deprecated
 */
exports.arrayWithDeprecation = core_1.Flags.custom({
    multiple: true,
    delimiter: ',',
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error parse expects to return string[] but we need to return string.
    // This is a weird consequence of implementing an array flag. The oclif parser splits the input (e.g. "thing1,thing2")
    // on the delimiter and passes each value individually to the parse function. However, the return type needs to be
    // string[] so that upstream consumers have the correct flag typings.
    parse: async (input, ctx) => {
        const inputParts = ctx.token.input.split(',').map((i) => i.trim());
        if (inputParts.length > 1) {
            await core_2.Lifecycle.getInstance().emitWarning(messages.getMessage('warning.arrayInputFormat'));
        }
        return input;
    },
});
//# sourceMappingURL=compatibility.js.map