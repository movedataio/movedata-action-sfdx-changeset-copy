"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVarArgs = exports.toHelpSection = void 0;
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
/**
 * Function to build a help section for command help.
 * Takes a string to be used as section header text and an array of enums
 * that identify the variable or property to be included in the help
 * body.
 *
 * @param header
 * @param vars
 */
function toHelpSection(header, ...vars) {
    const body = vars
        .flatMap((v) => {
        if (typeof v === 'string') {
            const orgConfig = core_1.ORG_CONFIG_ALLOWED_PROPERTIES.find(({ key }) => key === v);
            if (orgConfig) {
                return { name: orgConfig.key, description: orgConfig.description };
            }
            const sfdxProperty = core_1.SFDX_ALLOWED_PROPERTIES.find(({ key }) => key === v);
            if (sfdxProperty) {
                return { name: sfdxProperty.key.valueOf(), description: sfdxProperty.description };
            }
            const envVar = Object.entries(core_1.SUPPORTED_ENV_VARS).find(([k]) => k === v);
            if (envVar) {
                const [eKey, data] = envVar;
                return { name: eKey, description: data.description };
            }
            return undefined;
        }
        else {
            return Object.entries(v).map(([name, description]) => ({ name, description }));
        }
    })
        .filter(isHelpSectionBodyEntry);
    return { header, body };
}
exports.toHelpSection = toHelpSection;
const isHelpSectionBodyEntry = (entry) => typeof entry === 'object' && entry !== null && 'name' in entry && 'description' in entry;
function parseVarArgs(args, argv) {
    const final = {};
    const argVals = Object.values(args);
    // Remove arguments from varargs
    const varargs = argv.filter((val) => !argVals.includes(val));
    // Support `config set key value`
    if (varargs.length === 2 && !varargs[0].includes('=')) {
        return { [varargs[0]]: varargs[1] };
    }
    // Ensure that all args are in the right format (e.g. key=value key1=value1)
    varargs.forEach((arg) => {
        const split = arg.split('=');
        if (split.length !== 2) {
            throw messages.createError('error.InvalidArgumentFormat', [arg]);
        }
        const [name, value] = split;
        if (final[name]) {
            throw messages.createError('error.DuplicateArgument', [name]);
        }
        final[name] = value || undefined;
    });
    return final;
}
exports.parseVarArgs = parseVarArgs;
//# sourceMappingURL=util.js.map