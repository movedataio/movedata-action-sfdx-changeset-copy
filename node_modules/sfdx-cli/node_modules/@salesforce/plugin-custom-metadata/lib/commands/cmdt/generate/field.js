"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const fileWriter_1 = require("../../../shared/helpers/fileWriter");
const validationUtil_1 = require("../../../shared/helpers/validationUtil");
const templates_1 = require("../../../shared/templates/templates");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'field');
class Create extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Create);
        const picklistvalues = flags['picklist-values'] ?? [];
        if (flags.type === 'Picklist' && picklistvalues?.length === 0) {
            throw new core_1.SfError(messages.getMessage('picklistValuesNotSuppliedError'));
        }
        const data = (0, templates_1.createDefaultTypeStructure)(flags.name, flags.type, flags.label ?? flags.name, picklistvalues, flags['decimal-places']);
        const fieldXML = (0, templates_1.createFieldXML)(data, false);
        const saveResults = await (0, fileWriter_1.writeFieldFile)(fs, flags['output-directory'], flags.name, fieldXML);
        this.log(messages.getMessage('targetDirectory', [saveResults.dir]));
        this.log(messages.getMessage(saveResults.updated ? 'fileUpdate' : 'fileCreated', [saveResults.fileName]));
        return {
            fieldName: flags.name,
            label: flags.label ?? flags.name,
            fieldtype: flags.type,
        };
    }
}
exports.default = Create;
_a = Create;
Create.summary = messages.getMessage('summary');
Create.description = messages.getMessage('description');
Create.examples = messages.getMessages('examples');
Create.requiresProject = true;
Create.aliases = ['force:cmdt:field:create', 'cmdt:field:create'];
Create.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        required: true,
        summary: messages.getMessage('flags.name.summary'),
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateAPIName)(input, messages.getMessage('invalidCustomFieldError', [input]))),
        aliases: ['fieldname'],
    }),
    type: sf_plugins_core_1.Flags.string({
        char: 'f',
        required: true,
        summary: messages.getMessage('flags.type.summary'),
        description: messages.getMessage('flags.type.description'),
        options: [
            'Checkbox',
            'Date',
            'DateTime',
            'Email',
            'Number',
            'Percent',
            'Phone',
            'Picklist',
            'Text',
            'TextArea',
            'LongTextArea',
            'Url',
        ],
        aliases: ['fieldtype'],
    }),
    'picklist-values': (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'p',
        summary: messages.getMessage('flags.picklist-values.summary'),
        aliases: ['picklistvalues'],
    }),
    'decimal-places': sf_plugins_core_1.Flags.integer({
        char: 's',
        summary: messages.getMessage('flags.decimal-places.summary'),
        description: messages.getMessage('flags.decimal-places.description'),
        default: 0,
        min: 0,
        aliases: ['decimalplaces'],
    }),
    label: sf_plugins_core_1.Flags.string({
        char: 'l',
        summary: messages.getMessage('flags.label.summary'),
    }),
    'output-directory': sf_plugins_core_1.Flags.directory({
        char: 'd',
        summary: messages.getMessage('flags.output-directory.summary'),
        description: messages.getMessage('flags.output-directory.description'),
        default: '',
        aliases: ['outputdir', 'outputdirectory'],
    }),
};
//# sourceMappingURL=field.js.map