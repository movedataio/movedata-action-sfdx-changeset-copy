"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const fileWriter_1 = require("../../../shared/helpers/fileWriter");
const validationUtil_1 = require("../../../shared/helpers/validationUtil");
const templates_1 = require("../../../shared/templates/templates");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'object');
class Create extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Create);
        const label = flags.label ?? flags['type-name'].replace('__mdt', ''); // If a label is not provided default using the dev name. trim __mdt out
        const pluralLabel = flags['plural-label'] ?? label;
        const objectXML = (0, templates_1.createObjectXML)({ label, pluralLabel }, flags.visibility);
        const saveResults = await (0, fileWriter_1.writeTypeFile)(fs, flags['output-directory'], flags['type-name'], objectXML);
        this.log(messages.getMessage('targetDirectory', [saveResults.dir]));
        this.log(messages.getMessage(saveResults.updated ? 'fileUpdate' : 'fileCreated', [saveResults.fileName]));
        return {
            typename: flags['type-name'],
            label,
            pluralLabel,
            visibility: flags.visibility,
        };
    }
}
exports.default = Create;
_a = Create;
Create.summary = messages.getMessage('summary');
Create.description = messages.getMessage('description');
Create.examples = messages.getMessages('examples');
Create.aliases = ['force:cmdt:create', 'cmdt:create'];
Create.requiresProject = true;
Create.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'type-name': sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.type-name.summary'),
        description: messages.getMessage('flags.type-name.description'),
        required: true,
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateMetadataTypeName)(input)),
        aliases: ['typename'],
    }),
    label: sf_plugins_core_1.Flags.string({
        char: 'l',
        summary: messages.getMessage('flags.label.summary'),
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateLessThanForty)(input, messages.getMessage('errorNotValidLabelName', [input]))),
    }),
    'plural-label': sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.plural-label.summary'),
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateLessThanForty)(input, messages.getMessage('errorNotValidPluralLabelName', [input]))),
        aliases: ['plurallabel'],
    }),
    visibility: sf_plugins_core_1.Flags.string({
        char: 'v',
        summary: messages.getMessage('flags.visibility.summary'),
        description: messages.getMessage('flags.visibility.description'),
        options: ['PackageProtected', 'Protected', 'Public'],
        default: 'Public',
    }),
    'output-directory': sf_plugins_core_1.Flags.directory({
        char: 'd',
        summary: messages.getMessage('flags.output-directory.summary'),
        description: messages.getMessage('flags.output-directory.description'),
        default: '',
        aliases: ['outputdir', 'outputdirectory'],
    }),
};
//# sourceMappingURL=object.js.map