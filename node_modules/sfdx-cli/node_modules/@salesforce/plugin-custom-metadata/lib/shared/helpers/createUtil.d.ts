import { CustomField } from 'jsforce/api/metadata';
import { CreateConfig } from '../interfaces/createConfig';
/**
 * Number and Percent types will be int or double depending on their respective scale values.
 * If the scale === 0, it is an int, otherwise it is a double
 */
/**
 *
 * @param fieldDirPath path to a /fields folder that contains all the fields to read
 * @param fileNames filenames in that folder that should be read
 * @returns CustomField[]
 */
export declare const getFileData: (fieldDirPath: string, fileNames: string[]) => Promise<CustomField[]>;
/**
 * Get the field type from the custom metadata type that has a matching field name.
 *
 * @param  fileData Array of objects based on metadata type xml
 * @param  fieldName Name of the field
 * @return {string} Data Type of the field.
 */
export declare const getFieldDataType: (fileData?: CustomField[], fieldName?: string) => CustomField['type'];
/**
 * Creates the Custom Metadata Record
 *
 * @param  createConfig Properties include typename, recname, label, protection, varargs, and fileData
 * @return void
 */
export declare const createRecord: (createConfig: CreateConfig) => Promise<void>;
/**
 * Get the field primitive type from the custom metadata type that has a matching field name.
 *
 * @param  fileData Array of objects based on metadata type xml
 * @param  fieldName Name of the field
 * @return {string} Type used by a custom metadata record
 */
export declare const getFieldPrimitiveType: (fileData?: CustomField[], fieldName?: string) => string;
/**
 * Filenames should have the suffix of '__mdt'. This will append that suffix if it does not exist.
 *
 * @param  typename Name of file
 */
export declare const appendDirectorySuffix: (typename: string) => string;
/**
 * Goes through the file data that has been genreated and gets all of the field names and adds the
 * name of the field that is used as the label for metadata record
 *
 * @param  fileData Array of objects based on metadata type xml
 * @param  nameField name of the column that is going to be used for the name of the metadata record
 * @return [] Array of field names
 */
export declare const getFieldNames: (fileData: CustomField[], nameField: string) => string[];
