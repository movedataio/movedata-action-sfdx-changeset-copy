"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileResponseSuccessProps = exports.getVersionMessage = exports.sortFileResponses = exports.asRelativePaths = exports.tableHeader = void 0;
const path = require("path");
const chalk_1 = require("chalk");
function tableHeader(message) {
    return (0, chalk_1.blue)((0, chalk_1.bold)(message));
}
exports.tableHeader = tableHeader;
function asRelativePaths(fileResponses) {
    const relative = fileResponses.map((file) => file.filePath ? { ...file, filePath: path.relative(process.cwd(), file.filePath) } : file);
    return relative;
}
exports.asRelativePaths = asRelativePaths;
/**
 * Sorts file responds by type, then by filePath, then by fullName
 */
function sortFileResponses(fileResponses) {
    return fileResponses.sort((i, j) => {
        if (i.type === j.type && i.filePath && j.filePath) {
            if (i.filePath === j.filePath) {
                return i.fullName > j.fullName ? 1 : -1;
            }
            return i?.filePath > j?.filePath ? 1 : -1;
        }
        return i.type > j.type ? 1 : -1;
    });
}
exports.sortFileResponses = sortFileResponses;
function getVersionMessage(action, componentSet, api) {
    // commands pass in the.componentSet, which may not exist in some tests or mdapi deploys
    if (!componentSet) {
        return `*** ${action} with ${api} ***`;
    }
    // neither
    if (!componentSet.sourceApiVersion && !componentSet.apiVersion) {
        return `*** ${action} with ${api} ***`;
    }
    // either OR both match (SDR will use either)
    if (!componentSet.sourceApiVersion ||
        !componentSet.apiVersion ||
        componentSet.sourceApiVersion === componentSet.apiVersion) {
        return `*** ${action} with ${api} API v${componentSet.apiVersion ?? componentSet.sourceApiVersion} ***`;
    }
    // has both but they don't match
    return `*** ${action} v${componentSet.sourceApiVersion} metadata with ${api} API v${componentSet.apiVersion} connection ***`;
}
exports.getVersionMessage = getVersionMessage;
const getFileResponseSuccessProps = (successes) => successes.map((s) => ({ filePath: s.filePath, fullName: s.fullName, type: s.type, state: s.state }));
exports.getFileResponseSuccessProps = getFileResponseSuccessProps;
//# sourceMappingURL=output.js.map