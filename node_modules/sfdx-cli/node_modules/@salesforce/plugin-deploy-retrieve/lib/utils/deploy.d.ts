import { ConfigAggregator, Messages, Org, SfProject } from '@salesforce/core';
import { Duration } from '@salesforce/kit';
import { Nullable } from '@salesforce/ts-types';
import { ComponentSet, DeployResult, MetadataApiDeploy, RequestStatus } from '@salesforce/source-deploy-retrieve';
import { SourceTracking } from '@salesforce/source-tracking';
import { API, PathInfo, TestLevel } from './types';
export declare const cacheMessages: Messages<string>;
export type DeployOptions = {
    api: API;
    'target-org': string;
    'test-level': TestLevel;
    async?: boolean;
    'api-version'?: string;
    'dry-run'?: boolean;
    'ignore-conflicts'?: boolean;
    'ignore-errors'?: boolean;
    'ignore-warnings'?: boolean;
    manifest?: string;
    metadata?: string[];
    'metadata-dir'?: PathInfo;
    'source-dir'?: string[];
    tests?: string[];
    wait?: Duration;
    verbose?: boolean;
    concise?: boolean;
    'single-package'?: boolean;
    status?: RequestStatus;
    'pre-destructive-changes'?: string;
    'post-destructive-changes'?: string;
    'purge-on-delete'?: boolean;
};
/** Manifest is expected.  You cannot pass metadata and source-dir array--use those to get a manifest */
export type CachedOptions = Omit<DeployOptions, 'wait' | 'metadata' | 'source-dir'> & {
    wait: number;
    /** whether the user passed in anything for metadata-dir (could be a folder, could be a zip) */
    isMdapi: boolean;
} & Partial<Pick<DeployOptions, 'manifest'>>;
export declare function validateTests(testLevel: TestLevel, tests: Nullable<string[]>): boolean;
export declare function resolveApi(existingConfigAggregator?: ConfigAggregator): Promise<API>;
export declare function buildComponentSet(opts: Partial<DeployOptions>, stl?: SourceTracking): Promise<ComponentSet>;
export declare function executeDeploy(opts: Partial<DeployOptions>, bin?: string, project?: SfProject, id?: string): Promise<{
    deploy: MetadataApiDeploy;
    componentSet?: ComponentSet;
}>;
export declare function cancelDeploy(opts: Partial<DeployOptions>, id: string): Promise<DeployResult>;
export declare function cancelDeployAsync(opts: Partial<DeployOptions>, id: string): Promise<{
    id: string;
}>;
export declare function poll(org: Org, id: string, wait: Duration, componentSet: ComponentSet): Promise<DeployResult>;
export declare function determineExitCode(result: DeployResult, async?: boolean): number;
export declare const isNotResumable: (status?: RequestStatus) => boolean;
