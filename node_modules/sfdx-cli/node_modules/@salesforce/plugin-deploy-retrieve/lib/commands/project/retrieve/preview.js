"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const source_tracking_1 = require("@salesforce/source-tracking");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const previewOutput_1 = require("../../../utils/previewOutput");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'retrieve.metadata.preview');
class RetrieveMetadataPreview extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(RetrieveMetadataPreview);
        const stl = await source_tracking_1.SourceTracking.create({
            org: flags['target-org'],
            project: this.project,
            ignoreConflicts: flags['ignore-conflicts'],
        });
        const forceIgnore = source_deploy_retrieve_1.ForceIgnore.findAndCreate(this.project.getDefaultPackage().path);
        const [componentSet, filesWithConflicts, remoteDeletes] = await Promise.all([
            stl.remoteNonDeletesAsComponentSet(),
            (0, previewOutput_1.getConflictFiles)(stl, flags['ignore-conflicts']),
            stl.getChanges({ origin: 'remote', state: 'delete', format: 'SourceComponent' }),
        ]);
        const output = (0, previewOutput_1.compileResults)({
            componentSet,
            projectPath: this.project.getPath(),
            filesWithConflicts,
            forceIgnore,
            baseOperation: 'retrieve',
            remoteDeletes,
        });
        if (!this.jsonEnabled()) {
            (0, previewOutput_1.printTables)(output, 'retrieve');
        }
        return output;
    }
}
exports.default = RetrieveMetadataPreview;
RetrieveMetadataPreview.description = messages.getMessage('description');
RetrieveMetadataPreview.summary = messages.getMessage('summary');
RetrieveMetadataPreview.examples = messages.getMessages('examples');
RetrieveMetadataPreview.requiresProject = true;
RetrieveMetadataPreview.aliases = ['retrieve:metadata:preview'];
RetrieveMetadataPreview.deprecateAliases = true;
RetrieveMetadataPreview.flags = {
    'ignore-conflicts': sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.ignore-conflicts.summary'),
        description: messages.getMessage('flags.ignore-conflicts.description'),
        default: false,
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
        required: true,
    }),
};
//# sourceMappingURL=preview.js.map