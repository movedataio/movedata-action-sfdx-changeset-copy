"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const kit_1 = require("@salesforce/kit");
const deploy_1 = require("../../../utils/deploy");
const deployCache_1 = require("../../../utils/deployCache");
const errorCodes_1 = require("../../../utils/errorCodes");
const output_1 = require("../../../utils/output");
const asyncDeployResultFormatter_1 = require("../../../formatters/asyncDeployResultFormatter");
const deployResultFormatter_1 = require("../../../formatters/deployResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.quick');
class DeployMetadataQuick extends sf_plugins_core_1.SfCommand {
    async run() {
        const [{ flags }, cache] = await Promise.all([this.parse(DeployMetadataQuick), deployCache_1.DeployCache.create()]);
        const jobId = cache.resolveLatest(flags['use-most-recent'], flags['job-id'], false);
        const deployOpts = cache.get(jobId) ?? {};
        const org = flags['target-org'] ?? (await core_1.Org.create({ aliasOrUsername: deployOpts['target-org'] }));
        const api = await (0, deploy_1.resolveApi)(this.configAggregator);
        await org.getConnection(flags['api-version']).deployRecentValidation({ id: jobId, rest: api === 'REST' });
        const componentSet = await (0, deploy_1.buildComponentSet)({ ...deployOpts, wait: flags.wait });
        this.log((0, output_1.getVersionMessage)('Deploying', componentSet, api));
        this.log(`Deploy ID: ${(0, chalk_1.bold)(jobId)}`);
        if (flags.async) {
            const asyncFormatter = new asyncDeployResultFormatter_1.AsyncDeployResultFormatter(jobId, this.config.bin);
            if (!this.jsonEnabled())
                asyncFormatter.display();
            return asyncFormatter.getJson();
        }
        const result = await (0, deploy_1.poll)(org, jobId, flags.wait, componentSet);
        const formatter = new deployResultFormatter_1.DeployResultFormatter(result, flags);
        if (!this.jsonEnabled())
            formatter.display();
        await deployCache_1.DeployCache.update(jobId, { status: result.response.status });
        process.exitCode = (0, deploy_1.determineExitCode)(result);
        if (result.response.status === source_deploy_retrieve_1.RequestStatus.Succeeded) {
            this.log();
            this.logSuccess(messages.getMessage('info.QuickDeploySuccess', [jobId]));
        }
        else {
            this.log(messages.getMessage('error.QuickDeployFailure', [jobId, result.response.status]));
        }
        return formatter.getJson();
    }
    catch(error) {
        if (error.name.includes('INVALID_ID_FIELD')) {
            const err = messages.createError('error.CannotQuickDeploy');
            return super.catch({ ...error, name: err.name, message: err.message, code: err.code });
        }
        return super.catch(error);
    }
}
exports.default = DeployMetadataQuick;
DeployMetadataQuick.description = messages.getMessage('description');
DeployMetadataQuick.summary = messages.getMessage('summary');
DeployMetadataQuick.examples = messages.getMessages('examples');
DeployMetadataQuick.requiresProject = true;
DeployMetadataQuick.aliases = ['deploy:metadata:quick'];
DeployMetadataQuick.deprecateAliases = true;
DeployMetadataQuick.flags = {
    async: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.async.summary'),
        description: messages.getMessage('flags.async.description'),
        exclusive: ['wait'],
    }),
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
        exclusive: ['verbose'],
    }),
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        description: messages.getMessage('flags.job-id.description'),
        summary: messages.getMessage('flags.job-id.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    'target-org': sf_plugins_core_1.Flags.optionalOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.use-most-recent.description'),
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        exclusive: ['concise'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        defaultValue: 33,
        default: kit_1.Duration.minutes(33),
        helpValue: '<minutes>',
        min: 1,
        exclusive: ['async'],
    }),
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        char: 'a',
        summary: messages.getMessage('flags.api-version.summary'),
        description: messages.getMessage('flags.api-version.description'),
    }),
};
DeployMetadataQuick.errorCodes = (0, sf_plugins_core_1.toHelpSection)('ERROR CODES', errorCodes_1.DEPLOY_STATUS_CODES_DESCRIPTIONS);
//# sourceMappingURL=quick.js.map