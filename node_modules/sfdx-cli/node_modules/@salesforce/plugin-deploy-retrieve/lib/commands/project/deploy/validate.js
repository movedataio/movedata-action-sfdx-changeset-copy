"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const output_1 = require("../../../utils/output");
const asyncDeployResultFormatter_1 = require("../../../formatters/asyncDeployResultFormatter");
const deployResultFormatter_1 = require("../../../formatters/deployResultFormatter");
const progressBar_1 = require("../../../utils/progressBar");
const types_1 = require("../../../utils/types");
const deploy_1 = require("../../../utils/deploy");
const errorCodes_1 = require("../../../utils/errorCodes");
const configMeta_1 = require("../../../configMeta");
const flags_1 = require("../../../utils/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.validate');
const EXACTLY_ONE_FLAGS = ['manifest', 'source-dir', 'metadata', 'metadata-dir'];
class DeployMetadataValidate extends sf_plugins_core_1.SfCommand {
    async run() {
        const [{ flags }, api] = await Promise.all([this.parse(DeployMetadataValidate), (0, deploy_1.resolveApi)(this.configAggregator)]);
        const { deploy, componentSet } = await (0, deploy_1.executeDeploy)({
            ...flags,
            'ignore-conflicts': true,
            'dry-run': true,
            'target-org': flags['target-org'].getUsername(),
            api,
        }, this.config.bin, this.project);
        this.log((0, output_1.getVersionMessage)('Validating Deployment', componentSet, api));
        if (!deploy.id) {
            throw new core_1.SfError('The deploy id is not available.');
        }
        this.log(`Deploy ID: ${(0, chalk_1.bold)(deploy.id)}`);
        if (flags.async) {
            const asyncFormatter = new asyncDeployResultFormatter_1.AsyncDeployResultFormatter(deploy.id, this.config.bin);
            if (!this.jsonEnabled())
                asyncFormatter.display();
            return asyncFormatter.getJson();
        }
        new progressBar_1.DeployProgress(deploy, this.jsonEnabled()).start();
        const result = await deploy.pollStatus(500, flags.wait?.seconds);
        process.exitCode = (0, deploy_1.determineExitCode)(result);
        const formatter = new deployResultFormatter_1.DeployResultFormatter(result, flags);
        if (!this.jsonEnabled()) {
            formatter.display();
        }
        if (result.response.status === source_deploy_retrieve_1.RequestStatus.Succeeded) {
            this.log();
            this.logSuccess(messages.getMessage('info.SuccessfulValidation', [deploy.id]));
            this.log(messages.getMessage('info.suggestedQuickDeploy', [this.config.bin, deploy.id]));
        }
        else {
            throw messages.createError('error.FailedValidation', [deploy.id]);
        }
        return formatter.getJson();
    }
}
exports.default = DeployMetadataValidate;
DeployMetadataValidate.description = messages.getMessage('description');
DeployMetadataValidate.summary = messages.getMessage('summary');
DeployMetadataValidate.examples = messages.getMessages('examples');
DeployMetadataValidate.requiresProject = true;
DeployMetadataValidate.aliases = ['deploy:metadata:validate'];
DeployMetadataValidate.deprecateAliases = true;
DeployMetadataValidate.flags = {
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        char: 'a',
        summary: messages.getMessage('flags.api-version.summary'),
        description: messages.getMessage('flags.api-version.description'),
    }),
    async: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.async.summary'),
        description: messages.getMessage('flags.async.description'),
    }),
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
        exclusive: ['verbose'],
    }),
    manifest: sf_plugins_core_1.Flags.file({
        char: 'x',
        description: messages.getMessage('flags.manifest.description'),
        summary: messages.getMessage('flags.manifest.summary'),
        exactlyOne: EXACTLY_ONE_FLAGS,
    }),
    metadata: sf_plugins_core_1.Flags.string({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        multiple: true,
        exactlyOne: EXACTLY_ONE_FLAGS,
    }),
    'source-dir': sf_plugins_core_1.Flags.string({
        char: 'd',
        description: messages.getMessage('flags.source-dir.description'),
        summary: messages.getMessage('flags.source-dir.summary'),
        multiple: true,
        exactlyOne: EXACTLY_ONE_FLAGS,
    }),
    'metadata-dir': (0, flags_1.fileOrDirFlag)({
        summary: messages.getMessage('flags.metadata-dir.summary'),
        exactlyOne: EXACTLY_ONE_FLAGS,
        exists: true,
    }),
    'single-package': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.single-package.summary'),
        dependsOn: ['metadata-dir'],
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
        required: true,
    }),
    tests: sf_plugins_core_1.Flags.string({
        char: 't',
        multiple: true,
        summary: messages.getMessage('flags.tests.summary'),
    }),
    'test-level': (0, flags_1.testLevelFlag)({
        options: [types_1.TestLevel.RunAllTestsInOrg, types_1.TestLevel.RunLocalTests, types_1.TestLevel.RunSpecifiedTests],
        default: types_1.TestLevel.RunLocalTests,
        description: messages.getMessage('flags.test-level.description'),
        summary: messages.getMessage('flags.test-level.summary'),
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        exclusive: ['concise'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        defaultValue: 33,
        helpValue: '<minutes>',
        min: 1,
    }),
};
DeployMetadataValidate.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_1.OrgConfigProperties.TARGET_ORG, core_1.OrgConfigProperties.ORG_API_VERSION, configMeta_1.ConfigVars.ORG_METADATA_REST_DEPLOY);
DeployMetadataValidate.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_1.EnvironmentVariable.SF_TARGET_ORG, core_1.EnvironmentVariable.SF_USE_PROGRESS_BAR);
DeployMetadataValidate.errorCodes = (0, sf_plugins_core_1.toHelpSection)('ERROR CODES', errorCodes_1.DEPLOY_STATUS_CODES_DESCRIPTIONS);
//# sourceMappingURL=validate.js.map