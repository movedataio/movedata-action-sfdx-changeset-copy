"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestGenerate = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const fs = require("fs");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const project_1 = require("../../../utils/project");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'manifest.generate');
const manifestTypes = {
    pre: 'destructiveChangesPre.xml',
    post: 'destructiveChangesPost.xml',
    destroy: 'destructiveChanges.xml',
    package: 'package.xml',
};
const packageTypes = {
    managed: ['beta', 'deleted', 'deprecated', 'installed', 'released'],
    unlocked: ['deprecatedEditable', 'installedEditable'],
};
const xorFlags = ['metadata', 'source-dir', 'from-org'];
class ManifestGenerate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ManifestGenerate);
        // convert the manifesttype into one of the "official" manifest names
        // if no manifesttype flag passed, use the manifestname?flag
        // if no manifestname flag, default to 'package.xml'
        const manifestTypeFromFlag = flags.type;
        const manifestName = ensureFileEnding(typeof manifestTypeFromFlag === 'string' ? manifestTypes[manifestTypeFromFlag] : flags.name ?? 'package.xml', '.xml');
        const componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({
            apiversion: flags['api-version'] ?? (await (0, project_1.getSourceApiVersion)()),
            sourcepath: flags['source-dir'],
            metadata: flags.metadata
                ? {
                    metadataEntries: flags.metadata,
                    directoryPaths: await (0, project_1.getPackageDirs)(),
                }
                : undefined,
            org: flags['from-org']
                ? {
                    username: flags['from-org'].getUsername(),
                    exclude: exclude(flags['include-packages']),
                }
                : undefined,
        });
        const outputDir = flags['output-dir'];
        if (outputDir) {
            await fs.promises.mkdir(outputDir, { recursive: true });
        }
        const outputPath = outputDir ? (0, path_1.join)(outputDir, manifestName) : manifestName;
        await fs.promises.writeFile(outputPath, await componentSet.getPackageXml());
        this.log(outputDir
            ? messages.getMessage('successOutputDir', [manifestName, outputDir])
            : messages.getMessage('success', [manifestName]));
        return { path: outputPath, name: manifestName };
    }
}
exports.ManifestGenerate = ManifestGenerate;
_a = ManifestGenerate;
ManifestGenerate.summary = messages.getMessage('summary');
ManifestGenerate.description = messages.getMessage('description');
ManifestGenerate.examples = messages.getMessages('examples');
ManifestGenerate.aliases = ['force:source:manifest:create'];
ManifestGenerate.deprecateAliases = true;
ManifestGenerate.requiresProject = true;
ManifestGenerate.flags = {
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    metadata: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        exactlyOne: xorFlags,
    }),
    'source-dir': (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'p',
        aliases: ['sourcepath'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.source-dir.summary'),
        exactlyOne: xorFlags,
    }),
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        aliases: ['manifestname'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.name.summary'),
        exclusive: ['type'],
    }),
    type: sf_plugins_core_1.Flags.string({
        aliases: ['manifesttype'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.type.summary'),
        options: Object.keys(manifestTypes),
        char: 't',
        exclusive: ['name'],
    }),
    'include-packages': (0, sf_plugins_core_1.arrayWithDeprecation)({
        aliases: ['includepackages'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.include-packages.summary'),
        options: Object.keys(packageTypes),
        char: 'c',
        dependsOn: ['from-org'],
    }),
    'from-org': sf_plugins_core_1.Flags.custom({
        summary: messages.getMessage('flags.from-org.summary'),
        exactlyOne: xorFlags,
        aliases: ['fromorg'],
        deprecateAliases: true,
        parse: async (input) => (input ? core_1.Org.create({ aliasOrUsername: input }) : undefined),
    })(),
    'output-dir': sf_plugins_core_1.Flags.string({
        char: 'd',
        aliases: ['outputdir', 'o'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.output-dir.summary'),
    }),
};
const ensureFileEnding = (fileName, fileEnding) => fileName.endsWith(fileEnding) ? fileName : `${fileName}${fileEnding}`;
const exclude = (includedPackages) => includedPackages
    ? Object.entries(packageTypes)
        .filter(([type]) => !includedPackages.includes(type))
        .flatMap(([, types]) => types)
    : Object.values(packageTypes).flat();
//# sourceMappingURL=manifest.js.map