"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ignored = void 0;
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const fs = require("fs");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'list.ignored');
class Ignored extends sf_plugins_core_1.SfCommand {
    /**
     * Outputs all forceignored files from package directories of a project,
     * or based on a sourcepath param that points to a specific file or directory.
     */
    // eslint-disable-next-line @typescript-eslint/require-await
    async run() {
        const flags = (await this.parse(Ignored)).flags;
        try {
            this.forceIgnore = source_deploy_retrieve_1.ForceIgnore.findAndCreate(this.project.getPath());
            const sourcepaths = flags['source-dir']
                ? [flags['source-dir']]
                : this.project.getUniquePackageDirectories().map((pDir) => pDir.path);
            const ignoredFiles = (await Promise.all(sourcepaths.map((sp) => this.statIgnored(sp.trim())))).flat();
            // Command output
            if (ignoredFiles.length) {
                this.log('Found the following ignored files:');
                ignoredFiles.forEach((filepath) => this.log(filepath));
            }
            else {
                this.log('No ignored files found in paths:');
                sourcepaths.forEach((sp) => this.log(sp));
            }
            return { ignoredFiles };
        }
        catch (err) {
            const error = err;
            if ('code' in error && error.code === 'ENOENT') {
                throw messages.createError('invalidSourceDir', [flags['source-dir']]);
            }
            throw core_1.SfError.wrap(error);
        }
    }
    // Stat the filepath.  Test if a file, recurse if a directory.
    async statIgnored(filepath) {
        const stats = await fs.promises.stat(filepath);
        if (stats.isDirectory()) {
            return (await Promise.all(await this.findIgnored(filepath))).flat();
        }
        else {
            return this.isIgnored(filepath) ? [filepath] : [];
        }
    }
    // Recursively search a directory for source files to test.
    async findIgnored(dir) {
        return (await fs.promises.readdir(dir)).map((filename) => this.statIgnored(path.join(dir, filename)));
    }
    // Test if a source file is denied, adding any ignored files to
    // the ignoredFiles array for output.
    isIgnored(filepath) {
        return this.forceIgnore.denies(filepath);
    }
}
exports.Ignored = Ignored;
Ignored.summary = messages.getMessage('summary');
Ignored.description = messages.getMessage('description');
Ignored.examples = messages.getMessages('examples');
Ignored.requiresProject = true;
Ignored.aliases = ['force:source:ignored:list'];
Ignored.deprecateAliases = true;
Ignored.flags = {
    'source-dir': sf_plugins_core_1.Flags.file({
        char: 'p',
        aliases: ['sourcepath'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.source-dir.summary'),
    }),
};
//# sourceMappingURL=ignored.js.map