"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const source_tracking_1 = require("@salesforce/source-tracking");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const deploy_1 = require("../../../utils/deploy");
const previewOutput_1 = require("../../../utils/previewOutput");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.preview');
const exclusiveFlags = ['manifest', 'source-dir', 'metadata'];
class DeployMetadataPreview extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DeployMetadataPreview);
        const deploySpecified = [flags.manifest, flags.metadata, flags['source-dir']].some((f) => f !== undefined);
        const forceIgnore = source_deploy_retrieve_1.ForceIgnore.findAndCreate(this.project.getDefaultPackage().path);
        // we'll need STL both to check conflicts and to get the list of local changes if no flags are provided
        const stl = flags['ignore-conflicts'] && deploySpecified
            ? undefined
            : await source_tracking_1.SourceTracking.create({
                org: flags['target-org'],
                project: this.project,
            });
        const [componentSet, filesWithConflicts] = await Promise.all([
            (0, deploy_1.buildComponentSet)({ ...flags, 'target-org': flags['target-org'].getUsername() }, stl),
            (0, previewOutput_1.getConflictFiles)(stl, flags['ignore-conflicts']),
        ]);
        const output = (0, previewOutput_1.compileResults)({
            componentSet,
            projectPath: this.project.getPath(),
            filesWithConflicts,
            forceIgnore,
            baseOperation: 'deploy',
        });
        if (!this.jsonEnabled()) {
            (0, previewOutput_1.printTables)(output, 'deploy');
        }
        return output;
    }
}
exports.default = DeployMetadataPreview;
DeployMetadataPreview.description = messages.getMessage('description');
DeployMetadataPreview.summary = messages.getMessage('summary');
DeployMetadataPreview.examples = messages.getMessages('examples');
DeployMetadataPreview.requiresProject = true;
DeployMetadataPreview.aliases = ['deploy:metadata:preview'];
DeployMetadataPreview.deprecateAliases = true;
DeployMetadataPreview.flags = {
    'ignore-conflicts': sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.ignore-conflicts.summary'),
        description: messages.getMessage('flags.ignore-conflicts.description'),
        default: false,
    }),
    manifest: sf_plugins_core_1.Flags.file({
        char: 'x',
        description: messages.getMessage('flags.manifest.description'),
        summary: messages.getMessage('flags.manifest.summary'),
        exclusive: exclusiveFlags.filter((f) => f !== 'manifest'),
        exists: true,
    }),
    metadata: sf_plugins_core_1.Flags.string({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        multiple: true,
        exclusive: exclusiveFlags.filter((f) => f !== 'metadata'),
    }),
    'source-dir': sf_plugins_core_1.Flags.string({
        char: 'd',
        description: messages.getMessage('flags.source-dir.description'),
        summary: messages.getMessage('flags.source-dir.summary'),
        multiple: true,
        exclusive: exclusiveFlags.filter((f) => f !== 'source-dir'),
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
        required: true,
    }),
};
//# sourceMappingURL=preview.js.map