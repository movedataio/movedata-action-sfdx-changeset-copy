import { Interfaces } from '@oclif/core';
import { Org } from '@salesforce/core';
import { FileResponse } from '@salesforce/source-deploy-retrieve';
import { Duration } from '@salesforce/kit';
import { SourceTracking } from '@salesforce/source-tracking';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { DeleteSourceJson, TestLevel } from '../../../utils/types';
export declare class Source extends SfCommand<DeleteSourceJson> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly aliases: string[];
    static readonly deprecateAliases = true;
    static readonly requiresProject = true;
    static readonly flags: {
        'api-version': Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        loglevel: Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<Org, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'check-only': Interfaces.BooleanFlag<boolean>;
        wait: Interfaces.OptionFlag<Duration, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'test-level': Interfaces.OptionFlag<TestLevel, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'no-prompt': Interfaces.BooleanFlag<boolean>;
        metadata: Interfaces.OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'source-dir': Interfaces.OptionFlag<string[] | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'track-source': Interfaces.BooleanFlag<boolean>;
        'force-overwrite': Interfaces.BooleanFlag<boolean>;
        verbose: Interfaces.BooleanFlag<boolean>;
    };
    protected fileResponses: FileResponse[] | undefined;
    protected tracking: SourceTracking | undefined;
    private aborted;
    private components;
    private mixedDeployDelete;
    private stashPath;
    private tempDir;
    private flags;
    private org;
    private componentSet;
    private isRest;
    private deployResult;
    private deleteResultFormatter;
    run(): Promise<DeleteSourceJson>;
    protected preChecks(): Promise<void>;
    protected delete(): Promise<void>;
    /**
     * Checks the response status to determine whether the delete was successful.
     */
    protected resolveSuccess(): Promise<void>;
    protected formatResult(): DeleteSourceJson;
    private maybeUpdateTracking;
    private deleteFilesLocally;
    private moveFileToStash;
    private restoreFileFromStash;
    private deleteStash;
    private moveBundleToManifest;
    private handlePrompt;
    /**
     * Check if any conflicts exist in a specific component set.
     * If conflicts exist, this will output the table and throw
     */
    private filterConflictsByComponentSet;
    /**
     * Write a table (if not json) and throw an error that includes a custom message and the conflict data
     *
     * @param conflicts
     * @param message
     */
    private processConflicts;
}
