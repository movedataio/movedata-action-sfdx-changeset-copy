"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const source_tracking_1 = require("@salesforce/source-tracking");
const output_1 = require("../../../utils/output");
const asyncDeployResultFormatter_1 = require("../../../formatters/asyncDeployResultFormatter");
const deployResultFormatter_1 = require("../../../formatters/deployResultFormatter");
const progressBar_1 = require("../../../utils/progressBar");
const types_1 = require("../../../utils/types");
const deploy_1 = require("../../../utils/deploy");
const deployCache_1 = require("../../../utils/deployCache");
const errorCodes_1 = require("../../../utils/errorCodes");
const configMeta_1 = require("../../../configMeta");
const flags_1 = require("../../../utils/flags");
const conflicts_1 = require("../../../utils/conflicts");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata');
const exclusiveFlags = ['manifest', 'source-dir', 'metadata', 'metadata-dir'];
class DeployMetadata extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DeployMetadata);
        if (this.project.getSfProjectJson().getContents()['pushPackageDirectoriesSequentially'] &&
            // flag exclusivity is handled correctly above - but to avoid short-circuiting the check, we need to check all of them
            !flags.manifest &&
            !flags.metadata &&
            !flags['source-dir']) {
            // if pushPackageDirectoriesSequentially = true, and they're not using any of the flags that would modify their deploy
            // e.g. they're recreating a `source:push` command, which is the only one that respects this config value, warn them about it not working like it used to
            this.warn(messages.getMessage('pushPackageDirsWarning'));
        }
        if (!(0, deploy_1.validateTests)(flags['test-level'], flags.tests)) {
            throw messages.createError('error.NoTestsSpecified');
        }
        const api = await (0, deploy_1.resolveApi)(this.configAggregator);
        const { deploy, componentSet } = await (0, deploy_1.executeDeploy)({
            ...flags,
            'target-org': flags['target-org'].getUsername(),
            api,
        }, this.config.bin, this.project);
        const action = flags['dry-run'] ? 'Deploying (dry-run)' : 'Deploying';
        this.log((0, output_1.getVersionMessage)(action, componentSet, api));
        if (!deploy.id) {
            throw new core_1.SfError('The deploy id is not available.');
        }
        this.log(`Deploy ID: ${(0, chalk_1.bold)(deploy.id)}`);
        if (flags.async) {
            if (flags['coverage-formatters']) {
                this.warn(messages.getMessage('asyncCoverageJunitWarning'));
            }
            const asyncFormatter = new asyncDeployResultFormatter_1.AsyncDeployResultFormatter(deploy.id, this.config.bin);
            if (!this.jsonEnabled())
                asyncFormatter.display();
            return asyncFormatter.getJson();
        }
        new progressBar_1.DeployProgress(deploy, this.jsonEnabled()).start();
        const result = await deploy.pollStatus({ timeout: flags.wait });
        process.exitCode = (0, deploy_1.determineExitCode)(result);
        const formatter = new deployResultFormatter_1.DeployResultFormatter(result, flags);
        if (!this.jsonEnabled()) {
            formatter.display();
            if (flags['dry-run'])
                this.logSuccess('Dry-run complete.');
        }
        await deployCache_1.DeployCache.update(deploy.id, { status: result.response.status });
        return formatter.getJson();
    }
    catch(error) {
        if (error instanceof source_tracking_1.SourceConflictError) {
            if (!this.jsonEnabled()) {
                (0, conflicts_1.writeConflictTable)(error.data);
                // set the message and add plugin-specific actions
                return super.catch({
                    ...error,
                    message: messages.getMessage('error.Conflicts'),
                    actions: messages.getMessages('error.Conflicts.Actions', [this.config.bin]),
                });
            }
        }
        if (error.message.includes('client has timed out')) {
            const err = messages.createError('error.ClientTimeout', [this.config.bin]);
            return super.catch({ ...error, name: err.name, message: err.message, code: err.code });
        }
        return super.catch(error);
    }
}
exports.default = DeployMetadata;
DeployMetadata.description = messages.getMessage('description');
DeployMetadata.summary = messages.getMessage('summary');
DeployMetadata.examples = messages.getMessages('examples');
DeployMetadata.requiresProject = true;
DeployMetadata.aliases = ['deploy:metadata'];
DeployMetadata.deprecateAliases = true;
DeployMetadata.flags = {
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        char: 'a',
        summary: messages.getMessage('flags.api-version.summary'),
        description: messages.getMessage('flags.api-version.description'),
    }),
    async: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.async.summary'),
        description: messages.getMessage('flags.async.description'),
        exclusive: ['wait'],
    }),
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
        exclusive: ['verbose'],
    }),
    'dry-run': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.dry-run.summary'),
        default: false,
    }),
    'ignore-conflicts': sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.ignore-conflicts.summary'),
        description: messages.getMessage('flags.ignore-conflicts.description'),
        default: false,
    }),
    'ignore-errors': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: messages.getMessage('flags.ignore-errors.summary'),
        description: messages.getMessage('flags.ignore-errors.description'),
        default: false,
    }),
    'ignore-warnings': sf_plugins_core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.ignore-warnings.summary'),
        description: messages.getMessage('flags.ignore-warnings.description'),
        default: false,
    }),
    manifest: sf_plugins_core_1.Flags.file({
        char: 'x',
        description: messages.getMessage('flags.manifest.description'),
        summary: messages.getMessage('flags.manifest.summary'),
        exclusive: exclusiveFlags.filter((f) => f !== 'manifest'),
        exists: true,
    }),
    metadata: sf_plugins_core_1.Flags.string({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        multiple: true,
        exclusive: exclusiveFlags.filter((f) => f !== 'metadata'),
    }),
    'metadata-dir': (0, flags_1.fileOrDirFlag)({
        summary: messages.getMessage('flags.metadata-dir.summary'),
        exclusive: exclusiveFlags.filter((f) => f !== 'metadata-dir'),
        exists: true,
    }),
    'single-package': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.single-package.summary'),
        dependsOn: ['metadata-dir'],
    }),
    'source-dir': sf_plugins_core_1.Flags.string({
        char: 'd',
        description: messages.getMessage('flags.source-dir.description'),
        summary: messages.getMessage('flags.source-dir.summary'),
        multiple: true,
        exclusive: exclusiveFlags.filter((f) => f !== 'source-dir'),
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'o',
        description: messages.getMessage('flags.target-org.description'),
        summary: messages.getMessage('flags.target-org.summary'),
        required: true,
    }),
    tests: sf_plugins_core_1.Flags.string({
        char: 't',
        multiple: true,
        summary: messages.getMessage('flags.tests.summary'),
        description: messages.getMessage('flags.tests.description'),
    }),
    'test-level': (0, flags_1.testLevelFlag)({
        default: types_1.TestLevel.NoTestRun,
        description: messages.getMessage('flags.test-level.description'),
        summary: messages.getMessage('flags.test-level.summary'),
        options: [types_1.TestLevel.NoTestRun, types_1.TestLevel.RunSpecifiedTests, types_1.TestLevel.RunLocalTests, types_1.TestLevel.RunAllTestsInOrg],
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        exclusive: ['concise'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        defaultValue: 33,
        helpValue: '<minutes>',
        min: 1,
        exclusive: ['async'],
    }),
    'purge-on-delete': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.purge-on-delete.summary'),
        dependsOn: ['manifest'],
        relationships: [{ type: 'some', flags: ['pre-destructive-changes', 'post-destructive-changes'] }],
    }),
    'pre-destructive-changes': sf_plugins_core_1.Flags.file({
        summary: messages.getMessage('flags.pre-destructive-changes.summary'),
        dependsOn: ['manifest'],
    }),
    'post-destructive-changes': sf_plugins_core_1.Flags.file({
        summary: messages.getMessage('flags.post-destructive-changes.summary'),
        dependsOn: ['manifest'],
    }),
    'coverage-formatters': sf_plugins_core_1.Flags.string({
        multiple: true,
        summary: messages.getMessage('flags.coverage-formatters.summary'),
        options: types_1.reportsFormatters,
    }),
    junit: sf_plugins_core_1.Flags.boolean({ summary: messages.getMessage('flags.junit.summary'), dependsOn: ['coverage-formatters'] }),
    'results-dir': sf_plugins_core_1.Flags.directory({
        dependsOn: ['coverage-formatters'],
        summary: messages.getMessage('flags.results-dir.summary'),
    }),
};
DeployMetadata.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_1.OrgConfigProperties.TARGET_ORG, core_1.OrgConfigProperties.ORG_API_VERSION, configMeta_1.ConfigVars.ORG_METADATA_REST_DEPLOY);
DeployMetadata.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_1.EnvironmentVariable.SF_TARGET_ORG, core_1.EnvironmentVariable.SF_USE_PROGRESS_BAR);
DeployMetadata.errorCodes = (0, sf_plugins_core_1.toHelpSection)('ERROR CODES', errorCodes_1.DEPLOY_STATUS_CODES_DESCRIPTIONS);
//# sourceMappingURL=start.js.map