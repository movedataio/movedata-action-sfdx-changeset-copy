"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Source = void 0;
const path_1 = require("path");
const fs = require("fs");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const ts_types_1 = require("@salesforce/ts-types");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const project_1 = require("../../../utils/project");
const sourceConvertResultFormatter_1 = require("../../../formatters/sourceConvertResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'convert.source');
class Source extends sf_plugins_core_1.SfCommand {
    async run() {
        this.flags = (await this.parse(Source)).flags;
        await this.convert();
        this.resolveSuccess();
        return this.formatResult();
    }
    async convert() {
        const paths = [];
        const { metadata, manifest } = this.flags;
        const sourcepath = this.flags['source-dir'];
        const rootdir = this.flags['root-dir'];
        if (sourcepath) {
            paths.push(...sourcepath);
        }
        // rootdir behaves exclusively to sourcepath, metadata, and manifest... to maintain backwards compatibility
        // we will check here, instead of adding the exclusive option to the flag definition so we don't break scripts
        if (rootdir && !sourcepath && !metadata && !manifest && typeof rootdir === 'string') {
            // only rootdir option passed
            paths.push(rootdir);
        }
        // no options passed, convert the default package (usually force-app)
        if (!sourcepath && !metadata && !manifest && !rootdir) {
            paths.push(this.project.getDefaultPackage().path);
        }
        this.componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({
            sourceapiversion: this.flags['api-version'] ?? (await (0, project_1.getSourceApiVersion)()),
            sourcepath: paths,
            manifest: manifest
                ? {
                    manifestPath: manifest,
                    directoryPaths: await (0, project_1.getPackageDirs)(),
                }
                : undefined,
            metadata: metadata
                ? {
                    metadataEntries: metadata,
                    directoryPaths: await (0, project_1.getPackageDirs)(),
                }
                : undefined,
        });
        const packageName = this.flags['package-name'];
        const outputDirectory = (0, path_1.resolve)(this.flags['output-dir']);
        const converter = new source_deploy_retrieve_1.MetadataConverter();
        this.convertResult = await converter.convert(this.componentSet, 'metadata', {
            type: 'directory',
            outputDirectory,
            packageName,
            genUniqueDir: false,
        });
        if (packageName && this.convertResult.packagePath) {
            // SDR will build an output path like /output/directory/packageName/package.xml
            // this was breaking from toolbelt, so to revert it we copy the directory up a level and delete the original
            fs.cpSync(this.convertResult.packagePath, outputDirectory, { recursive: true });
            fs.rmSync(this.convertResult.packagePath, { recursive: true });
            this.convertResult.packagePath = outputDirectory;
        }
    }
    resolveSuccess() {
        if (!(0, ts_types_1.getString)(this.convertResult, 'packagePath')) {
            process.exitCode = 1;
        }
    }
    formatResult() {
        const formatter = new sourceConvertResultFormatter_1.SourceConvertResultFormatter(this.convertResult);
        if (!this.jsonEnabled()) {
            formatter.display();
        }
        return formatter.getJson();
    }
}
exports.Source = Source;
Source.summary = messages.getMessage('summary');
Source.description = messages.getMessage('description');
Source.examples = messages.getMessages('examples');
Source.requiresProject = true;
Source.aliases = ['force:source:convert'];
Source.deprecateAliases = true;
Source.flags = {
    'api-version': { ...sf_plugins_core_1.orgApiVersionFlagWithDeprecations, summary: messages.getMessage('flags.api-version.summary') },
    loglevel: sf_plugins_core_1.loglevel,
    'root-dir': sf_plugins_core_1.Flags.directory({
        aliases: ['rootdir'],
        deprecateAliases: true,
        char: 'r',
        summary: messages.getMessage('flags.root-dir.summary'),
        exists: true,
    }),
    'output-dir': sf_plugins_core_1.Flags.directory({
        aliases: ['outputdir'],
        deprecateAliases: true,
        default: `metadataPackage_${Date.now()}`,
        char: 'd',
        summary: messages.getMessage('flags.output-dir.summary'),
    }),
    'package-name': sf_plugins_core_1.Flags.string({
        char: 'n',
        aliases: ['packagename'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.package-name.summary'),
    }),
    manifest: sf_plugins_core_1.Flags.file({
        char: 'x',
        summary: messages.getMessage('flags.manifest.summary'),
        description: messages.getMessage('flags.manifest.description'),
        exists: true,
    }),
    'source-dir': (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'p',
        aliases: ['sourcepath'],
        deprecateAliases: true,
        description: messages.getMessage('flags.source-dir.description'),
        summary: messages.getMessage('flags.source-dir.summary'),
        exclusive: ['manifest', 'metadata'],
    }),
    metadata: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'm',
        summary: messages.getMessage('flags.metadata.summary'),
        exclusive: ['manifest', 'sourcepath'],
    }),
};
//# sourceMappingURL=source.js.map