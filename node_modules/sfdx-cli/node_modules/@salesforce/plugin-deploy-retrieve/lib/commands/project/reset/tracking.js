"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetTracking = void 0;
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const source_tracking_1 = require("@salesforce/source-tracking");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'delete.tracking');
class ResetTracking extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ResetTracking);
        if (flags['no-prompt'] || (await this.confirm(chalk.dim(messages.getMessage('promptMessage'))))) {
            const sourceTracking = await source_tracking_1.SourceTracking.create({
                project: this.project,
                org: flags['target-org'],
            });
            const [remoteResets, localResets] = await Promise.all([
                sourceTracking.resetRemoteTracking(flags.revision),
                sourceTracking.resetLocalTracking(),
            ]);
            this.logSuccess(`Reset local tracking files${flags.revision ? ` to revision ${flags.revision}` : ''}.`);
            return {
                sourceMembersSynced: remoteResets,
                localPathsSynced: localResets.length,
            };
        }
        return {
            sourceMembersSynced: 0,
            localPathsSynced: 0,
        };
    }
}
exports.ResetTracking = ResetTracking;
ResetTracking.deprecateAliases = true;
ResetTracking.aliases = ['force:source:tracking:reset'];
ResetTracking.summary = messages.getMessage('resetSummary');
ResetTracking.description = messages.getMessage('resetDescription');
ResetTracking.requiresProject = true;
ResetTracking.examples = [];
ResetTracking.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    // eslint-disable-next-line sf-plugin/flag-min-max-default
    revision: sf_plugins_core_1.Flags.integer({
        char: 'r',
        summary: messages.getMessage('flags.revision.summary'),
        min: 0,
    }),
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'p',
        summary: messages.getMessage('flags.no-prompt.summary'),
        aliases: ['noprompt'],
        deprecateAliases: true,
    }),
};
//# sourceMappingURL=tracking.js.map