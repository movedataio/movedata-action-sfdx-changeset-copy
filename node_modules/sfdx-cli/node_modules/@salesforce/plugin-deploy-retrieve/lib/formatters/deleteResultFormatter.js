"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteResultFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const chalk = require("chalk");
const kit_1 = require("@salesforce/kit");
const output_1 = require("../utils/output");
class DeleteResultFormatter {
    constructor(result) {
        this.result = result;
    }
    /**
     * Get the JSON output from the DeployResult.
     *
     * @returns a JSON formatted result matching the provided type.
     */
    getJson() {
        return {
            ...this.result.response,
            deletedSource: this.result.getFileResponses() ?? [],
            outboundFiles: [],
            deployedSource: [],
            deletes: [Object.assign({}, this.result?.response)],
        };
    }
    display() {
        if ([0, 69].includes(process.exitCode ?? 0)) {
            const successes = [];
            const fileResponseSuccesses = new Map();
            if (this.result?.getFileResponses()?.length) {
                const fileResponses = [];
                this.result?.getFileResponses().map((f) => {
                    fileResponses.push(f);
                    fileResponseSuccesses.set(`${f.type}#${f.fullName}`, f);
                });
                (0, output_1.sortFileResponses)(fileResponses);
                (0, output_1.asRelativePaths)(fileResponses);
                successes.push(...fileResponses);
            }
            const deployMessages = (0, kit_1.ensureArray)(this.result?.response?.details?.componentSuccesses).filter((item) => !item.fileName.includes('package.xml'));
            if (deployMessages.length >= successes.length) {
                // if there's additional successes in the API response, find the success and add it to the output
                deployMessages.map((deployMessage) => {
                    if (!fileResponseSuccesses.has(`${deployMessage.componentType}#${deployMessage.fullName}`)) {
                        successes.push(Object.assign(deployMessage, {
                            type: deployMessage.componentType,
                        }));
                    }
                });
            }
            core_1.ux.log('');
            core_1.ux.styledHeader(chalk.blue('Deleted Source'));
            core_1.ux.table(successes.map((entry) => ({
                fullName: entry.fullName,
                type: entry.type,
                filePath: entry.filePath,
            })), {
                fullName: { header: 'FULL NAME' },
                type: { header: 'TYPE' },
                filePath: { header: 'PROJECT PATH' },
            });
        }
    }
}
exports.DeleteResultFormatter = DeleteResultFormatter;
//# sourceMappingURL=deleteResultFormatter.js.map