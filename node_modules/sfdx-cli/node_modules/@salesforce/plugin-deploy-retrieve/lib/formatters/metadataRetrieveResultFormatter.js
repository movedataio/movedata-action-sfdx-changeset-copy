"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataRetrieveResultFormatter = exports.retrieveMessages = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const output_1 = require("../utils/output");
core_2.Messages.importMessagesDirectory(__dirname);
exports.retrieveMessages = core_2.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'retrieve.metadata');
class MetadataRetrieveResultFormatter {
    constructor(result, opts) {
        this.result = result;
        this.opts = opts;
        this.zipFilePath = path.join(opts['target-metadata-dir'], opts['zip-file-name']);
        this.files = (0, output_1.sortFileResponses)((0, output_1.asRelativePaths)(this.result.getFileResponses() ?? []));
    }
    getJson() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { zipFile, ...responseWithoutZipFile } = this.result.response;
        return { ...responseWithoutZipFile, zipFilePath: this.zipFilePath, files: this.files };
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async display() {
        core_1.ux.log(exports.retrieveMessages.getMessage('info.WroteZipFile', [this.zipFilePath]));
        if (this.opts.unzip) {
            const extractPath = path.join(this.opts['target-metadata-dir'], path.parse(this.opts['zip-file-name']).name);
            core_1.ux.log(exports.retrieveMessages.getMessage('info.ExtractedZipFile', [this.zipFilePath, extractPath]));
        }
    }
}
exports.MetadataRetrieveResultFormatter = MetadataRetrieveResultFormatter;
//# sourceMappingURL=metadataRetrieveResultFormatter.js.map