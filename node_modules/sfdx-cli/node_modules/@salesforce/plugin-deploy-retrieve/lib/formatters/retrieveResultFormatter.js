"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieveResultFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const types_1 = require("../utils/types");
const output_1 = require("../utils/output");
class RetrieveResultFormatter {
    constructor(result, packageNames = [], deleteResponses = []) {
        this.result = result;
        this.packageNames = packageNames;
        this.files = (this.result.getFileResponses() ?? []).concat(deleteResponses);
    }
    getJson() {
        const { zipFile, ...responseWithoutZip } = this.result.response;
        return { ...responseWithoutZip, files: this.files };
    }
    async display() {
        this.displaySuccesses();
        await this.displayPackages();
    }
    displaySuccesses() {
        const successes = (0, output_1.sortFileResponses)((0, output_1.asRelativePaths)(this.files.filter(types_1.isSdrSuccess)));
        if (!successes.length)
            return;
        const columns = {
            state: { header: 'State' },
            fullName: { header: 'Name' },
            type: { header: 'Type' },
            filePath: { header: 'Path' },
        };
        const title = 'Retrieved Source';
        const options = { title: (0, output_1.tableHeader)(title) };
        core_1.ux.log();
        core_1.ux.table((0, output_1.getFileResponseSuccessProps)(successes), columns, options);
    }
    async displayPackages() {
        const packages = await this.getPackages();
        if (packages?.length) {
            const columns = {
                name: { header: 'Package Name' },
                fullPath: { header: 'Converted Location' },
            };
            const title = 'Retrieved Packages';
            const options = { title: (0, output_1.tableHeader)(title) };
            core_1.ux.log();
            core_1.ux.table(packages, columns, options);
        }
    }
    async getPackages() {
        const projectPath = await core_2.SfProject.resolveProjectPath();
        return this.packageNames.map((name) => {
            const packagePath = path.join(projectPath, name);
            return { name, path: packagePath, fullPath: path.resolve(packagePath) };
        });
    }
}
exports.RetrieveResultFormatter = RetrieveResultFormatter;
//# sourceMappingURL=retrieveResultFormatter.js.map