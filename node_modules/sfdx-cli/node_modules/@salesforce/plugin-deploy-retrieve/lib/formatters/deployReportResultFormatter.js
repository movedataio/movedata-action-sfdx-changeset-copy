"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployReportResultFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const output_1 = require("../utils/output");
const deployResultFormatter_1 = require("./deployResultFormatter");
class DeployReportResultFormatter extends deployResultFormatter_1.DeployResultFormatter {
    display() {
        core_1.ux.log(`${this.result.response.id}... ${this.result.response.status}`);
        const response = Object.entries(this.result.response).reduce((result, [key, value]) => {
            if (['number', 'boolean', 'string'].includes(typeof value)) {
                if (key === 'status') {
                    return result.concat({ key, value: colorStatus(value) });
                }
                else {
                    return result.concat({ key, value: value });
                }
            }
            return result;
        }, []);
        core_1.ux.log();
        core_1.ux.table(response, { key: {}, value: {} }, { title: (0, output_1.tableHeader)('Deploy Info') });
        const opts = Object.entries(this.flags).reduce((result, [key, value]) => {
            if (key === 'timestamp')
                return result;
            if (key === 'target-org')
                return result.concat({ key: 'target-org', value: this.flags['target-org']?.getUsername() });
            return result.concat({ key, value });
        }, []);
        core_1.ux.log();
        core_1.ux.table(opts, { key: {}, value: {} }, { title: (0, output_1.tableHeader)('Deploy Options') });
        super.display();
    }
}
exports.DeployReportResultFormatter = DeployReportResultFormatter;
function colorStatus(status) {
    if (status === source_deploy_retrieve_1.RequestStatus.Succeeded)
        return sf_plugins_core_1.StandardColors.success(status);
    if (status === source_deploy_retrieve_1.RequestStatus.Failed)
        return sf_plugins_core_1.StandardColors.error(status);
    else
        return sf_plugins_core_1.StandardColors.warning(status);
}
//# sourceMappingURL=deployReportResultFormatter.js.map