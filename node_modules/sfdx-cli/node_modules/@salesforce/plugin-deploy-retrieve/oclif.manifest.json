{
  "version": "1.8.12",
  "commands": {
    "deploy": {
      "id": "deploy",
      "summary": "Deploy a project interactively to any Salesforce environment.",
      "description": "This command must be run from within a project.\n\nThe command first analyzes your project, your active or logged-into environments, and local defaults to determine what to deploy and where to deploy it. The command then prompts you for information about this particular deployment and provides intelligent choices based on its analysis.\n\nFor example, if your local project contains a source directory with metadata files in source format, the command asks if you want to deploy that Salesforce app to an org. The command lists your connected orgs and asks which one you want to deploy to. The list of orgs starts with scratch orgs, ordered by expiration date with the most recently created one first, and then Dev Hub and production orgs ordered by name. If the command finds Apex tests, it asks if you want to run them and at which level.\n\nThe command stores your responses in the \"deploy-options.json\" file in your local project directory and uses them as defaults when you rerun the command. Specify --interactive to force the command to reprompt.\n\nUse this command for quick and simple deploys. For more complicated deployments, use the environment-specific commands, such as \"<%= config.bin %> project deploy start\", that provide additional flags.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Deploy a project and use stored values from a previous command run:\n<%= config.bin %> <%= command.id %>",
        "Reprompt for all deployment inputs:\n<%= config.bin %> <%= command.id %> --interactive"
      ],
      "deprecationOptions": {
        "version": "59.0",
        "message": "The top-level deploy command is deprecated. You should use `functions deploy` to deploy functions, and use `project deploy start` to deploy metadata to Salesforce orgs."
      },
      "flags": {
        "interactive": {
          "name": "interactive",
          "type": "boolean",
          "summary": "Force the CLI to prompt for all deployment inputs.",
          "allowNo": false
        }
      },
      "args": {}
    },
    "project:convert:mdapi": {
      "id": "project:convert:mdapi",
      "summary": "Convert metadata retrieved via Metadata API into the source format used in Salesforce DX projects.",
      "description": "To use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using this command.\n\nTo convert files from the source format back to the metadata format, run \"<%= config.bin %> project convert source\".\n\nTo convert multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:mdapi:convert"
      ],
      "examples": [
        "Convert metadata formatted files in the specified directory into source formatted files; writes converted files to your default package directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata",
        "Similar to previous example, but writes converted files to the specified output directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata --output-dir path/to/outputdir"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "root-dir": {
          "name": "root-dir",
          "type": "option",
          "char": "r",
          "summary": "Root directory that contains the Metadata API–formatted metadata.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "rootdir"
          ]
        },
        "output-dir": {
          "name": "output-dir",
          "type": "option",
          "char": "d",
          "summary": "Directory to store your files in after they’re converted to source format; can be an absolute or relative path.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "outputdir"
          ]
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "File path to manifest (package.xml) of metadata types to convert.",
          "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "deprecateAliases": true
        },
        "metadata-dir": {
          "name": "metadata-dir",
          "type": "option",
          "char": "p",
          "summary": "Root of directory or zip file of metadata formatted files to convert.",
          "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this flag, don’t specify --manifest or --metadata. If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata"
          ],
          "deprecateAliases": true,
          "aliases": [
            "metadatapath"
          ],
          "delimiter": ","
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to convert.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadatapath"
          ],
          "deprecateAliases": true,
          "delimiter": ","
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:convert:source": {
      "id": "project:convert:source",
      "summary": "Convert source-formatted files into metadata that you can deploy using Metadata API.",
      "description": "To convert source-formatted files into the metadata format, so that you can deploy them using Metadata API, run this command. Then deploy the metadata using \"<%= config.bin %> project deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"<%= config.bin %> project convert mdapi\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.\n\nTo convert multiple components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:convert"
      ],
      "examples": [
        "Convert source-formatted files in the specified directory into metadata-formatted files; writes converted files into a new directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source",
        "Similar to previous example, but writes converted files to the specified output directory and associates the files with the specified package:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source --output-dir path/to/outputdir --package-name 'My Package'"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "summary": "API Version to use in the generated project's manifest. By default, will use the version from sfdx-project.json",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "root-dir": {
          "name": "root-dir",
          "type": "option",
          "char": "r",
          "summary": "Source directory other than the default package to convert.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "rootdir"
          ]
        },
        "output-dir": {
          "name": "output-dir",
          "type": "option",
          "char": "d",
          "summary": "Output directory to store the Metadata API–formatted files in.",
          "multiple": false,
          "default": "metadataPackage_1681477975283",
          "deprecateAliases": true,
          "aliases": [
            "outputdir"
          ]
        },
        "package-name": {
          "name": "package-name",
          "type": "option",
          "char": "n",
          "summary": "Name of the package to associate with the metadata-formatted files.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "packagename"
          ]
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Path to the manifest (package.xml) file that specifies the metadata types to convert.",
          "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "p",
          "summary": "Paths to the local source files to convert.",
          "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata"
          ],
          "deprecateAliases": true,
          "aliases": [
            "sourcepath"
          ],
          "delimiter": ","
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to convert.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "sourcepath"
          ],
          "deprecateAliases": true,
          "delimiter": ","
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:delete:source": {
      "id": "project:delete:source",
      "summary": "Delete source from your project and from a non-source-tracked org.",
      "description": "Use this command to delete components from orgs that don’t have source tracking. To remove deleted items from orgs that have source tracking enabled, \"<%= config.bin %> project deploy start\".\n\nWhen you run this command, both the local source file and the metadata component in the org are deleted.\n\nTo delete multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:delete"
      ],
      "examples": [
        "Delete all local Apex source files and all Apex classes from the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
        "Delete a specific Apex class and a Profile that has a space in it from your default org; don't prompt for confirmation:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyFabulousApexClass --metadata \"Profile: My Profile\" --no-prompt",
        "Run the tests that aren’t in any managed packages as part of the deletion; if the delete succeeds, and the org has source-tracking enabled, update the source tracking information:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests --track-source",
        "Delete the Apex source files in a directory and the corresponding components from your default org:\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes",
        "Delete all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "check-only": {
          "name": "check-only",
          "type": "boolean",
          "char": "c",
          "summary": "Validate delete command but don't delete anything from the org or the local project.",
          "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nValidates the deleted metadata and runs all Apex tests, but prevents the deletion from being saved to the org.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --chec-konly parameter to test a deletion (validation). This kind of change isn’t supported for test deletions to avoid the risk of data loss or corruption. If a change that isn’t supported for test deletions is included in a deletion package, the test deletion fails and issues an error.\n\nIf your deletion package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deletion to another test Sandbox. A full deletion includes a validation of the changes as part of the deletion process.\n\nNote: A Metadata API deletion that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deletion with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to delete the Master-Detail field, or the deletion fails. During the deletion, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n\n    2. For a deletion that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deletion to succeed. However, a successful deletion permanently deletes any detail records in the Recycle Bin.",
          "allowNo": false,
          "deprecateAliases": true,
          "aliases": [
            "checkonly"
          ]
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to finish.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          },
          "deprecateAliases": true
        },
        "test-level": {
          "name": "test-level",
          "type": "option",
          "char": "l",
          "summary": "Deployment Apex testing level.",
          "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
          "multiple": false,
          "options": [
            "NoTestRun",
            "RunLocalTests",
            "RunAllTestsInOrg"
          ],
          "default": "NoTestRun",
          "deprecateAliases": true,
          "aliases": [
            "testlevel"
          ]
        },
        "no-prompt": {
          "name": "no-prompt",
          "type": "boolean",
          "char": "r",
          "summary": "Don't prompt for delete confirmation.",
          "allowNo": false,
          "deprecateAliases": true,
          "aliases": [
            "noprompt"
          ]
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata components to delete.",
          "description": "If you specify this parameter, don’t specify --source-dir.",
          "multiple": true,
          "deprecateAliases": true,
          "delimiter": ","
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "p",
          "summary": "Source file paths to delete.",
          "description": "The supplied paths can be a single file (in which case the operation is applied to only one file) or a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --metadata.",
          "multiple": true,
          "deprecateAliases": true,
          "aliases": [
            "sourcepath"
          ],
          "delimiter": ","
        },
        "track-source": {
          "name": "track-source",
          "type": "boolean",
          "char": "t",
          "summary": "If the delete succeeds, update the source tracking information.",
          "allowNo": false,
          "exclusive": [
            "check-only"
          ],
          "deprecateAliases": true,
          "aliases": [
            "tracksource"
          ]
        },
        "force-overwrite": {
          "name": "force-overwrite",
          "type": "boolean",
          "char": "f",
          "summary": "Ignore conflict warnings and overwrite changes to the org.",
          "allowNo": false,
          "dependsOn": [
            "track-source"
          ],
          "deprecateAliases": true,
          "aliases": [
            "forceoverwrite"
          ]
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Verbose output of the delete result.",
          "allowNo": false,
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "project:delete:tracking": {
      "id": "project:delete:tracking",
      "summary": "Delete all local source tracking information.",
      "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nDeletes all local source tracking information. When you next run 'project deploy preview', Salesforce CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:tracking:clear"
      ],
      "examples": [],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "no-prompt": {
          "name": "no-prompt",
          "type": "boolean",
          "char": "p",
          "summary": "Don't prompt for source tracking override confirmation.",
          "allowNo": false,
          "deprecateAliases": true,
          "aliases": [
            "noprompt"
          ]
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "project:deploy:cancel": {
      "id": "project:deploy:cancel",
      "summary": "Cancel a deploy operation.",
      "description": "Use this command to cancel a deploy operation that hasn't yet completed in the org. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:cancel"
      ],
      "examples": [
        "Cancel a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
        "Cancel the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "async": {
          "name": "async",
          "type": "boolean",
          "summary": "Run the command asynchronously.",
          "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
          "allowNo": false,
          "exclusive": [
            "wait"
          ],
          "deprecateAliases": true
        },
        "job-id": {
          "name": "job-id",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deploy operation you want to cancel.",
          "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
          "multiple": false,
          "deprecateAliases": true
        },
        "use-most-recent": {
          "name": "use-most-recent",
          "type": "boolean",
          "char": "r",
          "summary": "Use the job ID of the most recent deploy operation.",
          "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent deploy operations was more than 3 days ago, this flag won't find a job ID.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
          "helpValue": "<minutes>",
          "multiple": false,
          "exclusive": [
            "async"
          ],
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:deploy:preview": {
      "id": "project:deploy:preview",
      "summary": "Preview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.",
      "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"<%= config.bin %> project deploy start\" command. The table lists the metadata components that will be deployed and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be deployed because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command considers conflicts between the org and local. Some orgs, such as production orgs, never allow source tracking. Use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo preview the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:preview"
      ],
      "examples": [
        "NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"<%= config.bin %> project deploy start\" for more examples that you can adapt for previewing.",
        "Preview the deployment of source files in a directory, such as force-app, to your default org:\n<%= config.bin %> <%= command.id %>  --source-dir force-app",
        "Preview the deployment of all Apex classes to an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
        "Preview deployment of a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
        "Preview deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "ignore-conflicts": {
          "name": "ignore-conflicts",
          "type": "boolean",
          "char": "c",
          "summary": "Don't display conflicts in preview of the deployment.",
          "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Full file path for manifest (package.xml) of components to preview.",
          "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "exclusive": [
            "source-dir",
            "metadata"
          ],
          "deprecateAliases": true
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to preview.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "source-dir"
          ],
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "d",
          "summary": "Path to the local source files to preview.",
          "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata"
          ],
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "project:deploy:quick": {
      "id": "project:deploy:quick",
      "summary": "Quickly deploy a validated deployment to an org.",
      "description": "Before you run this command, first create a validated deployment with the \"<%= config.bin %> project deploy validate\" command, which returns a job ID. Validated deployments haven't been deployed to the org yet; you deploy them with this command. Either pass the job ID to this command or use the --use-most-recent flag to use the job ID of the most recently validated deployment. For the quick deploy to succeed, the associated validated deployment must also have succeeded.\n\nExecuting this quick deploy command takes less time than a standard deploy because it skips running Apex tests. These tests were previously run as part of the validation. Validating first and then running a quick deploy is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nThis command doesn't support source-tracking. The source you deploy overwrites the corresponding metadata in your org. This command doesn’t attempt to merge your source with the versions in your org.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:quick"
      ],
      "examples": [
        "Run a quick deploy to your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
        "Asynchronously run a quick deploy of the most recently validated deployment to an org with alias \"my-prod-org\":\n<%= config.bin %> <%= command.id %> --async --use-most-recent --target-org my-prod-org"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "async": {
          "name": "async",
          "type": "boolean",
          "summary": "Run the command asynchronously.",
          "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
          "allowNo": false,
          "exclusive": [
            "wait"
          ],
          "deprecateAliases": true
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Show concise output of the deploy result.",
          "allowNo": false,
          "exclusive": [
            "verbose"
          ],
          "deprecateAliases": true
        },
        "job-id": {
          "name": "job-id",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deployment you want to quick deploy.",
          "description": "The job ID is valid for 10 days from when you started the validation.",
          "multiple": false,
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "multiple": false,
          "deprecateAliases": true
        },
        "use-most-recent": {
          "name": "use-most-recent",
          "type": "boolean",
          "char": "r",
          "summary": "Use the job ID of the most recently validated deployment.",
          "description": "For performance reasons, this flag uses only job IDs that were validated in the past 3 days or less. If your most recent deployment validation was more than 3 days ago, this flag won't find a job ID.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Show verbose output of the deploy result.",
          "allowNo": false,
          "exclusive": [
            "concise"
          ],
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
          "helpValue": "<minutes>",
          "multiple": false,
          "exclusive": [
            "async"
          ],
          "default": {
            "quantity": 33,
            "unit": 0
          },
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "char": "a",
          "summary": "Target API version for the deploy.",
          "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
          "multiple": false,
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "errorCodes": {
        "header": "ERROR CODES",
        "body": [
          {
            "name": "Succeeded (0)",
            "description": "The deploy succeeded."
          },
          {
            "name": "Canceled (1)",
            "description": "The deploy was canceled."
          },
          {
            "name": "Failed (1)",
            "description": "The deploy failed."
          },
          {
            "name": "SucceededPartial (68)",
            "description": "The deploy partially succeeded."
          },
          {
            "name": "InProgress (69)",
            "description": "The deploy is in progress."
          },
          {
            "name": "Pending (69)",
            "description": "The deploy is pending."
          },
          {
            "name": "Canceling (69)",
            "description": "The deploy is being canceled."
          }
        ]
      },
      "hasDynamicHelp": true
    },
    "project:deploy:report": {
      "id": "project:deploy:report",
      "summary": "Check the status of a deploy operation.",
      "description": "Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:report"
      ],
      "examples": [
        "Check the status using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
        "Check the status of the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "job-id": {
          "name": "job-id",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deploy operation you want to check the status of.",
          "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
          "multiple": false,
          "deprecateAliases": true
        },
        "use-most-recent": {
          "name": "use-most-recent",
          "type": "boolean",
          "char": "r",
          "summary": "Use the job ID of the most recent deploy operation.",
          "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "coverage-formatters": {
          "name": "coverage-formatters",
          "type": "option",
          "summary": "Format of the code coverage results",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "deprecateAliases": true
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "results-dir": {
          "name": "results-dir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false,
          "dependsOn": [
            "junit",
            "coverage-formatters"
          ],
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:deploy:resume": {
      "id": "project:deploy:resume",
      "summary": "Resume watching a deploy operation.",
      "description": "Use this command to resume watching a deploy operation if the original command times out or you specified the --async flag. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations. This command doesn't resume the original operation itself, because the operation always continues after you've started it, regardless of whether you're watching it or not.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:resume"
      ],
      "examples": [
        "Resume watching a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
        "Resume watching the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Show concise output of the deploy operation result.",
          "allowNo": false,
          "exclusive": [
            "verbose"
          ],
          "deprecateAliases": true
        },
        "job-id": {
          "name": "job-id",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deploy operation you want to resume.",
          "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
          "multiple": false,
          "deprecateAliases": true
        },
        "use-most-recent": {
          "name": "use-most-recent",
          "type": "boolean",
          "char": "r",
          "summary": "Use the job ID of the most recent deploy operation.",
          "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Show verbose output of the deploy operation result.",
          "allowNo": false,
          "exclusive": [
            "concise"
          ],
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy operation, run this command again. To check the status of the deploy operation, run \"<%= config.bin %> project deploy report\".",
          "helpValue": "<minutes>",
          "multiple": false,
          "deprecateAliases": true
        },
        "coverage-formatters": {
          "name": "coverage-formatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "deprecateAliases": true
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "results-dir": {
          "name": "results-dir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false,
          "dependsOn": [
            "junit",
            "coverage-formatters"
          ],
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "envVariablesSection": {
        "header": "ENVIRONMENT VARIABLES",
        "body": [
          {
            "name": "SF_USE_PROGRESS_BAR",
            "description": "Set to false to disable the progress bar when running the metadata deploy command."
          }
        ]
      },
      "errorCodes": {
        "header": "ERROR CODES",
        "body": [
          {
            "name": "Succeeded (0)",
            "description": "The deploy succeeded."
          },
          {
            "name": "Canceled (1)",
            "description": "The deploy was canceled."
          },
          {
            "name": "Failed (1)",
            "description": "The deploy failed."
          },
          {
            "name": "SucceededPartial (68)",
            "description": "The deploy partially succeeded."
          },
          {
            "name": "InProgress (69)",
            "description": "The deploy is in progress."
          },
          {
            "name": "Pending (69)",
            "description": "The deploy is pending."
          },
          {
            "name": "Canceling (69)",
            "description": "The deploy is being canceled."
          }
        ]
      }
    },
    "project:deploy:start": {
      "id": "project:deploy:start",
      "summary": "Deploy metadata to an org from your local project.",
      "description": "You must run this command from within a project.\n\nMetadata components are deployed in source format by default. Deploy them in metadata format by specifying the --metadata-dir flag, which specifies the root directory or ZIP file that contains the metadata formatted files you want to deploy.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. You can also use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo deploy multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata"
      ],
      "examples": [
        "Deploy local changes not in the org; uses your default org:\n<%= config.bin %> <%= command.id %>",
        "Deploy the source files in a directory to an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %>  --source-dir path/to/source --target-org my-scratch",
        "Deploy a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects",
        "Deploy all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
        "Deploy a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
        "Deploy all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
        "Deploy all Apex classes and a profile that has a space in its name:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --metadata \"Profile:My Profile\"",
        "Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
        "Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "char": "a",
          "summary": "Target API version for the deploy.",
          "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
          "multiple": false,
          "deprecateAliases": true
        },
        "async": {
          "name": "async",
          "type": "boolean",
          "summary": "Run the command asynchronously.",
          "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
          "allowNo": false,
          "exclusive": [
            "wait"
          ],
          "deprecateAliases": true
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Show concise output of the deploy result.",
          "allowNo": false,
          "exclusive": [
            "verbose"
          ],
          "deprecateAliases": true
        },
        "dry-run": {
          "name": "dry-run",
          "type": "boolean",
          "summary": "Validate deploy and run Apex tests but don’t save to the org.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "ignore-conflicts": {
          "name": "ignore-conflicts",
          "type": "boolean",
          "char": "c",
          "summary": "Ignore conflicts and deploy local files, even if they overwrite changes in the org.",
          "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "ignore-errors": {
          "name": "ignore-errors",
          "type": "boolean",
          "char": "r",
          "summary": "Ignore any errors and don’t roll back deployment.",
          "description": "When deploying to a production org, keep this flag set to false (default value). When set to true, components without errors are deployed and components with errors are skipped, and could result in an inconsistent production org.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "ignore-warnings": {
          "name": "ignore-warnings",
          "type": "boolean",
          "char": "g",
          "summary": "Ignore warnings and allow a deployment to complete successfully.",
          "description": "If a warning occurs and this flag is set to true, the success status of the deployment is set to true. When this flag is set to false, success is set to false, and the warning is treated like an error.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Full file path for manifest (package.xml) of components to deploy.",
          "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "exclusive": [
            "source-dir",
            "metadata",
            "metadata-dir"
          ],
          "deprecateAliases": true
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to deploy.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "source-dir",
            "metadata-dir"
          ],
          "deprecateAliases": true
        },
        "metadata-dir": {
          "name": "metadata-dir",
          "type": "option",
          "summary": "Root of directory or zip file of metadata formatted files to deploy.",
          "multiple": false,
          "exclusive": [
            "manifest",
            "source-dir",
            "metadata"
          ],
          "deprecateAliases": true
        },
        "single-package": {
          "name": "single-package",
          "type": "boolean",
          "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
          "allowNo": false,
          "dependsOn": [
            "metadata-dir"
          ],
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "d",
          "summary": "Path to the local source files to deploy.",
          "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata",
            "metadata-dir"
          ],
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true
        },
        "tests": {
          "name": "tests",
          "type": "option",
          "char": "t",
          "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
          "description": "Separate multiple test names with commas, and enclose the entire flag value in double quotes if a test contains a space.",
          "multiple": true,
          "deprecateAliases": true
        },
        "test-level": {
          "name": "test-level",
          "type": "option",
          "char": "l",
          "summary": "Deployment Apex testing level.",
          "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\n  If you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".",
          "multiple": false,
          "options": [
            "NoTestRun",
            "RunSpecifiedTests",
            "RunLocalTests",
            "RunAllTestsInOrg"
          ],
          "default": "NoTestRun",
          "deprecateAliases": true
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Show verbose output of the deploy result.",
          "allowNo": false,
          "exclusive": [
            "concise"
          ],
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
          "helpValue": "<minutes>",
          "multiple": false,
          "exclusive": [
            "async"
          ],
          "deprecateAliases": true
        },
        "purge-on-delete": {
          "name": "purge-on-delete",
          "type": "boolean",
          "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
          "allowNo": false,
          "dependsOn": [
            "manifest"
          ],
          "relationships": [
            {
              "type": "some",
              "flags": [
                "pre-destructive-changes",
                "post-destructive-changes"
              ]
            }
          ],
          "deprecateAliases": true
        },
        "pre-destructive-changes": {
          "name": "pre-destructive-changes",
          "type": "option",
          "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy",
          "multiple": false,
          "dependsOn": [
            "manifest"
          ],
          "deprecateAliases": true
        },
        "post-destructive-changes": {
          "name": "post-destructive-changes",
          "type": "option",
          "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
          "multiple": false,
          "dependsOn": [
            "manifest"
          ],
          "deprecateAliases": true
        },
        "coverage-formatters": {
          "name": "coverage-formatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "deprecateAliases": true
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false,
          "dependsOn": [
            "coverage-formatters"
          ],
          "deprecateAliases": true
        },
        "results-dir": {
          "name": "results-dir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false,
          "dependsOn": [
            "coverage-formatters"
          ],
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "configurationVariablesSection": {
        "header": "CONFIGURATION VARIABLES",
        "body": [
          {
            "name": "target-org",
            "description": "Username or alias of the org that all commands run against by default. (sf only)"
          },
          {
            "name": "org-api-version",
            "description": "API version of your project. Default: API version of your Dev Hub org."
          }
        ]
      },
      "envVariablesSection": {
        "header": "ENVIRONMENT VARIABLES",
        "body": [
          {
            "name": "SF_TARGET_ORG",
            "description": "Username or alias of your default org. Overrides the target-org configuration variable."
          },
          {
            "name": "SF_USE_PROGRESS_BAR",
            "description": "Set to false to disable the progress bar when running the metadata deploy command."
          }
        ]
      },
      "errorCodes": {
        "header": "ERROR CODES",
        "body": [
          {
            "name": "Succeeded (0)",
            "description": "The deploy succeeded."
          },
          {
            "name": "Canceled (1)",
            "description": "The deploy was canceled."
          },
          {
            "name": "Failed (1)",
            "description": "The deploy failed."
          },
          {
            "name": "SucceededPartial (68)",
            "description": "The deploy partially succeeded."
          },
          {
            "name": "InProgress (69)",
            "description": "The deploy is in progress."
          },
          {
            "name": "Pending (69)",
            "description": "The deploy is pending."
          },
          {
            "name": "Canceling (69)",
            "description": "The deploy is being canceled."
          }
        ]
      },
      "hasDynamicHelp": true
    },
    "project:deploy:validate": {
      "id": "project:deploy:validate",
      "summary": "Validate a metadata deployment without actually executing it.",
      "description": "Use this command to verify whether a deployment will succeed without actually deploying the metadata to your org. This command is similar to \"<%= config.bin %> project deploy start\", except you're required to run Apex tests, and the command returns a job ID rather than executing the deployment. If the validation succeeds, then you pass this job ID to the \"<%= config.bin %> project deploy quick\" command to actually deploy the metadata. This quick deploy takes less time because it skips running Apex tests. The job ID is valid for 10 days from when you started the validation. Validating first is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nYou must run this command from within a project.\n\nThis command doesn't support source-tracking. When you quick deploy with the resulting job ID, the source you deploy overwrites the corresponding metadata in your org.\n\nTo validate the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "deploy:metadata:validate"
      ],
      "examples": [
        "NOTE: These examples focus on validating large deployments. See the help for \"<%= config.bin %> project deploy start\" for examples of deploying smaller sets of metadata which you can also use to validate.",
        "Validate the deployment of all source files in a directory to the default org:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source",
        "Asynchronously validate the deployment and run all tests in the org with alias \"my-prod-org\"; command immediately returns the job ID:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source --async --test-level RunAllTestsInOrg --target-org my-prod-org",
        "Validate the deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "char": "a",
          "summary": "Target API version for the validation.",
          "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
          "multiple": false,
          "deprecateAliases": true
        },
        "async": {
          "name": "async",
          "type": "boolean",
          "summary": "Run the command asynchronously.",
          "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
          "allowNo": false,
          "deprecateAliases": true
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Show concise output of the validation result.",
          "allowNo": false,
          "exclusive": [
            "verbose"
          ],
          "deprecateAliases": true
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Full file path for manifest (package.xml) of components to validate for deployment.",
          "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "deprecateAliases": true
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to validate for deployment.",
          "multiple": true,
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "d",
          "summary": "Path to the local source files to validate for deployment.",
          "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
          "multiple": true,
          "deprecateAliases": true
        },
        "metadata-dir": {
          "name": "metadata-dir",
          "type": "option",
          "summary": "Root of directory or zip file of metadata formatted files to deploy.",
          "multiple": false,
          "deprecateAliases": true
        },
        "single-package": {
          "name": "single-package",
          "type": "boolean",
          "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
          "allowNo": false,
          "dependsOn": [
            "metadata-dir"
          ],
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true
        },
        "tests": {
          "name": "tests",
          "type": "option",
          "char": "t",
          "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
          "multiple": true,
          "deprecateAliases": true
        },
        "test-level": {
          "name": "test-level",
          "type": "option",
          "char": "l",
          "summary": "Deployment Apex testing level.",
          "description": "Valid values are:\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".",
          "multiple": false,
          "options": [
            "RunAllTestsInOrg",
            "RunLocalTests",
            "RunSpecifiedTests"
          ],
          "default": "RunLocalTests",
          "deprecateAliases": true
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Show verbose output of the validation result.",
          "allowNo": false,
          "exclusive": [
            "concise"
          ],
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
          "helpValue": "<minutes>",
          "multiple": false,
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "configurationVariablesSection": {
        "header": "CONFIGURATION VARIABLES",
        "body": [
          {
            "name": "target-org",
            "description": "Username or alias of the org that all commands run against by default. (sf only)"
          },
          {
            "name": "org-api-version",
            "description": "API version of your project. Default: API version of your Dev Hub org."
          }
        ]
      },
      "envVariablesSection": {
        "header": "ENVIRONMENT VARIABLES",
        "body": [
          {
            "name": "SF_TARGET_ORG",
            "description": "Username or alias of your default org. Overrides the target-org configuration variable."
          },
          {
            "name": "SF_USE_PROGRESS_BAR",
            "description": "Set to false to disable the progress bar when running the metadata deploy command."
          }
        ]
      },
      "errorCodes": {
        "header": "ERROR CODES",
        "body": [
          {
            "name": "Succeeded (0)",
            "description": "The deploy succeeded."
          },
          {
            "name": "Canceled (1)",
            "description": "The deploy was canceled."
          },
          {
            "name": "Failed (1)",
            "description": "The deploy failed."
          },
          {
            "name": "SucceededPartial (68)",
            "description": "The deploy partially succeeded."
          },
          {
            "name": "InProgress (69)",
            "description": "The deploy is in progress."
          },
          {
            "name": "Pending (69)",
            "description": "The deploy is pending."
          },
          {
            "name": "Canceling (69)",
            "description": "The deploy is being canceled."
          }
        ]
      },
      "hasDynamicHelp": true
    },
    "project:generate:manifest": {
      "id": "project:generate:manifest",
      "summary": "Create a project manifest that lists the metadata components you want to deploy or retrieve.",
      "description": "Create a manifest from a list of metadata components (--metadata) or from one or more local directories that contain source files (--source-dir). You can specify either of these parameters, not both.\n\nUse --type to specify the type of manifest you want to create. The resulting manifest files have specific names, such as the standard package.xml or destructiveChanges.xml to delete metadata. Valid values for this parameter, and their respective file names, are:\n\n    * package : package.xml (default)\n    * pre : destructiveChangesPre.xml\n    * post : destructiveChangesPost.xml\n    * destroy : destructiveChanges.xml\n\nSee https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_deleting_files.htm for information about these destructive manifest files.\n\nUse --name to specify a custom name for the generated manifest if the pre-defined ones don’t suit your needs. You can specify either --type or --name, but not both.\n\nTo include multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --include-packages and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:manifest:create"
      ],
      "examples": [
        "Create a manifest for deploying or retrieving all Apex classes and custom objects:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass --metadata CustomObject",
        "Create a manifest for deleting the specified Apex class:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --type destroy",
        "Create a manifest for deploying or retrieving all the metadata components in the specified local directory; name the file myNewManifest.xml:\n$ <%= config.bin %> <%= command.id %> --source-dir force-app --name myNewManifest",
        "Create a manifest from the metadata components in the specified org and include metadata in any unlocked packages:\n$ <%= config.bin %> <%= command.id %> --from-org test@myorg.com --include-packages unlocked"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Names of metadata components to include in the manifest.",
          "multiple": true,
          "deprecateAliases": true,
          "delimiter": ","
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "p",
          "summary": "Paths to the local source files to include in the manifest.",
          "multiple": true,
          "deprecateAliases": true,
          "aliases": [
            "sourcepath"
          ],
          "delimiter": ","
        },
        "name": {
          "name": "name",
          "type": "option",
          "char": "n",
          "summary": "Name of a custom manifest file to create.",
          "multiple": false,
          "exclusive": [
            "type"
          ],
          "deprecateAliases": true,
          "aliases": [
            "manifestname"
          ]
        },
        "type": {
          "name": "type",
          "type": "option",
          "char": "t",
          "summary": "Type of manifest to create; the type determines the name of the created file.",
          "multiple": false,
          "options": [
            "pre",
            "post",
            "destroy",
            "package"
          ],
          "exclusive": [
            "name"
          ],
          "deprecateAliases": true,
          "aliases": [
            "manifesttype"
          ]
        },
        "include-packages": {
          "name": "include-packages",
          "type": "option",
          "char": "c",
          "summary": "Package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored.",
          "multiple": true,
          "options": [
            "managed",
            "unlocked"
          ],
          "dependsOn": [
            "from-org"
          ],
          "deprecateAliases": true,
          "aliases": [
            "includepackages"
          ],
          "delimiter": ","
        },
        "from-org": {
          "name": "from-org",
          "type": "option",
          "summary": "Username or alias of the org that contains the metadata components from which to build a manifest.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "fromorg"
          ]
        },
        "output-dir": {
          "name": "output-dir",
          "type": "option",
          "char": "d",
          "summary": "Directory to save the created manifest.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "outputdir",
            "o"
          ]
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:list:ignored": {
      "id": "project:list:ignored",
      "summary": "Check your local project package directories for forceignored files.",
      "description": "When deploying or retrieving metadata between your local project and an org, you can specify the source files you want to exclude with a .forceignore file. The .forceignore file structure mimics the .gitignore structure. Each line in .forceignore specifies a pattern that corresponds to one or more files. The files typically represent metadata components, but can be any files you want to exclude, such as LWC configuration JSON files or tests.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:ignored:list"
      ],
      "examples": [
        "List all the files in all package directories that are ignored:\n<%= config.bin %> <%= command.id %>",
        "List all the files in a specific directory that are ignored:\n<%= config.bin %> <%= command.id %> --source-dir force-app",
        "Check if a particular file is ignored:\n<%= config.bin %> <%= command.id %> --source-dir package.xml"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "p",
          "summary": "File or directory of files that the command checks for foreceignored files.",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "sourcepath"
          ]
        }
      },
      "args": {},
      "requiresProject": true
    },
    "project:reset:tracking": {
      "id": "project:reset:tracking",
      "summary": "Reset local and remote source tracking.",
      "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nResets local and remote source tracking so that Salesforce CLI no longer registers differences between your local files and those in the org. When you next run 'project deploy preview', Salesforce CLI returns no results, even though conflicts might actually exist. Salesforce CLI then resumes tracking new source changes as usual.\n\nUse the --revision parameter to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the 'data soql' command. For example:\n\n<%= config.bin %> data query --query \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" --use-tooling-api",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "force:source:tracking:reset"
      ],
      "examples": [],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "deprecateAliases": true,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          },
          "deprecateAliases": true
        },
        "revision": {
          "name": "revision",
          "type": "option",
          "char": "r",
          "summary": "SourceMember revision counter number to reset to.",
          "multiple": false,
          "deprecateAliases": true
        },
        "no-prompt": {
          "name": "no-prompt",
          "type": "boolean",
          "char": "p",
          "summary": "Don't prompt for source tracking override confirmation.",
          "allowNo": false,
          "deprecateAliases": true,
          "aliases": [
            "noprompt"
          ]
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "project:retrieve:preview": {
      "id": "project:retrieve:preview",
      "summary": "Preview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.",
      "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"<%= config.bin %> project retrieve start\" command. The table lists the metadata components that will be retrieved and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be retrieved because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command considers conflicts between the org and local. Some orgs, such as production orgs, never allow source tracking. Use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "retrieve:metadata:preview"
      ],
      "examples": [
        "Preview the retrieve of all changes from your default org:\n<%= config.bin %> <%= command.id %>",
        "Preview the retrieve when ignoring any conflicts from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --ignore-conflicts --target-org my-scratch"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "ignore-conflicts": {
          "name": "ignore-conflicts",
          "type": "boolean",
          "char": "c",
          "summary": "Don't display conflicts in the preview of the retrieval.",
          "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "project:retrieve:start": {
      "id": "project:retrieve:start",
      "summary": "Retrieve metadata from an org to your local project.",
      "description": "You must run this command from within a project.\n\nMetadata components are retrieved in source format by default. Retrieve them in metadata format by specifying the --target-metadata-dir flag, which retrieves the components into a ZIP file in the specified directory.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. You can also use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo retrieve multiple metadata components, either use multiple --metadata <name> flags or use a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.",
      "strict": true,
      "pluginName": "@salesforce/plugin-deploy-retrieve",
      "pluginAlias": "@salesforce/plugin-deploy-retrieve",
      "pluginType": "core",
      "aliases": [
        "retrieve:metadata"
      ],
      "examples": [
        "Retrieve remote changes from your default org:\n<%= config.bin %> <%= command.id %>",
        "Retrieve the source files in a directory from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --source-dir path/to/source --target-org my-scratch",
        "Retrieve a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects",
        "Retrieve all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
        "Retrieve a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
        "Retrieve all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
        "Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
        "Retrieve metadata from a package:\n<%= config.bin %> <%= command.id %> --package-name MyPackageName",
        "Retrieve metadata from multiple packages, one of which has a space in its name (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --package-name Package1 \"PackageName With Spaces\" Package3\n<%= config.bin %> <%= command.id %> --package-name Package1 --package-name \"PackageName With Spaces\" --package-name Package3",
        "Retrieve the metadata components listed in the force-app directory, but retrieve them in metadata format into a ZIP file in the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output",
        "Retrieve in metadata format and automatically extract the contents into the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output --unzip"
      ],
      "deprecateAliases": true,
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false,
          "deprecateAliases": true
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "char": "a",
          "summary": "Target API version for the retrieve.",
          "description": "Use this flag to override the default API version, which is the latest version supported the CLI, with the API version in your package.xml file.",
          "multiple": false,
          "deprecateAliases": true
        },
        "ignore-conflicts": {
          "name": "ignore-conflicts",
          "type": "boolean",
          "char": "c",
          "summary": "Ignore conflicts and retrieve and save files to your local filesystem, even if they overwrite your local changes.",
          "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
          "allowNo": false,
          "deprecateAliases": true
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "File path for the manifest (package.xml) that specifies the components to retrieve.",
          "description": "If you specify this parameter, don’t specify --metadata or --source-dir.",
          "multiple": false,
          "exclusive": [
            "metadata",
            "source-dir"
          ],
          "deprecateAliases": true
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Metadata component names to retrieve.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "source-dir"
          ],
          "deprecateAliases": true
        },
        "package-name": {
          "name": "package-name",
          "type": "option",
          "char": "n",
          "summary": "Package names to retrieve.",
          "multiple": true,
          "deprecateAliases": true
        },
        "single-package": {
          "name": "single-package",
          "type": "boolean",
          "summary": "Indicates that the zip file points to a directory structure for a single package.",
          "allowNo": false,
          "dependsOn": [
            "target-metadata-dir"
          ],
          "exclusive": [
            "ignore-conflicts"
          ],
          "deprecateAliases": true
        },
        "source-dir": {
          "name": "source-dir",
          "type": "option",
          "char": "d",
          "summary": "File paths for source to retrieve from the org.",
          "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its subdirectories).",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata"
          ],
          "deprecateAliases": true
        },
        "target-metadata-dir": {
          "name": "target-metadata-dir",
          "type": "option",
          "char": "t",
          "summary": "Directory that will contain the retrieved metadata format files or ZIP.",
          "multiple": false,
          "relationships": [
            {
              "type": "some",
              "flags": [
                "manifest",
                "metadata",
                "source-dir",
                "package-name"
              ]
            }
          ],
          "exclusive": [
            "ignore-conflicts"
          ],
          "deprecateAliases": true
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Login username or alias for the target org.",
          "description": "Overrides your default org.",
          "required": true,
          "multiple": false,
          "deprecateAliases": true
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          },
          "deprecateAliases": true
        },
        "unzip": {
          "name": "unzip",
          "type": "boolean",
          "char": "z",
          "summary": "Extract all files from the retrieved zip file.",
          "allowNo": false,
          "dependsOn": [
            "target-metadata-dir"
          ],
          "exclusive": [
            "ignore-conflicts"
          ],
          "deprecateAliases": true
        },
        "zip-file-name": {
          "name": "zip-file-name",
          "type": "option",
          "summary": "File name to use for the retrieved zip file.",
          "multiple": false,
          "dependsOn": [
            "target-metadata-dir"
          ],
          "exclusive": [
            "ignore-conflicts"
          ],
          "deprecateAliases": true
        }
      },
      "args": {},
      "requiresProject": true,
      "configurationVariablesSection": {
        "header": "CONFIGURATION VARIABLES",
        "body": [
          {
            "name": "target-org",
            "description": "Username or alias of the org that all commands run against by default. (sf only)"
          },
          {
            "name": "org-api-version",
            "description": "API version of your project. Default: API version of your Dev Hub org."
          }
        ]
      },
      "envVariablesSection": {
        "header": "ENVIRONMENT VARIABLES",
        "body": [
          {
            "name": "SF_TARGET_ORG",
            "description": "Username or alias of your default org. Overrides the target-org configuration variable."
          },
          {
            "name": "SF_USE_PROGRESS_BAR",
            "description": "Set to false to disable the progress bar when running the metadata deploy command."
          }
        ]
      },
      "hasDynamicHelp": true
    }
  }
}