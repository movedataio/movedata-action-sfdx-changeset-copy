import { Duration } from '@salesforce/kit';
import { SourceTracking } from '@salesforce/source-tracking';
import { Interfaces } from '@oclif/core';
import { DeployCommand } from '../../../deployCommand';
import { DeployCommandResult } from '../../../formatters/deployResultFormatter';
import { DeployCommandAsyncResult } from '../../../formatters/source/deployAsyncResultFormatter';
export type DeployCommandCombinedResult = DeployCommandResult | DeployCommandAsyncResult;
export declare class Deploy extends DeployCommand {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly state = "deprecated";
    static readonly deprecationOptions: {
        to: string;
        message: string;
    };
    static readonly requiresProject = true;
    static readonly flags: {
        'api-version': Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        loglevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        checkonly: Interfaces.BooleanFlag<boolean>;
        soapdeploy: Interfaces.BooleanFlag<boolean>;
        wait: Interfaces.OptionFlag<Duration, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        testlevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        runtests: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        ignoreerrors: Interfaces.BooleanFlag<boolean>;
        ignorewarnings: Interfaces.BooleanFlag<boolean>;
        purgeondelete: Interfaces.BooleanFlag<boolean>;
        validateddeployrequestid: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        verbose: Interfaces.BooleanFlag<boolean>;
        metadata: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        sourcepath: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        manifest: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        predestructivechanges: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        postdestructivechanges: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        tracksource: Interfaces.BooleanFlag<boolean>;
        forceoverwrite: Interfaces.BooleanFlag<boolean>;
        resultsdir: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        coverageformatters: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        junit: Interfaces.BooleanFlag<boolean>;
    };
    protected readonly lifecycleEventNames: string[];
    protected tracking: SourceTracking;
    private flags;
    private org;
    run(): Promise<DeployCommandCombinedResult>;
    protected preChecks(): Promise<void>;
    protected deploy(): Promise<void>;
    protected formatResult(): DeployCommandResult | DeployCommandAsyncResult;
    private maybeUpdateTracking;
}
