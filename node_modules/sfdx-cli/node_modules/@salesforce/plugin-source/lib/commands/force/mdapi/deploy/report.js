"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const mdDeployResultFormatter_1 = require("../../../../formatters/mdapi/mdDeployResultFormatter");
const deployCommand_1 = require("../../../../deployCommand");
const deployProgressBarFormatter_1 = require("../../../../formatters/deployProgressBarFormatter");
const deployProgressStatusFormatter_1 = require("../../../../formatters/deployProgressStatusFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'md.deployreport');
const replacement = 'project deploy report';
class Report extends deployCommand_1.DeployCommand {
    async run() {
        this.flags = (await this.parse(Report)).flags;
        this.org = this.flags['target-org'];
        await this.doReport();
        this.resolveSuccess();
        return this.formatResult();
    }
    async doReport() {
        if (this.flags.verbose) {
            this.log(messages.getMessage('usernameOutput', [this.org.getUsername()]));
        }
        const waitFlag = this.flags.wait;
        const waitDuration = waitFlag?.minutes === -1 ? kit_1.Duration.days(7) : waitFlag;
        this.isAsync = waitDuration.quantity === 0;
        const deployId = this.resolveDeployId(this.flags.jobid);
        this.resultsDir = this.resolveOutputDir(this.flags.coverageformatters, this.flags.junit, this.flags.resultsdir, deployId, false);
        if (this.isAsync) {
            this.deployResult = await this.report(this.org.getConnection(), deployId);
            return;
        }
        const deploy = this.createDeploy(this.org.getConnection(), deployId);
        if (!this.jsonEnabled()) {
            const progressFormatter = kit_1.env.getBoolean('SFDX_USE_PROGRESS_BAR', true)
                ? new deployProgressBarFormatter_1.DeployProgressBarFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }))
                : new deployProgressStatusFormatter_1.DeployProgressStatusFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }));
            progressFormatter.progress(deploy);
        }
        try {
            this.displayDeployId(deployId);
            this.deployResult = await deploy.pollStatus({ frequency: kit_1.Duration.milliseconds(500), timeout: waitDuration });
        }
        catch (error) {
            if (error instanceof Error && error.message.includes('The client has timed out')) {
                this.debug('mdapi:deploy:report polling timed out. Requesting status...');
                this.deployResult = await this.report(this.org.getConnection(), deployId);
            }
            else {
                throw error;
            }
        }
    }
    // this is different from the source:report uses report error codes (unfortunately)
    // See https://github.com/salesforcecli/toolbelt/blob/bfe361b0fb901b05c194a27a85849c689f4f6fea/src/lib/mdapi/mdapiDeployReportApi.ts#L413
    resolveSuccess() {
        const StatusCodeMap = new Map([
            [source_deploy_retrieve_1.RequestStatus.Succeeded, 0],
            [source_deploy_retrieve_1.RequestStatus.Canceled, 1],
            [source_deploy_retrieve_1.RequestStatus.Failed, 1],
            [source_deploy_retrieve_1.RequestStatus.SucceededPartial, 68],
            [source_deploy_retrieve_1.RequestStatus.InProgress, 69],
            [source_deploy_retrieve_1.RequestStatus.Pending, 69],
            [source_deploy_retrieve_1.RequestStatus.Canceling, 69],
        ]);
        this.setExitCode(StatusCodeMap.get(this.deployResult.response?.status) ?? 1);
    }
    formatResult() {
        const formatter = new mdDeployResultFormatter_1.MdDeployResultFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), {
            concise: this.flags.concise ?? false,
            verbose: this.flags.verbose ?? false,
            coverageOptions: (0, deployCommand_1.getCoverageFormattersOptions)(this.flags.coverageformatters),
            junitTestResults: this.flags.junit ?? false,
            resultsDir: this.resultsDir,
            testsRan: !!this.deployResult?.response?.numberTestsTotal,
        }, this.deployResult);
        this.maybeCreateRequestedReports({
            coverageformatters: this.flags.coverageformatters,
            junit: this.flags.junit,
            org: this.org,
        });
        // Only display results to console when JSON flag is unset.
        if (!this.jsonEnabled()) {
            formatter.display(true);
        }
        return formatter.getJson();
    }
}
exports.Report = Report;
Report.summary = messages.getMessage('summary');
Report.description = messages.getMessage('description');
Report.examples = messages.getMessages('examples');
Report.state = 'deprecated';
Report.deprecationOptions = {
    to: replacement,
    message: messages.getMessage('deprecation', ['project deploy start', replacement]),
};
Report.flags = {
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        defaultValue: 0,
        default: kit_1.Duration.minutes(0),
        min: -1,
        unit: 'minutes',
        summary: messages.getMessage('flags.wait.summary'),
    }),
    jobid: sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        length: 'both',
        description: messages.getMessage('flags.jobId.description'),
        summary: messages.getMessage('flags.jobId.summary'),
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
    }),
    resultsdir: sf_plugins_core_1.Flags.directory({
        summary: messages.getMessage('flags.resultsDir.summary'),
    }),
    coverageformatters: (0, sf_plugins_core_1.arrayWithDeprecation)({
        summary: messages.getMessage('flags.coverageFormatters.summary'),
        options: deployCommand_1.reportsFormatters,
        helpValue: deployCommand_1.reportsFormatters.join(','),
    }),
    junit: sf_plugins_core_1.Flags.boolean({ summary: messages.getMessage('flags.junit.summary') }),
};
//# sourceMappingURL=report.js.map