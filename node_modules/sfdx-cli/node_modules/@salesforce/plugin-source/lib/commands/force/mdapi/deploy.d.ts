import { Duration } from '@salesforce/kit';
import { Interfaces } from '@oclif/core';
import { DeployCommand } from '../../../deployCommand';
import { DeployCommandAsyncResult } from '../../../formatters/source/deployAsyncResultFormatter';
import { MdDeployResult } from '../../../formatters/mdapi/mdDeployResultFormatter';
export type DeployResult = MdDeployResult | DeployCommandAsyncResult;
export declare class Deploy extends DeployCommand {
    static readonly state = "deprecated";
    static readonly deprecationOptions: {
        to: string;
        message: string;
    };
    static readonly summary: string;
    static readonly examples: string[];
    static readonly flags: {
        'api-version': Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        loglevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        checkonly: Interfaces.BooleanFlag<boolean>;
        deploydir: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        wait: Interfaces.OptionFlag<Duration, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        testlevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        runtests: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        ignoreerrors: Interfaces.BooleanFlag<boolean>;
        ignorewarnings: Interfaces.BooleanFlag<boolean>;
        validateddeployrequestid: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        verbose: Interfaces.BooleanFlag<boolean>;
        zipfile: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        singlepackage: Interfaces.BooleanFlag<boolean>;
        soapdeploy: Interfaces.BooleanFlag<boolean>;
        purgeondelete: Interfaces.BooleanFlag<boolean>;
        concise: Interfaces.BooleanFlag<boolean>;
        resultsdir: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        coverageformatters: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        junit: Interfaces.BooleanFlag<boolean>;
    };
    private flags;
    private org;
    run(): Promise<DeployResult>;
    protected deploy(): Promise<void>;
    protected formatResult(): MdDeployResult | DeployCommandAsyncResult;
}
