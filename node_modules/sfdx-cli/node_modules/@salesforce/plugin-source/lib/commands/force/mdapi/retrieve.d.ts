import { Org } from '@salesforce/core';
import { Duration } from '@salesforce/kit';
import { RetrieveResult } from '@salesforce/source-deploy-retrieve';
import { Interfaces } from '@oclif/core';
import { SourceCommand } from '../../../sourceCommand';
import { RetrieveCommandAsyncResult, RetrieveCommandResult } from '../../../formatters/mdapi/retrieveResultFormatter';
export type RetrieveCommandCombinedResult = RetrieveCommandResult | RetrieveCommandAsyncResult;
export declare class Retrieve extends SourceCommand {
    static readonly state = "deprecated";
    static readonly deprecationOptions: {
        to: string;
        message: string;
    };
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly flags: {
        loglevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<Org, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        retrievetargetdir: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        unpackaged: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        sourcedir: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        packagenames: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        singlepackage: Interfaces.BooleanFlag<boolean>;
        zipfilename: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        unzip: Interfaces.BooleanFlag<boolean>;
        wait: Interfaces.OptionFlag<Duration, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        apiversion: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        verbose: Interfaces.BooleanFlag<boolean>;
    };
    protected retrieveResult: RetrieveResult;
    private sourceDir;
    private retrieveTargetDir;
    private zipFileName;
    private unzip;
    private wait;
    private isAsync;
    private mdapiRetrieve;
    private flags;
    private org;
    run(): Promise<RetrieveCommandCombinedResult>;
    protected retrieve(): Promise<void>;
    protected resolveSuccess(): void;
    protected formatResult(): RetrieveCommandResult | RetrieveCommandAsyncResult;
    private resolveProjectPath;
    private resolveRootDir;
    private resolveOutputDir;
    private resolveManifest;
}
