import { Duration } from '@salesforce/kit';
import { SfError } from '@salesforce/core';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { Interfaces } from '@oclif/core';
import { DeployCommand } from '../../../deployCommand';
import { PushResponse } from '../../../formatters/source/pushResultFormatter';
export default class Push extends DeployCommand {
    static readonly state = "deprecated";
    static readonly deprecationOptions: {
        to: string;
        message: string;
    };
    static description: string;
    static summary: string;
    static examples: string[];
    static requiresProject: boolean;
    static readonly flags: {
        'api-version': Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        loglevel: Interfaces.OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<import("@salesforce/core").Org, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        forceoverwrite: Interfaces.BooleanFlag<boolean>;
        wait: Interfaces.OptionFlag<Duration, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        ignorewarnings: Interfaces.BooleanFlag<boolean>;
        quiet: Interfaces.BooleanFlag<boolean>;
    };
    protected readonly lifecycleEventNames: string[];
    private deployResults;
    private tracking;
    private deletes;
    private flags;
    run(): Promise<PushResponse>;
    protected prechecks(): Promise<void>;
    protected deploy(): Promise<void>;
    protected updateTracking(): Promise<void>;
    protected resolveSuccess(): void;
    protected catch(error: Error | SfError | SfCommand.Error): Promise<SfCommand.Error>;
    protected formatResult(): PushResponse;
}
