"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deploy = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const deployCommand_1 = require("../../../deployCommand");
const mdDeployResultFormatter_1 = require("../../../formatters/mdapi/mdDeployResultFormatter");
const deployProgressBarFormatter_1 = require("../../../formatters/deployProgressBarFormatter");
const deployProgressStatusFormatter_1 = require("../../../formatters/deployProgressStatusFormatter");
const mdDeployAsyncResultFormatter_1 = require("../../../formatters/mdapi/mdDeployAsyncResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'md.deploy');
const deployMessages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'deployCommand');
const xorFlags = ['zipfile', 'validateddeployrequestid', 'deploydir'];
const replacement = 'project deploy start';
class Deploy extends deployCommand_1.DeployCommand {
    async run() {
        this.flags = (await this.parse(Deploy)).flags;
        this.org = await core_1.Org.create({ aliasOrUsername: this.flags['target-org'] });
        await this.deploy();
        this.resolveSuccess();
        return this.formatResult();
    }
    async deploy() {
        const waitFlag = this.flags.wait;
        const waitDuration = waitFlag.minutes === -1 ? kit_1.Duration.days(7) : waitFlag;
        this.isAsync = waitDuration.quantity === 0;
        this.isRest = this.isRestDeploy();
        if (this.isAsync && (this.flags.coverageformatters || this.flags.junit)) {
            this.warn(messages.getMessage('asyncCoverageJunitWarning'));
        }
        if (this.flags.validateddeployrequestid) {
            this.deployResult = await this.deployRecentValidation(this.flags.validateddeployrequestid, this.org.getConnection());
            return;
        }
        const deploymentOptions = this.flags.zipfile
            ? { zipPath: this.flags.zipfile }
            : { mdapiPath: this.flags.deploydir };
        const username = this.org.getUsername();
        // still here?  we need to deploy a zip file then
        const deploy = new source_deploy_retrieve_1.MetadataApiDeploy({
            usernameOrConnection: username,
            ...deploymentOptions,
            apiOptions: {
                // properties that will always have values
                ...{
                    purgeOnDelete: this.flags.purgeondelete ?? false,
                    ignoreWarnings: this.flags.ignorewarnings ?? false,
                    rollbackOnError: !this.flags.ignoreerrors ?? false,
                    checkOnly: this.flags.checkonly ?? false,
                    singlePackage: this.flags.singlepackage ?? false,
                    rest: this.isRest,
                },
                // if runTests is defaulted as 'NoTestRun' and deploying to prod, you'll get this error
                // https://github.com/forcedotcom/cli/issues/1542
                // add additional properties conditionally
                ...(this.flags.testlevel
                    ? {
                        testLevel: this.flags.testlevel,
                    }
                    : {}),
                ...(this.flags.runtests ? { runTests: this.flags.runtests } : {}),
            },
        });
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on('apiVersionDeploy', async (apiData) => {
            this.log(deployMessages.getMessage('apiVersionMsgBasic', [username, apiData.apiVersion, apiData.webService]));
        });
        await deploy.start();
        this.asyncDeployResult = { id: deploy.id };
        this.updateDeployId(deploy.id);
        if (!this.isAsync) {
            if (!this.jsonEnabled()) {
                const progressFormatter = kit_1.env.getBoolean('SFDX_USE_PROGRESS_BAR', true)
                    ? new deployProgressBarFormatter_1.DeployProgressBarFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }))
                    : new deployProgressStatusFormatter_1.DeployProgressStatusFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }));
                progressFormatter.progress(deploy);
            }
            this.displayDeployId(deploy.id);
            this.deployResult = await deploy.pollStatus({ frequency: kit_1.Duration.milliseconds(500), timeout: waitDuration });
        }
    }
    formatResult() {
        this.resultsDir = this.resolveOutputDir(this.flags.coverageformatters, this.flags.junit, this.flags.resultsdir, this.deployResult?.response?.id, true);
        const formatterOptions = {
            concise: this.flags.concise ?? false,
            verbose: this.flags.verbose ?? false,
            username: this.org.getUsername(),
            coverageOptions: (0, deployCommand_1.getCoverageFormattersOptions)(this.flags.coverageformatters),
            junitTestResults: this.flags.junit,
            resultsDir: this.resultsDir,
            testsRan: (this.flags.testlevel ?? 'NoTestRun') !== 'NoTestRun',
        };
        const formatter = this.isAsync
            ? new mdDeployAsyncResultFormatter_1.MdDeployAsyncResultFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), formatterOptions, this.asyncDeployResult)
            : new mdDeployResultFormatter_1.MdDeployResultFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), formatterOptions, this.deployResult);
        if (!this.isAsync) {
            this.maybeCreateRequestedReports({
                coverageformatters: this.flags.coverageformatters,
                junit: this.flags.junit,
                org: this.org,
            });
        }
        // Only display results to console when JSON flag is unset.
        if (!this.jsonEnabled()) {
            formatter.display();
        }
        return formatter.getJson();
    }
}
exports.Deploy = Deploy;
Deploy.state = 'deprecated';
Deploy.deprecationOptions = {
    to: replacement,
    message: messages.getMessage('deprecation', [replacement]),
};
Deploy.summary = messages.getMessage('summary');
Deploy.examples = messages.getMessages('examples');
Deploy.flags = {
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': deployCommand_1.targetUsernameFlag,
    checkonly: sf_plugins_core_1.Flags.boolean({
        char: 'c',
        description: messages.getMessage('flags.checkOnly.description'),
        summary: messages.getMessage('flags.checkOnly.summary'),
    }),
    deploydir: sf_plugins_core_1.Flags.directory({
        char: 'd',
        description: messages.getMessage('flags.deployDir.description'),
        summary: messages.getMessage('flags.deployDir.summary'),
        exactlyOne: xorFlags,
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        unit: 'minutes',
        description: messages.getMessage('flags.wait.description'),
        summary: messages.getMessage('flags.wait.summary'),
        default: kit_1.Duration.minutes(0),
        min: -1,
    }),
    testlevel: sf_plugins_core_1.Flags.string({
        char: 'l',
        description: messages.getMessage('flags.testLevel.description'),
        summary: messages.getMessage('flags.testLevel.summary'),
        options: ['NoTestRun', 'RunSpecifiedTests', 'RunLocalTests', 'RunAllTestsInOrg'],
    }),
    runtests: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'r',
        summary: messages.getMessage('flags.runTests.summary'),
    }),
    ignoreerrors: sf_plugins_core_1.Flags.boolean({
        // break this
        char: 'o',
        description: messages.getMessage('flags.ignoreErrors.description'),
        summary: messages.getMessage('flags.ignoreErrors.summary'),
    }),
    ignorewarnings: sf_plugins_core_1.Flags.boolean({
        char: 'g',
        description: messages.getMessage('flags.ignoreWarnings.description'),
        summary: messages.getMessage('flags.ignoreWarnings.summary'),
    }),
    validateddeployrequestid: sf_plugins_core_1.Flags.salesforceId({
        char: 'q',
        length: 'both',
        startsWith: '0Af',
        description: messages.getMessage('flags.validatedDeployRequestId.description'),
        summary: messages.getMessage('flags.validatedDeployRequestId.summary'),
        exactlyOne: xorFlags,
        exclusive: ['testlevel', 'runtests', 'checkonly'],
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        description: messages.getMessage('flags.verbose.description'),
        summary: messages.getMessage('flags.verbose.summary'),
    }),
    zipfile: sf_plugins_core_1.Flags.file({
        char: 'f',
        description: messages.getMessage('flags.zipFile.description'),
        summary: messages.getMessage('flags.zipFile.summary'),
        exactlyOne: xorFlags,
    }),
    singlepackage: sf_plugins_core_1.Flags.boolean({
        char: 's',
        description: messages.getMessage('flags.singlePackage.description'),
        summary: messages.getMessage('flags.singlePackage.summary'),
    }),
    soapdeploy: sf_plugins_core_1.Flags.boolean({
        description: messages.getMessage('flags.soapDeploy.description'),
        summary: messages.getMessage('flags.soapDeploy.summary'),
    }),
    purgeondelete: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.purgeOnDelete.summary'),
    }),
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
    }),
    resultsdir: sf_plugins_core_1.Flags.directory({
        summary: messages.getMessage('flags.resultsDir.summary'),
    }),
    coverageformatters: (0, sf_plugins_core_1.arrayWithDeprecation)({
        summary: messages.getMessage('flags.coverageFormatters.summary'),
        options: deployCommand_1.reportsFormatters,
        helpValue: deployCommand_1.reportsFormatters.join(','),
    }),
    junit: sf_plugins_core_1.Flags.boolean({ summary: messages.getMessage('flags.junit.summary') }),
};
//# sourceMappingURL=deploy.js.map