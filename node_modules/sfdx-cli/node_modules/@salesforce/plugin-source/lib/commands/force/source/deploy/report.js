"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const deployCommand_1 = require("../../../../deployCommand");
const deployReportResultFormatter_1 = require("../../../../formatters/deployReportResultFormatter");
const deployProgressBarFormatter_1 = require("../../../../formatters/deployProgressBarFormatter");
const deployProgressStatusFormatter_1 = require("../../../../formatters/deployProgressStatusFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'report');
const replacement = 'project deploy report';
class Report extends deployCommand_1.DeployCommand {
    async run() {
        this.flags = (await this.parse(Report)).flags;
        await this.doReport();
        this.resolveSuccess();
        return this.formatResult();
    }
    async doReport() {
        const deployId = this.resolveDeployId(this.flags.jobid);
        this.resultsDir = this.resolveOutputDir(this.flags.coverageformatters, this.flags.junit, this.flags.resultsdir, deployId, false);
        // If the verbose flag is set, AND the command was executed from within
        // an SFDX project, we need to build a ComponentSet so we have mapped
        // source file output.
        if (this.flags.verbose) {
            let sourcepath;
            try {
                this.project = await core_1.SfProject.resolve();
                sourcepath = this.project.getUniquePackageDirectories().map((pDir) => pDir.fullPath);
            }
            catch (err) {
                // ignore the error. this was just to get improved command output.
            }
            this.componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({ sourcepath });
        }
        const waitDuration = this.flags.wait;
        const deploy = this.createDeploy(this.flags['target-org'].getConnection(), deployId);
        if (!this.jsonEnabled()) {
            const progressFormatter = kit_1.env.getBoolean('SFDX_USE_PROGRESS_BAR', true)
                ? new deployProgressBarFormatter_1.DeployProgressBarFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }))
                : new deployProgressStatusFormatter_1.DeployProgressStatusFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }));
            progressFormatter.progress(deploy);
        }
        try {
            await deploy.pollStatus({ timeout: waitDuration });
        }
        catch (error) {
            if (error instanceof Error && error.message.includes('The client has timed out')) {
                this.debug('source:deploy:report polling timed out. Requesting status...');
            }
            else {
                throw error;
            }
        }
        finally {
            this.deployResult = await this.report(this.flags['target-org'].getConnection(), deployId);
        }
    }
    // No-op implementation since any DeployResult status would be a success.
    // The only time this command would report an error is if it failed
    // flag parsing or some error during the request, and those are captured
    // by the command framework.
    /* eslint-disable-next-line @typescript-eslint/no-empty-function, class-methods-use-this */
    resolveSuccess() { }
    formatResult() {
        const formatterOptions = {
            verbose: this.flags.verbose ?? false,
            coverageOptions: (0, deployCommand_1.getCoverageFormattersOptions)(this.flags.coverageformatters),
            junitTestResults: this.flags.junit,
            resultsDir: this.resultsDir,
            testsRan: !!this.deployResult?.response.numberTestsTotal,
        };
        const formatter = new deployReportResultFormatter_1.DeployReportResultFormatter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), formatterOptions, this.deployResult);
        this.maybeCreateRequestedReports({
            coverageformatters: this.flags.coverageformatters,
            junit: this.flags.junit,
            org: this.flags['target-org'],
        });
        if (!this.jsonEnabled()) {
            formatter.display();
        }
        return formatter.getJson();
    }
}
exports.Report = Report;
Report.description = messages.getMessage('description');
Report.summary = messages.getMessage('summary');
Report.examples = messages.getMessages('examples');
Report.state = 'deprecated';
Report.deprecationOptions = {
    to: replacement,
    message: messages.getMessage('deprecation', ['project deploy start', replacement]),
};
Report.flags = {
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        default: kit_1.Duration.minutes(deployCommand_1.DeployCommand.DEFAULT_WAIT_MINUTES),
        min: 1,
        description: messages.getMessage('flags.wait.description'),
        summary: messages.getMessage('flags.wait.summary'),
    }),
    jobid: sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        summary: messages.getMessage('flags.jobid.summary'),
        startsWith: '0Af',
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
    resultsdir: sf_plugins_core_1.Flags.directory({
        summary: messages.getMessage('flags.resultsDir.summary'),
    }),
    coverageformatters: (0, sf_plugins_core_1.arrayWithDeprecation)({
        summary: messages.getMessage('flags.coverageFormatters.summary'),
        options: deployCommand_1.reportsFormatters,
        helpValue: deployCommand_1.reportsFormatters.join(','),
    }),
    junit: sf_plugins_core_1.Flags.boolean({ summary: messages.getMessage('flags.junit.summary') }),
};
//# sourceMappingURL=report.js.map