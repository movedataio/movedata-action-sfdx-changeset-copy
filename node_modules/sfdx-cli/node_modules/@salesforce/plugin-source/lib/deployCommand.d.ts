import { AsyncResult, DeployResult, MetadataApiDeploy } from '@salesforce/source-deploy-retrieve';
import { Connection, Org, PollingClient } from '@salesforce/core';
import { Duration } from '@salesforce/kit';
import { CoverageReporterOptions } from '@salesforce/apex-node';
import { SourceCommand } from './sourceCommand';
export type TestLevel = 'NoTestRun' | 'RunSpecifiedTests' | 'RunLocalTests' | 'RunAllTestsInOrg';
export declare const reportsFormatters: string[];
export declare abstract class DeployCommand extends SourceCommand {
    protected displayDeployId: (id: string) => void;
    protected isRest: boolean;
    protected isAsync: boolean;
    protected asyncDeployResult: AsyncResult;
    protected deployResult: DeployResult;
    protected resultsDir: string;
    protected updateDeployId: (id: string) => void;
    /**
     * Request a report of an in-progress or completed deployment.
     *
     * @param id the Deploy ID of a deployment request
     * @returns DeployResult
     */
    protected report(conn: Connection, id?: string): Promise<DeployResult>;
    /**
     * Checks the response status to determine whether the deploy was successful.
     * Async deploys are successful unless an error is thrown, which resolves as
     * unsuccessful in oclif.
     */
    protected resolveSuccess(): void;
    /**
     * This method is here to provide a workaround to stubbing a constructor in the tests.
     *
     * @param id
     */
    protected createDeploy(conn: Connection, id?: string): MetadataApiDeploy;
    protected resolveDeployId(id?: string): string;
    protected isRestDeploy(soapdeploy?: boolean): boolean;
    protected poll(connection: Connection, deployId: string, options?: Partial<PollingClient.Options> & {
        wait: Duration;
    }): Promise<DeployResult>;
    protected deployRecentValidation(id: string, conn: Connection): Promise<DeployResult>;
    protected maybeCreateRequestedReports(options: {
        coverageformatters: string[];
        junit: boolean;
        org: Org;
    }): void;
    protected createJunitResults(deployResult: DeployResult, org: Org): void;
    protected resolveOutputDir(coverageFormatters: string[], junit: boolean, resultsDir: string, deployId: string, noThrow: boolean): string;
}
export declare const createCoverageReport: (deployResult: DeployResult, formatters: string[], sourceDir: string, resultsDir: string) => void;
export declare const getCoverageFormattersOptions: (formatters?: string[]) => CoverageReporterOptions;
export declare const targetUsernameFlag: import("@oclif/core/lib/interfaces").OptionFlag<string, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
export declare const resolveUsername: (usernameOrAlias?: string) => Promise<string>;
