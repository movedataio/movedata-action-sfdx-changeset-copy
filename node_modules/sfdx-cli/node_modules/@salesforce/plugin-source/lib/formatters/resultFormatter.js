"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable class-methods-use-this */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultFormatter = void 0;
const path = require("path");
const fs = require("fs");
const ts_types_1 = require("@salesforce/ts-types");
const chalk = require("chalk");
const apex_node_1 = require("@salesforce/apex-node");
class ResultFormatter {
    constructor(ux, options = {}) {
        this.ux = ux;
        this.options = options;
    }
    // Command success is determined by the command so it can set the
    // exit code on the process, which is done before formatting.
    isSuccess() {
        return [0, 69].includes((0, ts_types_1.getNumber)(process, 'exitCode', 0));
    }
    isVerbose() {
        return this.options.verbose ?? false;
    }
    isQuiet() {
        return this.options.quiet ?? false;
    }
    isConcise() {
        return this.options.concise ?? false;
    }
    // Sort by type > filePath > fullName
    sortFileResponses(fileResponses) {
        fileResponses.sort((i, j) => {
            if (i.type === j.type) {
                if (i.filePath === j.filePath) {
                    return i.fullName > j.fullName ? 1 : -1;
                }
                return i.filePath > j.filePath ? 1 : -1;
            }
            return i.type > j.type ? 1 : -1;
        });
    }
    // Sort by type > fileName > fullName
    // eslint-disable-next-line class-methods-use-this
    sortFileProperties(fileProperties) {
        fileProperties.sort((i, j) => {
            if (i.type === j.type) {
                if (i.fileName === j.fileName) {
                    return i.fullName > j.fullName ? 1 : -1;
                }
                return i.fileName > j.fileName ? 1 : -1;
            }
            return i.type > j.type ? 1 : -1;
        });
    }
    sortTestResults(results = []) {
        return results.sort((a, b) => {
            if (a.methodName === b.methodName) {
                return a.name > b.name ? 1 : -1;
            }
            return a.methodName > b.methodName ? 1 : -1;
        });
    }
    // Convert absolute paths to relative for better table output.
    asRelativePaths(fileResponses) {
        fileResponses.forEach((file) => {
            if (file.filePath) {
                file.filePath = path.relative(process.cwd(), file.filePath);
            }
        });
    }
    displayOutputFileLocations() {
        if (this.options.testsRan && this.options.verbose) {
            this.ux.log();
            this.ux.styledHeader(chalk.blue('Coverage or Junit Result Report Locations'));
        }
        if (this.options.testsRan && this.options.coverageOptions?.reportFormats?.length > 0) {
            this.ux.log(`Code Coverage formats, [${this.options.coverageOptions.reportFormats.join(',')}], written to ${path.join(this.options.resultsDir, 'coverage')}`);
        }
        if (this.options.testsRan && this.options.junitTestResults) {
            this.ux.log(`Junit results written to ${path.join(this.options.resultsDir, 'junit', 'junit.xml')}`);
        }
    }
    getCoverageFileInfo() {
        /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */
        const formatters = this.options.coverageOptions?.reportFormats;
        if (!formatters) {
            return undefined;
        }
        const reportOptions = this.options.coverageOptions?.reportOptions || apex_node_1.DefaultReportOptions;
        return Object.fromEntries(formatters.map((formatter) => {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
            const selectedReportOptions = reportOptions[formatter];
            const filename = selectedReportOptions['file'];
            const subdir = selectedReportOptions['subdir'];
            return [formatter, path.join(...[this.options.resultsDir, subdir, filename].filter((part) => part))];
        }));
    }
    getJunitFileInfo() {
        if (!this.options.resultsDir || !fs.statSync(this.options.resultsDir, { throwIfNoEntry: false })) {
            return undefined;
        }
        if (this.options.junitTestResults) {
            return path.join(this.options.resultsDir, 'junit', 'junit.xml');
        }
        return undefined;
    }
}
exports.ResultFormatter = ResultFormatter;
//# sourceMappingURL=resultFormatter.js.map