{
  "version": "2.10.2",
  "commands": {
    "force": {
      "id": "force",
      "summary": "Display the ASCII art logo for the Salesforce CLI",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "hidden": true,
      "aliases": [],
      "examples": [],
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        }
      },
      "args": {}
    },
    "force:mdapi:deploy": {
      "id": "force:mdapi:deploy",
      "summary": "Deploy metadata to an org using Metadata API.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Return a job ID you can use to check the deploy status:\n<%= config.bin %> <%= command.id %> --deploydir some/path",
        "Deploy and poll for 1000 minutes:\n<%= config.bin %> <%= command.id %> --deploydir some/path --wait 1000",
        "Deploy a ZIP file:\n<%= config.bin %> <%= command.id %> --zipfile stuff.zip",
        "Validate a deployment so the ID can be used for a quick deploy:\n<%= config.bin %> <%= command.id %> --deploydir some/path --wait 1000 --checkonly --testlevel RunAllTestsInOrg",
        "Quick deploy using a previously validated deployment:\n<%= config.bin %> <%= command.id %> --validateddeployrequestid MyValidatedId"
      ],
      "deprecationOptions": {
        "to": "project deploy start",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "u",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "checkonly": {
          "name": "checkonly",
          "type": "boolean",
          "char": "c",
          "summary": "Validates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.",
          "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\n\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\n\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n    2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
          "allowNo": false
        },
        "deploydir": {
          "name": "deploydir",
          "type": "option",
          "char": "d",
          "summary": "Root of directory tree that contains the files you want to deploy.",
          "description": "The root must contain a valid package.xml file describing the entities in the directory structure. Required to initiate a deployment if you don’t use --zipfile. If you specify both --zipfile and --deploydir, a zip file of the contents of the --deploydir directory is written to the location specified by --zipfile.",
          "multiple": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to finish; specify -1 to wait indefinitely.",
          "description": "The default is 0 (returns immediately).",
          "multiple": false,
          "default": {
            "quantity": 0,
            "unit": 0
          }
        },
        "testlevel": {
          "name": "testlevel",
          "type": "option",
          "char": "l",
          "summary": "Level of deployment tests to run.",
          "description": "Valid values are:\n\n    * NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n    * RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n    * RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n    * RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
          "multiple": false,
          "options": [
            "NoTestRun",
            "RunSpecifiedTests",
            "RunLocalTests",
            "RunAllTestsInOrg"
          ]
        },
        "runtests": {
          "name": "runtests",
          "type": "option",
          "char": "r",
          "summary": "Apex test classes to run if --testlevel is RunSpecifiedTests.",
          "multiple": true,
          "delimiter": ","
        },
        "ignoreerrors": {
          "name": "ignoreerrors",
          "type": "boolean",
          "char": "o",
          "summary": "Ignore any errors and don't roll back the deployment.",
          "description": "The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
          "allowNo": false
        },
        "ignorewarnings": {
          "name": "ignorewarnings",
          "type": "boolean",
          "char": "g",
          "summary": "Ignore any warnings and don't roll back the deployment.",
          "description": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.\nThis field is available in API version 18.0 and later. Prior to version 18.0, there was no distinction between warnings and errors. All problems were treated as errors and prevented a successful deployment.",
          "allowNo": false
        },
        "validateddeployrequestid": {
          "name": "validateddeployrequestid",
          "type": "option",
          "char": "q",
          "summary": "Request ID of the validated deployment to run a Quick Deploy.",
          "description": "Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run 'force mdapi deploy'. This flag sets the checkOnly='true' parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n\n    1. The components have been validated successfully for the target environment within the last 10 days.\n    2. As part of the validation, Apex tests in the target org have passed.\n    3. Code coverage requirements are met.\n       - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n       - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
          "multiple": false,
          "exclusive": [
            "testlevel",
            "runtests",
            "checkonly"
          ]
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Display verbose output of the deploy results.",
          "description": "Indicates that you want verbose output from the deploy operation.",
          "allowNo": false
        },
        "zipfile": {
          "name": "zipfile",
          "type": "option",
          "char": "f",
          "summary": "Path to .zip file of metadata to deploy.",
          "description": "You must indicate this option or --deploydir. If you specify both --zipfile and --deploydir, a .zip file of the contents of the deploy directory is created at the path specified for the .zip file.",
          "multiple": false
        },
        "singlepackage": {
          "name": "singlepackage",
          "type": "boolean",
          "char": "s",
          "summary": "Indicates that the zip file points to a directory structure for a single package.",
          "description": "By default, the CLI assumes the directory is structured for a set of packages.",
          "allowNo": false
        },
        "soapdeploy": {
          "name": "soapdeploy",
          "type": "boolean",
          "summary": "Deploy metadata with SOAP API instead of REST API.",
          "description": "Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39 MB compressed), Salesforce recommends REST API deployment. This flag provides backwards compatibility with API version 50.0 and earlier when deploy used SOAP API by default.",
          "allowNo": false
        },
        "purgeondelete": {
          "name": "purgeondelete",
          "type": "boolean",
          "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
          "allowNo": false
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Omit success messages for smaller JSON output.",
          "allowNo": false
        },
        "resultsdir": {
          "name": "resultsdir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false
        },
        "coverageformatters": {
          "name": "coverageformatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "delimiter": ","
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:mdapi:retrieve": {
      "id": "force:mdapi:retrieve",
      "summary": "Retrieve metadata from an org using Metadata API.",
      "description": "This command uses Metadata API to retrieve a .zip of XML files that represent metadata from the targeted org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Retrieve metadata in the default project directory into the target directory:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir",
        "Retrieve metadata defined in the specified manifest into the target directory:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --unpackaged package.xml",
        "Retrieve metadata defined by the specified directory, name the retrieved zipfile and extract all contents\n<%= config.bin %> <%= command.id %> --sourcedir path/to/apexClasses --retrievetargetdir path/to/retrieve/dir --unzip --zipfilename apexClasses.zip",
        "Enqueue a retrieve request but do not wait for the metadata to be retrieved:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --wait 0"
      ],
      "deprecationOptions": {
        "to": "project retrieve start",
        "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "retrievetargetdir": {
          "name": "retrievetargetdir",
          "type": "option",
          "char": "r",
          "summary": "Root of the directory structure where the retrieved .zip or metadata files are retrieved.",
          "required": true,
          "multiple": false
        },
        "unpackaged": {
          "name": "unpackaged",
          "type": "option",
          "char": "k",
          "summary": "Complete path for the manifest file that specifies the components to retrieve.",
          "multiple": false,
          "exclusive": [
            "sourcedir",
            "packagenames"
          ]
        },
        "sourcedir": {
          "name": "sourcedir",
          "type": "option",
          "char": "d",
          "summary": "Source directory to use instead of the default package directory specified in sfdx-project.json.",
          "multiple": false,
          "exclusive": [
            "unpackaged",
            "packagenames"
          ]
        },
        "packagenames": {
          "name": "packagenames",
          "type": "option",
          "char": "p",
          "summary": "Comma-separated list of packages to retrieve.",
          "multiple": true,
          "exclusive": [
            "sourcedir",
            "unpackaged"
          ],
          "delimiter": ","
        },
        "singlepackage": {
          "name": "singlepackage",
          "type": "boolean",
          "char": "s",
          "summary": "Specify that the zip file points to a directory structure for a single package.",
          "description": "By default, the CLI assumes the directory is structured for a set of packages.",
          "allowNo": false
        },
        "zipfilename": {
          "name": "zipfilename",
          "type": "option",
          "char": "n",
          "summary": "File name to use for the retrieved zip file.",
          "multiple": false
        },
        "unzip": {
          "name": "unzip",
          "type": "boolean",
          "char": "z",
          "summary": "Extract all files from the retrieved zip file.",
          "allowNo": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete.",
          "multiple": false,
          "default": {
            "quantity": 1440,
            "unit": 0
          }
        },
        "apiversion": {
          "name": "apiversion",
          "type": "option",
          "char": "a",
          "summary": "Target API version for the retrieve.",
          "description": "Use to override the default, which is the latest version supported by your CLI plug-in, with the version in your package.xml file.",
          "multiple": false
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Display verbose output of retrieve result.",
          "allowNo": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:source:deploy": {
      "id": "force:source:deploy",
      "summary": "Deploy source to an org.",
      "description": "Use this command to deploy source (metadata that’s in source format) to an org. To take advantage of change tracking with scratch orgs, use \"force source push\". To deploy metadata that’s in metadata format, use \"force mdapi deploy\".\n\nThe source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI. To check the status of the job, use \"force source deploy report\".\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.\n\nIf you use the --manifest, --predestructivechanges, or --postdestructivechanges parameters, run the \"force source manifest create\" command to easily generate the different types of manifest files.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Deploy the source files in a directory:\n<%= config.bin %> <%= command.id %> --sourcepath path/to/source",
        "Deploy a specific Apex class and the objects whose source is in a directory:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
        "Deploy source files in a comma-separated list that contains spaces:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
        "Deploy all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
        "Deploy a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
        "Deploy a specific Apex class and update source tracking files :\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --tracksource",
        "Deploy all custom objects and Apex classes:\n<%= config.bin %> <%= command.id %> --metadata \"CustomObject,ApexClass\"",
        "Deploy all Apex classes and two specific profiles (one of which has a space in its name):\n<%= config.bin %> <%= command.id %> --metadata \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
        "Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
        "Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --testlevel RunLocalTests",
        "Check whether a deployment would succeed (to prepare for Quick Deploy):\n<%= config.bin %> <%= command.id %> --metadata ApexClass --testlevel RunAllTestsInOrg -c",
        "Deploy an already validated deployment (Quick Deploy):\n<%= config.bin %> <%= command.id %> --validateddeployrequestid 0Af9A00000FTM6pSAH`",
        "Run a destructive operation before the deploy occurs:\n<%= config.bin %> <%= command.id %> --manifest package.xml --predestructivechanges destructiveChangesPre.xml",
        "Run a destructive operation after the deploy occurs:\n<%= config.bin %> <%= command.id %> --manifest package.xml --postdestructivechanges destructiveChangesPost.xml"
      ],
      "deprecationOptions": {
        "to": "project deploy start",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "u",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "checkonly": {
          "name": "checkonly",
          "type": "boolean",
          "char": "c",
          "summary": "Validate the deployed metadata and run all Apex tests, but don't save to the org.",
          "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\n\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\n\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n\n    2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.",
          "allowNo": false
        },
        "soapdeploy": {
          "name": "soapdeploy",
          "type": "boolean",
          "summary": "Deploy metadata with SOAP API instead of REST API.",
          "allowNo": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Wait time for command to finish in minutes.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "testlevel": {
          "name": "testlevel",
          "type": "option",
          "char": "l",
          "summary": "Deployment testing level.",
          "description": "Valid values are:\n\n    - NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n    - RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n    - RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n    - RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
          "multiple": false,
          "options": [
            "NoTestRun",
            "RunSpecifiedTests",
            "RunLocalTests",
            "RunAllTestsInOrg"
          ]
        },
        "runtests": {
          "name": "runtests",
          "type": "option",
          "char": "r",
          "summary": "Apex test classes to run if --testlevel RunSpecifiedTests.",
          "multiple": true,
          "delimiter": ","
        },
        "ignoreerrors": {
          "name": "ignoreerrors",
          "type": "boolean",
          "char": "o",
          "summary": "Ignore any errors and don't roll back deployment.",
          "description": "Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.",
          "allowNo": false
        },
        "ignorewarnings": {
          "name": "ignorewarnings",
          "type": "boolean",
          "char": "g",
          "summary": "Allow a deployment to complete successfully even if there are warnings.",
          "description": "If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.",
          "allowNo": false
        },
        "purgeondelete": {
          "name": "purgeondelete",
          "type": "boolean",
          "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
          "allowNo": false,
          "dependsOn": [
            "manifest"
          ]
        },
        "validateddeployrequestid": {
          "name": "validateddeployrequestid",
          "type": "option",
          "char": "q",
          "summary": "Deploy request ID of the validated deployment to run a Quick Deploy.",
          "description": "Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run \"force mdapi deploy\". This flag sets the checkOnly=\"true\" parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n\n    1. The components have been validated successfully for the target environment within the last 10 days.\n\n    2. As part of the validation, Apex tests in the target org have passed.\n\n    3. Code coverage requirements are met.\n\n        * If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n\n        * If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.",
          "multiple": false,
          "exclusive": [
            "checkonly",
            "testlevel",
            "runtests",
            "tracksource"
          ]
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Specify verbose output about the deploy result.",
          "allowNo": false
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Comma-separated list of metadata component names.",
          "description": "If you specify this parameter, don’t specify --manifest or --sourcepath.",
          "multiple": true,
          "delimiter": ","
        },
        "sourcepath": {
          "name": "sourcepath",
          "type": "option",
          "char": "p",
          "summary": "Comma-separated list of source file paths to deploy.",
          "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
          "multiple": true,
          "delimiter": ","
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Complete path for the manifest (package.xml) file that specifies the components to deploy.",
          "description": "All child components are included.\n\nIf you specify this parameter, don’t specify --metadata or --sourcepath.",
          "multiple": false
        },
        "predestructivechanges": {
          "name": "predestructivechanges",
          "type": "option",
          "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy.",
          "multiple": false,
          "dependsOn": [
            "manifest"
          ]
        },
        "postdestructivechanges": {
          "name": "postdestructivechanges",
          "type": "option",
          "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
          "multiple": false,
          "dependsOn": [
            "manifest"
          ]
        },
        "tracksource": {
          "name": "tracksource",
          "type": "boolean",
          "char": "t",
          "summary": "If the deploy succeeds, update source tracking information.",
          "description": "Doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges.",
          "allowNo": false,
          "exclusive": [
            "checkonly",
            "validateddeployrequestid"
          ]
        },
        "forceoverwrite": {
          "name": "forceoverwrite",
          "type": "boolean",
          "char": "f",
          "summary": "Ignore conflict warnings and overwrite changes to the org.",
          "allowNo": false,
          "dependsOn": [
            "tracksource"
          ]
        },
        "resultsdir": {
          "name": "resultsdir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false
        },
        "coverageformatters": {
          "name": "coverageformatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "delimiter": ","
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "force:source:pull": {
      "id": "force:source:pull",
      "summary": "Pull changed source from the org to your project to keep them in sync.",
      "description": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Pull source from your default org:\n<%= config.bin %> <%= command.id %>",
        "Pull source from the org with alias \"myscratch\"; ignore any conflicts and overwrite the local project files with org changes; wait for only 5 minutes:\n<%= config.bin %> <%= command.id %> --target-org myscratch --wait 5 --forceoverwrite"
      ],
      "deprecationOptions": {
        "to": "project retrieve start",
        "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Display additional details about the command results.",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "forceoverwrite": {
          "name": "forceoverwrite",
          "type": "boolean",
          "char": "f",
          "summary": "Ignore conflict warnings; changes in the org overwrite changes in the project.",
          "allowNo": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "force:source:push": {
      "id": "force:source:push",
      "summary": "Push changed source from your project to an org to keep them in sync.",
      "description": "If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Push source to your default org:\n<%= config.bin %> <%= command.id %>",
        "Push source to the org with alias \"myscratch\"; ignore any conflicts and overwrite with org with the local project changes; wait for only 5 minutes:\n<%= config.bin %> <%= command.id %> --target-org myscratch --wait 5 --forceoverwrite"
      ],
      "deprecationOptions": {
        "to": "project deploy start",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "forceoverwrite": {
          "name": "forceoverwrite",
          "type": "boolean",
          "char": "f",
          "summary": "Ignore conflict warnings and push source anyway; changes in the project overwrite changes in the org.",
          "allowNo": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "ignorewarnings": {
          "name": "ignorewarnings",
          "type": "boolean",
          "char": "g",
          "summary": "Deploy changes even if warnings are generated.",
          "allowNo": false
        },
        "quiet": {
          "name": "quiet",
          "type": "boolean",
          "summary": "Minimize JSON and sdtout output on success.",
          "allowNo": false
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "force:source:retrieve": {
      "id": "force:source:retrieve",
      "summary": "Retrieve source from an org.",
      "description": "Use this command to retrieve source (metadata that’s in source format) from an org. To take advantage of change tracking with scratch orgs, use \"force source pull\". To retrieve metadata that’s in metadata format, use \"force mdapi retrieve\".\n\nThe source you retrieve overwrites the corresponding source files in your local project. This command does not attempt to merge the source from your org with your local source files.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose it in one set of double quotes.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Retrieve the source files in a directory from your default org:\n<%= config.bin %> <%= command.id %> --sourcepath path/to/source",
        "Retrieve a specific Apex class and the objects whose source is in a directory from an org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/apex/classes/MyClass.cls,path/to/source/objects\" --target-org myscratch",
        "Retrieve source files in a comma-separated list that contains spaces:\n<%= config.bin %> <%= command.id %> --sourcepath \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
        "Retrieve all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
        "Retrieve a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
        "Retrieve a specific Apex class and update source tracking files:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --tracksource",
        "Retrieve all custom objects and Apex classes:\n<%= config.bin %> <%= command.id %> --metadata \"CustomObject,ApexClass\"",
        "Retrieve all Apex classes and two specific profiles (one of which has a space in its name):\n<%= config.bin %> <%= command.id %> --metadata \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
        "Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
        "Retrieve metadata from a package or multiple packages:\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName\n<%= config.bin %> <%= command.id %> --packagenames \"Package1, PackageName With Spaces, Package3\"",
        "Retrieve all metadata from a package and specific components that aren’t in the package, specify both -n | --packagenames and one other scoping parameter:\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --sourcepath path/to/apex/classes\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --metadata ApexClass:MyApexClass\n<%= config.bin %> <%= command.id %> --packagenames MyPackageName --manifest path/to/package.xml",
        "Retrieve source files to a given directory instead of the default package directory specified in sfdx-project.json:\n<%= config.bin %> <%= command.id %> --metadata \"StandardValueSet:TaskStatus\" --retrievetargetdir path/to/unpackaged"
      ],
      "deprecationOptions": {
        "to": "project retrieve start",
        "message": "We plan to deprecate this command in the future. Try using the \"project retrieve start\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "retrievetargetdir": {
          "name": "retrievetargetdir",
          "type": "option",
          "char": "r",
          "summary": "Root of the directory structure into which the source files are retrieved.",
          "description": "If the target directory matches one of the package directories in your sfdx-project.json file, the command fails.\n\nRunning the command multiple times with the same target adds new files and overwrites existing files.",
          "multiple": false,
          "exclusive": [
            "packagenames",
            "sourcepath"
          ]
        },
        "apiversion": {
          "name": "apiversion",
          "type": "option",
          "char": "a",
          "multiple": false
        },
        "sourcepath": {
          "name": "sourcepath",
          "type": "option",
          "char": "p",
          "summary": "Comma-separated list of file paths for source to retrieve from the org.",
          "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its sub-directories).\n\nIf you specify this parameter, don’t specify --manifest or --metadata.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "metadata"
          ],
          "delimiter": ","
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "manifest": {
          "name": "manifest",
          "type": "option",
          "char": "x",
          "summary": "Complete path for the manifest (package.xml) file that specifies the components to retrieve.",
          "description": "If you specify this parameter, don’t specify --metadata or --sourcepath.",
          "multiple": false,
          "exclusive": [
            "metadata",
            "sourcepath"
          ]
        },
        "metadata": {
          "name": "metadata",
          "type": "option",
          "char": "m",
          "summary": "Comma-separated list of names of metadata components to retrieve from the org.",
          "description": "If you specify this parameter, don’t specify --manifest or --sourcepath.",
          "multiple": true,
          "exclusive": [
            "manifest",
            "sourcepath"
          ],
          "delimiter": ","
        },
        "packagenames": {
          "name": "packagenames",
          "type": "option",
          "char": "n",
          "summary": "Comma-separated list of packages to retrieve.",
          "multiple": true,
          "delimiter": ","
        },
        "tracksource": {
          "name": "tracksource",
          "type": "boolean",
          "char": "t",
          "summary": "If the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org.",
          "allowNo": false
        },
        "forceoverwrite": {
          "name": "forceoverwrite",
          "type": "boolean",
          "char": "f",
          "summary": "Ignore conflict warnings and overwrite changes to the project.",
          "allowNo": false,
          "dependsOn": [
            "tracksource"
          ]
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Verbose output of retrieve result.",
          "allowNo": false
        }
      },
      "args": {},
      "requiresProject": true,
      "requiresUsername": true,
      "hasDynamicHelp": true
    },
    "force:source:status": {
      "id": "force:source:status",
      "summary": "List changes that have been made locally, in an org, or both.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "List changes that have been made locally but not in the org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --local --target-org myscratch",
        "List changes that have been made in your default org but aren't reflected in your local project:\n<%= config.bin %> <%= command.id %> --remote"
      ],
      "deprecationOptions": {
        "to": "project retrieve/deploy preview",
        "message": "We plan to deprecate this command in the future. Try using the \"project retrieve/deploy preview\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "local": {
          "name": "local",
          "type": "boolean",
          "char": "l",
          "summary": "List the changes that have been made locally.",
          "allowNo": false,
          "exclusive": [
            "remote"
          ]
        },
        "remote": {
          "name": "remote",
          "type": "boolean",
          "char": "r",
          "summary": "List the changes that have been made in the org.",
          "allowNo": false,
          "exclusive": [
            "local"
          ]
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Show only the changes that will be pushed or pulled; omits files that are forceignored.",
          "allowNo": false
        }
      },
      "args": {},
      "requiresProject": true,
      "hasDynamicHelp": true
    },
    "force:mdapi:deploy:cancel": {
      "id": "force:mdapi:deploy:cancel",
      "summary": "Cancel a metadata deployment.",
      "description": "Use this command to cancel a specified asynchronous metadata deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nCancels an asynchronous metadata deployment.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Cancel a deployment and wait two minutes:\n<%= config.bin %> <%= command.id %> --wait 2",
        "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID:\n<%= config.bin %> <%= command.id %> --jobid <jobid>"
      ],
      "deprecationOptions": {
        "to": "project deploy cancel",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "jobid": {
          "name": "jobid",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deployment you want to cancel; defaults to your most recent CLI deployment.",
          "multiple": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:mdapi:deploy:report": {
      "id": "force:mdapi:deploy:report",
      "summary": "Check the status of a metadata deployment.",
      "description": "Specify the job ID for the deploy you want to check. The job ID is returned by the \"force mdapi deploy\" command when run without the --wait parameter. You can also specify a wait time (minutes) to check for updates to the deploy status.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Check the status of the most recent deployment\n<%= config.bin %> <%= command.id %>",
        "Check the status of a deploy with job ID 1234 and wait for 10 minutes for the result:\n<%= config.bin %> <%= command.id %> --jobid 1234 --wait 10"
      ],
      "deprecationOptions": {
        "to": "project deploy report",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to finish; use -1 to poll indefinitely.",
          "multiple": false,
          "default": {
            "quantity": 0,
            "unit": 0
          }
        },
        "jobid": {
          "name": "jobid",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; defaults to your most recent CLI deployment.",
          "description": "The job ID (id field value for AsyncResult) of the deployment you want to check. The job ID is required if you haven’t previously deployed using Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job ID, we use the ID of the most recent metadata deployment.",
          "multiple": false
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Verbose output of deploy results.",
          "allowNo": false
        },
        "concise": {
          "name": "concise",
          "type": "boolean",
          "summary": "Omit success messages for smaller JSON output.",
          "allowNo": false
        },
        "resultsdir": {
          "name": "resultsdir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false
        },
        "coverageformatters": {
          "name": "coverageformatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "delimiter": ","
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:mdapi:retrieve:report": {
      "id": "force:mdapi:retrieve:report",
      "summary": "Check the status of a metadata retrieval.",
      "description": "Specify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the retrieve status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Poll until the metadata is retrieved (or timeout is reached) using data from the last force:mdapi:retrieve command:\n<%= config.bin %> <%= command.id %>",
        "Report the current status of the last retrieve command. If the retrieve is complete the zip file of metadata is written to the target directoy:\n<%= config.bin %> <%= command.id %> --retrievetargetdir path/to/retrieve/dir --wait 0",
        "Poll until the metadata is retrieved (or timeout is reached) using the provided RetrieveID, naming the zip file and extracting all contents:\n<%= config.bin %> <%= command.id %> -i retrieveId --retrievetargetdir path/to/retrieve/dir --unzip --zipfilename apexClasses.zip"
      ],
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "retrievetargetdir": {
          "name": "retrievetargetdir",
          "type": "option",
          "char": "r",
          "summary": "Root of the directory structure where the retrieved .zip or metadata files are retrieved.",
          "multiple": false
        },
        "jobid": {
          "name": "jobid",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the retrieve you want to check; defaults to your most recent CLI retrieval.",
          "description": "You must specify a --retrievetargetdir. Use with --wait to resume waiting.",
          "multiple": false
        },
        "zipfilename": {
          "name": "zipfilename",
          "type": "option",
          "char": "n",
          "summary": "File name to use for the retrieved zip file.",
          "multiple": false
        },
        "unzip": {
          "name": "unzip",
          "type": "boolean",
          "char": "z",
          "summary": "Extract all files from the retrieved zip file.",
          "allowNo": false
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete.",
          "multiple": false,
          "default": {
            "quantity": 1440,
            "unit": 0
          }
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Display verbose output of retrieve result.",
          "allowNo": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:source:deploy:cancel": {
      "id": "force:source:deploy:cancel",
      "summary": "Cancel a source deployment.",
      "description": "Use this command to cancel a specified asynchronous source deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI. To check the status of the job, use \"force source deploy report\".",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Cancel a deployment and wait two minutes:\n<%= config.bin %> <%= command.id %> --wait 2",
        "If you have multiple deployments in progress and want to cancel a specific one, specify the job ID:\n<%= config.bin %> <%= command.id %> --jobid <jobid>"
      ],
      "deprecationOptions": {
        "to": "project deploy cancel",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy cancel\" command instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "jobid": {
          "name": "jobid",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified.",
          "multiple": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    },
    "force:source:deploy:report": {
      "id": "force:source:deploy:report",
      "summary": "Check the status of a metadata deployment.",
      "description": "Specify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.",
      "strict": true,
      "pluginName": "@salesforce/plugin-source",
      "pluginAlias": "@salesforce/plugin-source",
      "pluginType": "core",
      "state": "deprecated",
      "aliases": [],
      "examples": [
        "Check the status of the most recent deployment on your default org:\n<%= config.bin %> <%= command.id %>",
        "Check the status using the job ID; output JUnit test results and format code coverage results in the specified format:\n<%= config.bin %> <%= command.id %> --jobid <id> --junit --coverageformatters cobertura"
      ],
      "deprecationOptions": {
        "to": "project deploy report",
        "message": "We plan to deprecate this command in the future. Try using the \"project deploy start\" and \"project deploy report\" pair instead."
      },
      "flags": {
        "json": {
          "name": "json",
          "type": "boolean",
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "allowNo": false
        },
        "api-version": {
          "name": "api-version",
          "type": "option",
          "description": "Override the api version used for api requests made by this command",
          "multiple": false,
          "aliases": [
            "apiversion"
          ]
        },
        "loglevel": {
          "name": "loglevel",
          "type": "option",
          "hidden": true,
          "multiple": false,
          "deprecated": {
            "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
          }
        },
        "target-org": {
          "name": "target-org",
          "type": "option",
          "char": "o",
          "summary": "Username or alias of the target org.",
          "required": true,
          "multiple": false,
          "aliases": [
            "targetusername",
            "u"
          ]
        },
        "wait": {
          "name": "wait",
          "type": "option",
          "char": "w",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
          "multiple": false,
          "default": {
            "quantity": 33,
            "unit": 0
          }
        },
        "jobid": {
          "name": "jobid",
          "type": "option",
          "char": "i",
          "summary": "Job ID of the deployment you want to check; defaults to your most recent CLI deployment.",
          "multiple": false
        },
        "verbose": {
          "name": "verbose",
          "type": "boolean",
          "summary": "Verbose output of deploy result.",
          "allowNo": false
        },
        "resultsdir": {
          "name": "resultsdir",
          "type": "option",
          "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
          "multiple": false
        },
        "coverageformatters": {
          "name": "coverageformatters",
          "type": "option",
          "summary": "Format of the code coverage results.",
          "helpValue": "clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary",
          "multiple": true,
          "options": [
            "clover",
            "cobertura",
            "html-spa",
            "html",
            "json",
            "json-summary",
            "lcovonly",
            "none",
            "teamcity",
            "text",
            "text-summary"
          ],
          "delimiter": ","
        },
        "junit": {
          "name": "junit",
          "type": "boolean",
          "summary": "Output JUnit test results.",
          "allowNo": false
        }
      },
      "args": {},
      "hasDynamicHelp": true
    }
  }
}