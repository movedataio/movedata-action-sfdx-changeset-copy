"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionCreateListCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const chalk = require("chalk");
const hubFlag_1 = require("../../../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create_list');
const packaging = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'packaging');
class PackageVersionCreateListCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionCreateListCommand);
        const connection = flags['target-dev-hub'].getConnection(flags['api-version']);
        const results = await packaging_1.PackageVersion.getPackageVersionCreateRequests(connection, {
            createdlastdays: flags['created-last-days'],
            status: flags.status,
            connection,
        });
        if (results.length === 0) {
            this.warn('No results found');
        }
        else {
            this.styledHeader(chalk.blue(`Package Version Create Requests  [${results.length}]`));
            const columnData = {
                Id: {},
                Status: {
                    header: messages.getMessage('status'),
                },
                Package2Id: {
                    header: messages.getMessage('package-id'),
                },
                Package2VersionId: {
                    header: messages.getMessage('packageVersionId'),
                },
                SubscriberPackageVersionId: {
                    header: messages.getMessage('subscriberPackageVersionId'),
                },
                Tag: {
                    header: messages.getMessage('tag'),
                },
                Branch: {
                    header: messages.getMessage('branch'),
                },
                CreatedDate: { header: 'Created Date' },
                CreatedBy: {
                    header: messages.getMessage('createdBy'),
                },
            };
            this.table(results, columnData, { 'no-truncate': true });
        }
        return results;
    }
}
exports.PackageVersionCreateListCommand = PackageVersionCreateListCommand;
PackageVersionCreateListCommand.summary = messages.getMessage('summary');
PackageVersionCreateListCommand.description = messages.getMessage('description');
PackageVersionCreateListCommand.examples = messages.getMessages('examples');
PackageVersionCreateListCommand.deprecateAliases = true;
PackageVersionCreateListCommand.aliases = ['force:package:beta:version:create:list', 'force:package:version:create:list'];
PackageVersionCreateListCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    'created-last-days': sf_plugins_core_1.Flags.integer({
        char: 'c',
        deprecateAliases: true,
        aliases: ['createdlastdays'],
        summary: packaging.getMessage('flags.created-last-days.summary'),
    }),
    status: sf_plugins_core_1.Flags.custom({
        options: ['Queued', 'InProgress', 'Success', 'Error'],
    })({
        char: 's',
        summary: messages.getMessage('flags.status.summary'),
    }),
};
//# sourceMappingURL=list.js.map