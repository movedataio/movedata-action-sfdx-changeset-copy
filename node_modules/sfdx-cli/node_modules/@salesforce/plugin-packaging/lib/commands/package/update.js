"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUpdateCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_update');
const packageCreate = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_create');
class PackageUpdateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageUpdateCommand);
        const pkg = new packaging_1.Package({
            packageAliasOrId: flags.package,
            connection: flags['target-dev-hub'].getConnection(flags['api-version']),
            project: this.project,
        });
        const result = await pkg.update({
            Id: pkg.getId(),
            Name: flags.name,
            Description: flags.description,
            PackageErrorUsername: flags['error-notification-username'],
        });
        this.logSuccess(messages.getMessage('success', [pkg.getId()]));
        return result;
    }
}
exports.PackageUpdateCommand = PackageUpdateCommand;
PackageUpdateCommand.summary = messages.getMessage('summary');
PackageUpdateCommand.description = messages.getMessage('description');
PackageUpdateCommand.examples = messages.getMessages('examples');
PackageUpdateCommand.deprecateAliases = true;
PackageUpdateCommand.aliases = ['force:package:beta:update', 'force:package:update'];
PackageUpdateCommand.requiresProject = true;
PackageUpdateCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
    }),
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
    }),
    description: sf_plugins_core_1.Flags.string({
        char: 'd',
        summary: messages.getMessage('flags.description.summary'),
    }),
    'error-notification-username': sf_plugins_core_1.Flags.string({
        // eslint-disable-next-line sf-plugin/dash-o
        char: 'o',
        deprecateAliases: true,
        aliases: ['errornotificationusername'],
        summary: packageCreate.getMessage('flags.error-notification-username.summary'),
        description: packageCreate.getMessage('flags.error-notification-username.description'),
    }),
};
//# sourceMappingURL=update.js.map