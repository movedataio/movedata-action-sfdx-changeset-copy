"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageInstalledListCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_installed_list');
class PackageInstalledListCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageInstalledListCommand);
        const result = await packaging_1.SubscriberPackageVersion.installedList(flags['target-org'].getConnection(flags['api-version']));
        const records = result.map((record) => ({
            Id: record.Id,
            SubscriberPackageId: record.SubscriberPackageId,
            SubscriberPackageName: record.SubscriberPackage?.Name,
            SubscriberPackageNamespace: record.SubscriberPackage?.NamespacePrefix,
            SubscriberPackageVersionId: record.SubscriberPackageVersion?.Id,
            SubscriberPackageVersionName: record.SubscriberPackageVersion?.Name,
            SubscriberPackageVersionNumber: `${record.SubscriberPackageVersion?.MajorVersion}.${record.SubscriberPackageVersion?.MinorVersion}.${record.SubscriberPackageVersion?.PatchVersion}.${record.SubscriberPackageVersion?.BuildNumber}`,
        }));
        const tableOptions = {
            Id: { header: 'ID' },
            SubscriberPackageId: { header: 'Package ID' },
            SubscriberPackageName: { header: 'Package Name' },
            SubscriberPackageNamespace: { header: 'Namespace' },
            SubscriberPackageVersionId: { header: 'Package Version ID' },
            SubscriberPackageVersionName: { header: 'Version Name' },
            SubscriberPackageVersionNumber: { header: 'Version' },
        };
        this.table(records, tableOptions, { 'no-truncate': true });
        return records;
    }
}
exports.PackageInstalledListCommand = PackageInstalledListCommand;
PackageInstalledListCommand.summary = messages.getMessage('summary');
PackageInstalledListCommand.examples = messages.getMessages('examples');
PackageInstalledListCommand.deprecateAliases = true;
PackageInstalledListCommand.aliases = ['force:package:beta:installed:list', 'force:package:installed:list'];
PackageInstalledListCommand.requiresProject = true;
PackageInstalledListCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
};
//# sourceMappingURL=list.js.map