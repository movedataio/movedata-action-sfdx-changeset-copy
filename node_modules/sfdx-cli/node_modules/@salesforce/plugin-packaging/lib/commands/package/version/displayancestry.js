"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionDisplayAncestryCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../../utils/hubFlag");
// Import i18n messages
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_displayancestry');
class PackageVersionDisplayAncestryCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionDisplayAncestryCommand);
        const packageAncestry = await packaging_1.Package.getAncestry(flags.package, this.project, flags['target-dev-hub'].getConnection(flags['api-version']));
        const jsonProducer = packageAncestry.getJsonProducer();
        if (flags['dot-code']) {
            const dotProducer = packageAncestry.getDotProducer();
            const dotCodeResult = dotProducer.produce();
            if (flags.json) {
                return dotCodeResult;
            }
            else {
                this.log(dotCodeResult);
            }
        }
        else {
            if (packageAncestry.requestedPackageId.startsWith('04t')) {
                const paths = packageAncestry.getLeafPathToRoot(packageAncestry.requestedPackageId);
                this.log(`${paths[0].map((p) => p.getVersion()).join(' -> ')} (root)`);
                this.log();
            }
            const treeProducer = packageAncestry.getTreeProducer(flags.verbose);
            if (!flags.json) {
                treeProducer.produce();
            }
        }
        return jsonProducer.produce();
    }
}
exports.PackageVersionDisplayAncestryCommand = PackageVersionDisplayAncestryCommand;
PackageVersionDisplayAncestryCommand.summary = messages.getMessage('summary');
PackageVersionDisplayAncestryCommand.examples = messages.getMessages('examples');
PackageVersionDisplayAncestryCommand.deprecateAliases = true;
PackageVersionDisplayAncestryCommand.aliases = [
    'force:package:beta:version:displayancestry',
    'force:package:version:displayancestry',
];
PackageVersionDisplayAncestryCommand.requiresProject = true;
PackageVersionDisplayAncestryCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        description: messages.getMessage('flags.package.description'),
        required: true,
    }),
    'dot-code': sf_plugins_core_1.Flags.boolean({
        aliases: ['dotcode'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.dot-code.summary'),
        description: messages.getMessage('flags.dot-code.description'),
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
};
//# sourceMappingURL=displayancestry.js.map