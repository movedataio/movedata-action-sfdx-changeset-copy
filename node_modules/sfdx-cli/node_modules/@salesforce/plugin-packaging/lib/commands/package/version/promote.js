"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionPromoteCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_promote');
class PackageVersionPromoteCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionPromoteCommand);
        const packageVersion = new packaging_1.PackageVersion({
            connection: flags['target-dev-hub'].getConnection(flags['api-version']),
            project: this.project,
            idOrAlias: flags.package,
        });
        const packageVersionData = await packageVersion.getData();
        if (!flags.json && !flags['no-prompt']) {
            // Warn when a Managed package has removed metadata
            if (packageVersionData.HasMetadataRemoved) {
                this.warn(messages.getMessage('hasMetadataRemovedWarning'));
            }
            // Prompt for confirmation
            if (!(await this.confirm(messages.getMessage('packageVersionPromoteConfirm', [flags.package])))) {
                throw messages.createError('promote-deny');
            }
        }
        try {
            const result = await packageVersion.promote();
            result.id = packageVersionData.SubscriberPackageVersionId;
            this.log(messages.getMessage('humanSuccess', [result.id]));
            return result;
        }
        catch (e) {
            const err = core_1.SfError.wrap(e);
            if (err.name === 'DUPLICATE_VALUE' && err.message.includes('previously released')) {
                err.message = messages.getMessage('previouslyReleasedMessage');
                err.actions = [messages.getMessage('previouslyReleasedAction', [this.config.bin, this.config.bin])];
            }
            throw err;
        }
    }
}
exports.PackageVersionPromoteCommand = PackageVersionPromoteCommand;
PackageVersionPromoteCommand.summary = messages.getMessage('summary');
PackageVersionPromoteCommand.description = messages.getMessage('description');
PackageVersionPromoteCommand.deprecateAliases = true;
PackageVersionPromoteCommand.aliases = ['force:package:beta:version:promote', 'force:package:version:promote'];
PackageVersionPromoteCommand.examples = messages.getMessages('examples');
PackageVersionPromoteCommand.requiresProject = true;
PackageVersionPromoteCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
    }),
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'n',
        deprecateAliases: true,
        aliases: ['noprompt'],
        summary: messages.getMessage('flags.no-prompt.summary'),
    }),
};
//# sourceMappingURL=promote.js.map