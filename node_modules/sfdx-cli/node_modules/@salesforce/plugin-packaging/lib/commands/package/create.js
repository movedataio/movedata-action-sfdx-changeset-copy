"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageCreateCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_create');
class PackageCreateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageCreateCommand);
        const options = {
            description: flags.description ?? '',
            errorNotificationUsername: flags['error-notification-username'],
            name: flags.name,
            noNamespace: flags['no-namespace'],
            orgDependent: flags['org-dependent'],
            packageType: flags['package-type'],
            path: flags.path,
        };
        const result = await packaging_1.Package.create(flags['target-dev-hub'].getConnection(flags['api-version']), this.project, options);
        this.display(result);
        return result;
    }
    display(result) {
        this.styledHeader('Ids');
        this.table([{ name: 'Package Id', value: result.Id }], { name: { header: 'NAME' }, value: { header: 'VALUE' } });
    }
}
exports.PackageCreateCommand = PackageCreateCommand;
PackageCreateCommand.summary = messages.getMessage('summary');
PackageCreateCommand.description = messages.getMessage('description');
PackageCreateCommand.examples = messages.getMessages('examples');
PackageCreateCommand.deprecateAliases = true;
PackageCreateCommand.aliases = ['force:package:beta:create', 'force:package:create'];
PackageCreateCommand.requiresProject = true;
PackageCreateCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        required: true,
    }),
    'package-type': sf_plugins_core_1.Flags.custom({
        options: ['Managed', 'Unlocked'],
    })({
        required: true,
        char: 't',
        deprecateAliases: true,
        aliases: ['packagetype'],
        summary: messages.getMessage('flags.package-type.summary'),
        description: messages.getMessage('flags.package-type.description'),
    }),
    description: sf_plugins_core_1.Flags.string({
        char: 'd',
        summary: messages.getMessage('flags.description.summary'),
    }),
    'no-namespace': sf_plugins_core_1.Flags.boolean({
        char: 'e',
        deprecateAliases: true,
        aliases: ['nonamespace'],
        summary: messages.getMessage('flags.no-namespace.summary'),
        description: messages.getMessage('flags.no-namespace.description'),
    }),
    path: sf_plugins_core_1.Flags.directory({
        char: 'r',
        summary: messages.getMessage('flags.path.summary'),
        required: true,
    }),
    'org-dependent': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['orgdependent'],
        summary: messages.getMessage('flags.org-dependent.summary'),
        description: messages.getMessage('flags.org-dependent.description'),
    }),
    'error-notification-username': sf_plugins_core_1.Flags.string({
        // eslint-disable-next-line sf-plugin/dash-o
        char: 'o',
        deprecateAliases: true,
        aliases: ['errornotificationusername'],
        summary: messages.getMessage('flags.error-notification-username.summary'),
        description: messages.getMessage('flags.error-notification-username.description'),
    }),
};
//# sourceMappingURL=create.js.map