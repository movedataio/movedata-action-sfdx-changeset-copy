"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageUninstallCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_uninstall');
class PackageUninstallCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageUninstallCommand);
        // no awaits in async method
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.uninstall, async (data) => {
            // Request still in progress.  Just print a console message and move on. Server will be polled again.
            this.log(`Waiting for the package uninstall request to get processed. Status = ${data.Status}`);
        });
        const packageVersion = new packaging_1.SubscriberPackageVersion({
            aliasOrId: flags.package,
            connection: flags['target-org'].getConnection(flags['api-version']),
            password: undefined,
        });
        const result = await packageVersion.uninstall(kit_1.Duration.seconds(30), flags.wait);
        const arg = result.Status === 'Success'
            ? [result.SubscriberPackageVersionId]
            : [this.config.bin, result.Id, flags['target-org'].getUsername()];
        this.log(messages.getMessage(result.Status, arg));
        return result;
    }
}
exports.PackageUninstallCommand = PackageUninstallCommand;
PackageUninstallCommand.summary = messages.getMessage('summary');
PackageUninstallCommand.description = messages.getMessage('description');
PackageUninstallCommand.examples = messages.getMessages('examples');
PackageUninstallCommand.deprecateAliases = true;
PackageUninstallCommand.aliases = ['force:package:beta:uninstall', 'force:package:uninstall'];
PackageUninstallCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        default: kit_1.Duration.minutes(0),
    }),
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
    }),
};
//# sourceMappingURL=uninstall.js.map