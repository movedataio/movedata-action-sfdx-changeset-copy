"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageConvert = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const kit_1 = require("@salesforce/kit");
const hubFlag_1 = require("../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_convert');
const pvcMessages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create');
class PackageConvert extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageConvert);
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.convert.progress, async (data) => {
            this.spinner.status = messages.getMessage('in-progress', [
                data.timeRemaining?.seconds,
                (0, kit_1.camelCaseToTitleCase)(data.packageVersionCreateRequestResult.Status),
            ]);
        });
        // eslint-disable-next-line @typescript-eslint/require-await
        core_1.Lifecycle.getInstance().on(packaging_1.PackageEvents.convert.success, async () => {
            this.spinner.status = 'SUCCESS';
        });
        this.spinner.start('Converting Package', 'Initializing');
        // initialize the project instance if in a project
        let project;
        try {
            project = await core_1.SfProject.resolve();
        }
        catch (err) {
            // ignore project is optional
        }
        this.spinner.status = 'Converting Package';
        const result = await packaging_1.Package.convert(flags.package, flags['target-dev-hub'].getConnection(flags['api-version']), {
            wait: flags.wait,
            installationKey: flags['installation-key'],
            definitionfile: flags['definition-file'],
            installationKeyBypass: flags['installation-key-bypass'],
            buildInstance: flags['build-instance'],
            seedMetadata: flags['seed-metadata'],
        }, project);
        switch (result.Status) {
            case 'Error':
                this.spinner.stop();
                throw new core_1.SfError(result.Error?.join('\n') ?? pvcMessages.getMessage('unknownError'));
            case 'Success':
                this.spinner.stop(pvcMessages.getMessage(result.Status, [
                    result.Id,
                    result.SubscriberPackageVersionId,
                    packaging_1.INSTALL_URL_BASE.toString(),
                    result.SubscriberPackageVersionId,
                    this.config.bin,
                ]));
                break;
            default:
                this.spinner.status = pvcMessages.getMessage('InProgress', [
                    this.config.bin,
                    (0, kit_1.camelCaseToTitleCase)(result.Status),
                    result.Id,
                ]);
        }
        this.spinner.stop();
        return result;
    }
}
exports.PackageConvert = PackageConvert;
PackageConvert.summary = messages.getMessage('summary');
PackageConvert.description = messages.getMessage('description');
PackageConvert.examples = messages.getMessages('examples');
PackageConvert.deprecateAliases = true;
PackageConvert.aliases = ['force:package:beta:convert', 'force:package:convert'];
PackageConvert.hidden = true;
PackageConvert.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    package: sf_plugins_core_1.Flags.salesforceId({
        length: 'both',
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
        startsWith: '033',
    }),
    'installation-key': sf_plugins_core_1.Flags.string({
        char: 'k',
        deprecateAliases: true,
        aliases: ['installationkey'],
        summary: messages.getMessage('flags.installation-key.summary'),
        description: messages.getMessage('flags.installation-key.description'),
        exactlyOne: ['installation-key', 'installation-key-bypass'],
    }),
    'definition-file': sf_plugins_core_1.Flags.file({
        char: 'f',
        deprecateAliases: true,
        aliases: ['definitionfile'],
        summary: messages.getMessage('flags.definition-file.summary'),
        description: messages.getMessage('flags.definition-file.description'),
    }),
    'installation-key-bypass': sf_plugins_core_1.Flags.boolean({
        char: 'x',
        deprecateAliases: true,
        aliases: ['installationkeybypass'],
        summary: messages.getMessage('flags.installation-key-bypass.summary'),
        description: messages.getMessage('flags.installation-key-bypass.description'),
        exactlyOne: ['installation-key', 'installation-key-bypass'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        default: kit_1.Duration.minutes(0),
    }),
    'build-instance': sf_plugins_core_1.Flags.string({
        char: 's',
        deprecateAliases: true,
        aliases: ['buildinstance'],
        summary: messages.getMessage('flags.build-instance.summary'),
        hidden: true,
    }),
    'seed-metadata': sf_plugins_core_1.Flags.directory({
        char: 'm',
        summary: messages.getMessage('flags.seed-metadata.summary'),
        description: messages.getMessage('flags.seed-metadata.description'),
    }),
};
//# sourceMappingURL=convert.js.map