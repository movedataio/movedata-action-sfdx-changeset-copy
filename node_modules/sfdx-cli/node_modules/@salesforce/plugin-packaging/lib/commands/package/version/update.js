"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionUpdateCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_update');
class PackageVersionUpdateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionUpdateCommand);
        const pv = new packaging_1.PackageVersion({
            connection: flags['target-dev-hub'].getConnection(flags['api-version']),
            project: this.project,
            idOrAlias: flags.package,
        });
        const result = await pv.update({
            VersionDescription: flags['version-description'],
            Branch: flags.branch,
            InstallKey: flags['installation-key'],
            VersionName: flags['version-name'],
            Tag: flags.tag,
        });
        this.logSuccess(messages.getMessage('success', [result.id]));
        return result;
    }
}
exports.PackageVersionUpdateCommand = PackageVersionUpdateCommand;
PackageVersionUpdateCommand.summary = messages.getMessage('summary');
PackageVersionUpdateCommand.description = messages.getMessage('description');
PackageVersionUpdateCommand.examples = messages.getMessages('examples');
PackageVersionUpdateCommand.deprecateAliases = true;
PackageVersionUpdateCommand.aliases = ['force:package:beta:version:update', 'force:package:version:update'];
PackageVersionUpdateCommand.requiresProject = true;
PackageVersionUpdateCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
    }),
    'version-name': sf_plugins_core_1.Flags.string({
        aliases: ['versionname'],
        deprecateAliases: true,
        char: 'a',
        summary: messages.getMessage('flags.version-name.summary'),
    }),
    'version-description': sf_plugins_core_1.Flags.string({
        aliases: ['versiondescription'],
        deprecateAliases: true,
        char: 'e',
        summary: messages.getMessage('flags.version-description.summary'),
    }),
    branch: sf_plugins_core_1.Flags.string({
        char: 'b',
        summary: messages.getMessage('flags.branch.summary'),
    }),
    tag: sf_plugins_core_1.Flags.string({
        char: 't',
        summary: messages.getMessage('flags.tag.summary'),
    }),
    'installation-key': sf_plugins_core_1.Flags.string({
        aliases: ['installationkey'],
        deprecateAliases: true,
        char: 'k',
        summary: messages.getMessage('flags.installation-key.summary'),
    }),
};
//# sourceMappingURL=update.js.map