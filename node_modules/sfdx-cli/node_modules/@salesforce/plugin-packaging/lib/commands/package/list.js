"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageListCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const chalk = require("chalk");
const hubFlag_1 = require("../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_list');
class PackageListCommand extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.results = [];
    }
    async run() {
        const { flags } = await this.parse(PackageListCommand);
        const queryResult = await packaging_1.Package.list(flags['target-dev-hub'].getConnection(flags['api-version']));
        this.mapRecordsToResults(queryResult);
        this.displayResults(flags.verbose);
        return this.results;
    }
    mapRecordsToResults(records) {
        if (records && records.length > 0) {
            this.results = records
                .filter((record) => record.IsDeprecated === false)
                .map(({ Id, SubscriberPackageId, Name, Description, NamespacePrefix, ContainerOptions, ConvertedFromPackageId, IsOrgDependent, PackageErrorUsername, CreatedById, }) => ({
                Id,
                SubscriberPackageId,
                Name,
                Description,
                NamespacePrefix,
                ContainerOptions,
                ConvertedFromPackageId,
                Alias: this.project.getAliasesFromPackageId(Id).join(),
                IsOrgDependent: ContainerOptions === 'Managed' ? 'N/A' : IsOrgDependent ? 'Yes' : 'No',
                PackageErrorUsername,
                CreatedBy: CreatedById,
            }));
        }
    }
    displayResults(verbose = false) {
        this.styledHeader(chalk.blue(`Packages [${this.results.length}]`));
        const columns = {
            NamespacePrefix: { header: messages.getMessage('namespace') },
            Name: { header: messages.getMessage('name') },
            Id: { header: messages.getMessage('id') },
            Alias: { header: messages.getMessage('alias') },
            Description: { header: messages.getMessage('description') },
            ContainerOptions: {
                header: messages.getMessage('package-type'),
            },
        };
        if (verbose) {
            Object.assign(columns, {
                SubscriberPackageId: { header: messages.getMessage('package-id') },
                ConvertedFromPackageId: { header: messages.getMessage('convertedFromPackageId') },
                IsOrgDependent: { header: messages.getMessage('isOrgDependent') },
                PackageErrorUsername: { header: messages.getMessage('error-notification-username') },
                CreatedBy: {
                    header: messages.getMessage('createdBy'),
                },
            });
        }
        this.table(this.results, columns);
    }
}
exports.PackageListCommand = PackageListCommand;
PackageListCommand.summary = messages.getMessage('summary');
PackageListCommand.description = messages.getMessage('description');
PackageListCommand.examples = messages.getMessages('examples');
PackageListCommand.requiresProject = true;
PackageListCommand.deprecateAliases = true;
PackageListCommand.aliases = ['force:package:beta:list', 'force:package:list'];
PackageListCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
    }),
};
//# sourceMappingURL=list.js.map