"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionCreateCommand = void 0;
const os = require("os");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../../utils/hubFlag");
var Package2VersionStatus = packaging_1.PackagingSObjects.Package2VersionStatus;
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_create');
class PackageVersionCreateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionCreateCommand);
        if (flags.path && flags.package) {
            this.warn('Starting in v59.0 or later, specifying both the --package and --path flag will no longer be supported. Only one is required.');
            void core_1.Lifecycle.getInstance().emitTelemetry({ Name: 'PathAndPackageFlag' });
        }
        if (flags.skipvalidation) {
            this.warn(messages.getMessage('skip-validation-warning'));
        }
        const frequency = flags.wait && flags.skipvalidation ? kit_1.Duration.seconds(5) : kit_1.Duration.seconds(30);
        core_1.Lifecycle.getInstance().on(packaging_1.PackageVersionEvents.create.progress, 
        // no async methods
        // eslint-disable-next-line @typescript-eslint/require-await
        async (data) => {
            if (data.Status !== Package2VersionStatus.success && data.Status !== Package2VersionStatus.error) {
                const status = messages.getMessage('packageVersionCreateWaitingStatus', [
                    data.remainingWaitTime.minutes,
                    data.Status,
                ]);
                if (flags.verbose) {
                    this.log(status);
                }
                else {
                    this.spinner.status = status;
                }
            }
        });
        core_1.Lifecycle.getInstance().on(packaging_1.PackageVersionEvents.create['preserve-files'], 
        // eslint-disable-next-line @typescript-eslint/require-await
        async (data) => {
            this.log(messages.getMessage('tempFileLocation', [data.location]));
        });
        const startMsg = messages.getMessage('requestInProgress');
        // verbose does not use a spinner to ensure a separate line for each status update.
        if (flags.verbose) {
            this.log(`${startMsg}..`);
        }
        else {
            this.spinner.start(startMsg);
        }
        const result = await packaging_1.PackageVersion.create({
            connection: flags['target-dev-hub'].getConnection(flags['api-version']),
            project: this.project,
            ...Object.fromEntries(Object.entries(flags).map(([key, value]) => [key.replace(/-/g, ''), value])),
            packageId: flags.package,
            path: flags.path,
        }, {
            timeout: flags.wait,
            frequency,
        });
        const finalStatusMsg = messages.getMessage('packageVersionCreateFinalStatus', [result.Status]);
        if (flags.verbose) {
            this.log(finalStatusMsg);
        }
        else {
            this.spinner.stop(finalStatusMsg);
        }
        switch (result.Status) {
            case 'Error':
                throw messages.createError('multipleErrors', [
                    result.Error?.map((e, i) => `${os.EOL}(${i + 1}) ${e}`).join(''),
                ]);
            case 'Success':
                this.log(messages.getMessage(result.Status, [
                    result.Id,
                    result.SubscriberPackageVersionId,
                    packaging_1.INSTALL_URL_BASE.toString(),
                    result.SubscriberPackageVersionId,
                    this.config.bin,
                ]));
                break;
            default:
                this.log(messages.getMessage('InProgress', [(0, kit_1.camelCaseToTitleCase)(result.Status), this.config.bin, result.Id]));
        }
        return result;
    }
}
exports.PackageVersionCreateCommand = PackageVersionCreateCommand;
PackageVersionCreateCommand.summary = messages.getMessage('summary');
PackageVersionCreateCommand.description = messages.getMessage('description');
PackageVersionCreateCommand.examples = messages.getMessages('examples');
PackageVersionCreateCommand.requiresProject = true;
PackageVersionCreateCommand.deprecateAliases = true;
PackageVersionCreateCommand.aliases = ['force:package:beta:version:create', 'force:package:version:create'];
PackageVersionCreateCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    branch: sf_plugins_core_1.Flags.string({
        char: 'b',
        summary: messages.getMessage('flags.branch.summary'),
    }),
    'build-instance': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['buildinstance'],
        char: 's',
        summary: messages.getMessage('flags.build-instance.summary'),
        hidden: true,
    }),
    'code-coverage': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['codecoverage'],
        char: 'c',
        summary: messages.getMessage('flags.code-coverage.summary'),
        description: messages.getMessage('flags.code-coverage.description'),
        default: false,
        exclusive: ['skip-validation'],
    }),
    'definition-file': sf_plugins_core_1.Flags.file({
        deprecateAliases: true,
        aliases: ['definitionfile'],
        char: 'f',
        summary: messages.getMessage('flags.definition-file.summary'),
    }),
    'installation-key': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['installationkey'],
        char: 'k',
        summary: messages.getMessage('flags.installation-key.summary'),
        exactlyOne: ['installation-key', 'installation-key-bypass'],
    }),
    'installation-key-bypass': sf_plugins_core_1.Flags.boolean({
        char: 'x',
        deprecateAliases: true,
        aliases: ['installationkeybypass'],
        summary: messages.getMessage('flags.installation-key-bypass.summary'),
        description: messages.getMessage('flags.installation-key-bypass.description'),
        exactlyOne: ['installation-key', 'installation-key-bypass'],
    }),
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
    }),
    path: sf_plugins_core_1.Flags.directory({
        char: 'd',
        summary: messages.getMessage('flags.path.summary'),
    }),
    'post-install-script': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['postinstallscript'],
        summary: messages.getMessage('flags.post-install-script.summary'),
        description: messages.getMessage('flags.post-install-script.description'),
    }),
    'post-install-url': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['postinstallurl'],
        summary: messages.getMessage('flags.post-install-url.summary'),
        description: messages.getMessage('flags.post-install-url.description'),
    }),
    preserve: sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: messages.getMessage('flags.preserve.summary'),
        hidden: true,
    }),
    'releasenotes-url': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['releasenotesurl'],
        summary: messages.getMessage('flags.releasenotes-url.summary'),
        description: messages.getMessage('flags.releasenotes-url.description'),
    }),
    'skip-ancestor-check': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['skipancestorcheck'],
        summary: messages.getMessage('flags.skip-ancestor-check.summary'),
        default: false,
    }),
    'skip-validation': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['skipvalidation'],
        summary: messages.getMessage('flags.skip-validation.summary'),
        description: messages.getMessage('flags.skip-validation.description'),
        default: false,
        exclusive: ['code-coverage'],
    }),
    tag: sf_plugins_core_1.Flags.string({
        char: 't',
        summary: messages.getMessage('flags.tag.summary'),
    }),
    'uninstall-script': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['uninstallscript'],
        summary: messages.getMessage('flags.uninstall-script.summary'),
        description: messages.getMessage('flags.uninstall-script.description'),
    }),
    'validate-schema': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['validateschema'],
        char: 'j',
        summary: messages.getMessage('flags.validate-schema.summary'),
        hidden: true,
    }),
    'version-description': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['versiondescription'],
        char: 'e',
        summary: messages.getMessage('flags.version-description.summary'),
    }),
    'version-name': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['versionname'],
        char: 'a',
        summary: messages.getMessage('flags.version-name.summary'),
    }),
    'version-number': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['versionnumber'],
        char: 'n',
        summary: messages.getMessage('flags.version-number.summary'),
    }),
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        default: kit_1.Duration.minutes(0),
    }),
    language: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.language.summary'),
        description: messages.getMessage('flags.language.description'),
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        description: messages.getMessage('flags.verbose.description'),
    }),
};
//# sourceMappingURL=create.js.map