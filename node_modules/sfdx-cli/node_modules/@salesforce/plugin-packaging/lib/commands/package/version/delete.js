"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionDeleteCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
const hubFlag_1 = require("../../../utils/hubFlag");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_delete');
class PackageVersionDeleteCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(PackageVersionDeleteCommand);
        const packageVersion = new packaging_1.PackageVersion({
            connection: flags['target-dev-hub'].getConnection(flags['api-version']),
            project: this.project,
            idOrAlias: flags.package,
        });
        await this.confirmDelete(flags['no-prompt'], flags.undelete);
        const results = flags.undelete ? await packageVersion.undelete() : await packageVersion.delete();
        this.logSuccess(this.getHumanSuccessMessage(results, flags.undelete));
        return results;
    }
    async confirmDelete(noprompt, undelete) {
        if (noprompt || this.jsonEnabled()) {
            return true;
        }
        const message = undelete ? messages.getMessage('prompt-undelete') : messages.getMessage('prompt-delete');
        const accepted = await this.confirm(message);
        if (!accepted) {
            throw new Error(messages.getMessage('prompt-delete-deny'));
        }
        return true;
    }
    // eslint-disable-next-line class-methods-use-this
    getHumanSuccessMessage(result, undelete) {
        return messages.getMessage(undelete ? 'humanSuccessUndelete' : 'humanSuccess', [result.id]);
    }
}
exports.PackageVersionDeleteCommand = PackageVersionDeleteCommand;
PackageVersionDeleteCommand.summary = messages.getMessage('summary');
PackageVersionDeleteCommand.description = messages.getMessage('description');
PackageVersionDeleteCommand.examples = messages.getMessages('examples');
PackageVersionDeleteCommand.deprecateAliases = true;
PackageVersionDeleteCommand.aliases = ['force:package:beta:version:delete', 'force:package:version:delete'];
PackageVersionDeleteCommand.requiresProject = true;
PackageVersionDeleteCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-dev-hub': hubFlag_1.requiredHubFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'n',
        deprecateAliases: true,
        aliases: ['noprompt'],
        summary: messages.getMessage('flags.no-prompt.summary'),
    }),
    package: sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.package.summary'),
        required: true,
    }),
    undelete: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.undelete.summary'),
        hidden: true,
    }),
};
//# sourceMappingURL=delete.js.map