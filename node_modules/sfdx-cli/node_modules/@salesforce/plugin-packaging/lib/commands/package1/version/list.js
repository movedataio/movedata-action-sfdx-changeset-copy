"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package1VersionListCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package1_version_list');
class Package1VersionListCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Package1VersionListCommand);
        const result = (await packaging_1.Package1Version.list(flags['target-org'].getConnection(flags['api-version']), flags['package-id'])).map((record) => ({
            MetadataPackageVersionId: record.Id,
            MetadataPackageId: record.MetadataPackageId,
            Name: record.Name,
            ReleaseState: record.ReleaseState,
            Version: `${record.MajorVersion}.${record.MinorVersion}.${record.PatchVersion}`,
            BuildNumber: record.BuildNumber,
        }));
        if (result.length) {
            this.table(result, {
                MetadataPackageVersionId: { header: 'MetadataPackageVersionId' },
                MetadataPackageId: { header: 'MetadataPackageId' },
                Name: { header: 'Name' },
                Version: { header: 'Version' },
                ReleaseState: { header: 'ReleaseState' },
                BuildNumber: { header: 'BuildNumber' },
            });
        }
        else {
            this.warn('No Results Found');
        }
        return result;
    }
}
exports.Package1VersionListCommand = Package1VersionListCommand;
Package1VersionListCommand.summary = messages.getMessage('summary');
Package1VersionListCommand.examples = messages.getMessages('examples');
Package1VersionListCommand.deprecateAliases = true;
Package1VersionListCommand.aliases = ['force:package1:beta:version:list', 'force:package1:version:list'];
Package1VersionListCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    'package-id': sf_plugins_core_1.Flags.salesforceId({
        length: 18,
        deprecateAliases: true,
        aliases: ['packageid'],
        char: 'i',
        summary: messages.getMessage('flags.package-id.summary'),
        description: messages.getMessage('flags.package-id.description'),
        startsWith: '033',
    }),
};
//# sourceMappingURL=list.js.map