"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Package1VersionCreateGetCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package1_version_create_get');
class Package1VersionCreateGetCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Package1VersionCreateGetCommand);
        const result = await packaging_1.Package1Version.getCreateStatus(flags['target-org'].getConnection(flags['api-version']), flags['request-id']);
        if (result.Status === 'ERROR') {
            // toolbelt was accessing request.Errors.errors, I'm unsure about this type, but was unable to reproduce an error
            // in the wild, and decided to trust how it was working
            const errors = result.Errors?.errors?.map((e) => e.message).join('\n');
            throw messages.createError('uploadFailure', [errors ?? 'Package version creation failed with unknown error']);
        }
        else {
            const arg = result.Status === 'SUCCESS'
                ? [result.MetadataPackageVersionId]
                : [this.config.bin, result.Id, flags['target-org'].getUsername()];
            this.log(messages.getMessage(result.Status, arg));
        }
        return result;
    }
}
exports.Package1VersionCreateGetCommand = Package1VersionCreateGetCommand;
Package1VersionCreateGetCommand.summary = messages.getMessage('summary');
Package1VersionCreateGetCommand.examples = messages.getMessages('examples');
Package1VersionCreateGetCommand.deprecateAliases = true;
Package1VersionCreateGetCommand.aliases = ['force:package1:beta:version:create:get', 'force:package1:version:create:get'];
Package1VersionCreateGetCommand.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    'request-id': sf_plugins_core_1.Flags.salesforceId({
        startsWith: '0HD',
        length: 'both',
        deprecateAliases: true,
        aliases: ['requestid'],
        char: 'i',
        summary: messages.getMessage('flags.request-id.summary'),
        required: true,
    }),
};
//# sourceMappingURL=get.js.map