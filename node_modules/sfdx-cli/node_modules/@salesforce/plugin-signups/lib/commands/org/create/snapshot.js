"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotCreate = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const snapshot_1 = require("../../../shared/snapshot");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'snapshot.create');
class SnapshotCreate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(SnapshotCreate);
        const conn = flags['target-dev-hub'].getConnection(flags['api-version']);
        const createResponse = await conn.sobject('OrgSnapshot').create({
            SourceOrg: flags['source-org'],
            Description: flags.description,
            SnapshotName: flags.name,
            Content: 'metadatadata',
        });
        if (createResponse.success === false) {
            throw new core_1.SfError('An error while created the org snapshot');
        }
        const result = await (0, snapshot_1.queryByNameOrId)(conn, createResponse.id);
        if (!flags.json) {
            (0, snapshot_1.printSingleRecordTable)(result);
        }
        return result;
    }
}
exports.SnapshotCreate = SnapshotCreate;
_a = SnapshotCreate;
SnapshotCreate.summary = messages.getMessage('summary');
SnapshotCreate.description = messages.getMessage('description');
SnapshotCreate.examples = messages.getMessages('examples');
SnapshotCreate.aliases = ['force:org:snapshot:create'];
SnapshotCreate.deprecateAliases = true;
SnapshotCreate.flags = {
    'target-dev-hub': sf_plugins_core_1.requiredHubFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'source-org': sf_plugins_core_1.Flags.string({
        // command doesn't use target-org, so dash-o is fine
        // eslint-disable-next-line sf-plugin/dash-o
        char: 'o',
        summary: messages.getMessage('flags.source-org.summary'),
        required: true,
        aliases: ['sourceorg'],
        deprecateAliases: true,
        parse: async (input) => (input.startsWith('00D') ? input : resolveSourceOrgId(input)),
    }),
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        required: true,
        aliases: ['snapshotname'],
        deprecateAliases: true,
    }),
    description: sf_plugins_core_1.Flags.string({
        char: 'd',
        summary: messages.getMessage('flags.description.summary'),
        description: messages.getMessage('flags.description.description'),
    }),
};
const resolveSourceOrgId = async (sourceOrgUsernameOrId) => {
    const stateAggregator = await core_1.StateAggregator.create();
    const username = stateAggregator.aliases.getValue(sourceOrgUsernameOrId) ?? sourceOrgUsernameOrId;
    const org = await stateAggregator.orgs.read(username);
    if (!org?.orgId) {
        throw new Error(`No org found for ${sourceOrgUsernameOrId}`);
    }
    return org.orgId;
};
//# sourceMappingURL=snapshot.js.map