"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllOrgShapesFromAuthenticatedOrgs = exports.OrgShapeListCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const kit_1 = require("@salesforce/kit");
const orgShapeListUtils_1 = require("../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.list');
// default columns for the shape list
const orgShapeColumns = {
    alias: {
        header: 'ALIAS',
        get: (data) => data.alias ?? '',
    },
    username: { header: 'USERNAME' },
    orgId: { header: 'ORG ID' },
    status: { header: 'SHAPE STATUS' },
    createdBy: { header: 'CREATED BY' },
    createdDate: { header: 'CREATED DATE' },
};
class OrgShapeListCommand extends sf_plugins_core_1.SfCommand {
    // there were no flags being used in the original!
    // eslint-disable-next-line sf-plugin/should-parse-flags
    async run() {
        const { orgShapes, errors } = await (0, exports.getAllOrgShapesFromAuthenticatedOrgs)();
        errors.forEach((e) => this.warn(e));
        if (orgShapes.length === 0) {
            this.log();
            this.info(messages.getMessage('noOrgShapes'));
            return orgShapes;
        }
        this.styledHeader('Org Shapes');
        this.table(orgShapes.map((shape) => (shape.status === 'Active' ? { ...shape, status: chalk.green(shape.status) } : shape)), orgShapeColumns);
        return orgShapes;
    }
}
exports.OrgShapeListCommand = OrgShapeListCommand;
OrgShapeListCommand.summary = messages.getMessage('summary');
OrgShapeListCommand.description = messages.getMessage('description');
OrgShapeListCommand.examples = messages.getMessages('examples');
OrgShapeListCommand.aliases = ['force:org:shape:list'];
OrgShapeListCommand.deprecateAliases = true;
OrgShapeListCommand.flags = {
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('verbose'),
        hidden: true,
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
const getAllOrgShapesFromAuthenticatedOrgs = async () => {
    const orgs = await core_1.AuthInfo.listAllAuthorizations((orgAuth) => !orgAuth.error && !orgAuth.isScratchOrg);
    if (orgs.length === 0) {
        throw messages.createError('noAuthFound');
    }
    const shapes = await (0, kit_1.settleAll)(orgs.map((o) => (0, orgShapeListUtils_1.getAllShapesFromOrg)(o)));
    return { orgShapes: shapes.fulfilled.flat(), errors: shapes.rejected };
};
exports.getAllOrgShapesFromAuthenticatedOrgs = getAllOrgShapesFromAuthenticatedOrgs;
//# sourceMappingURL=shape.js.map