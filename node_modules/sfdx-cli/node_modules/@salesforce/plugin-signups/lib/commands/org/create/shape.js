"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgShapeCreateCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const orgShapeListUtils_1 = require("../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.create');
class OrgShapeCreateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(OrgShapeCreateCommand);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        if (!(await (0, orgShapeListUtils_1.isShapeEnabled)(conn))) {
            throw messages.createError('ShapeRepresentationNoAccess', [flags['target-org'].getUsername()]);
        }
        const createShapeResponse = await createShapeOrg(conn);
        if (createShapeResponse.success !== true) {
            (await core_1.Logger.child('OrgShapeCreateCommand')).error('Shape create failed', createShapeResponse['errors']);
            throw messages.createError('ShapeCreateFailed');
        }
        const output = {
            shapeId: createShapeResponse.id,
            success: true,
            errors: [],
        };
        this.logSuccess(messages.getMessage('success', [output.shapeId]));
        return output;
    }
}
exports.OrgShapeCreateCommand = OrgShapeCreateCommand;
OrgShapeCreateCommand.summary = messages.getMessage('summary');
OrgShapeCreateCommand.description = messages.getMessage('description');
OrgShapeCreateCommand.examples = messages.getMessages('examples');
OrgShapeCreateCommand.aliases = ['force:org:shape:create'];
OrgShapeCreateCommand.deprecateAliases = true;
OrgShapeCreateCommand.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
const createShapeOrg = async (conn) => {
    try {
        return await conn.sobject('ShapeRepresentation').create({
            Description: '',
        });
    }
    catch (err) {
        const JsForceErr = err;
        if (JsForceErr.errorCode && JsForceErr.errorCode === 'NOT_FOUND' && JsForceErr['name'] === 'ACCESS_DENIED') {
            throw messages.createError('NoCrudAccessCreateShape');
        }
        else {
            throw JsForceErr;
        }
    }
};
//# sourceMappingURL=shape.js.map