"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteAll = exports.OrgShapeDeleteCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const orgShapeListUtils_1 = require("../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.delete');
class OrgShapeDeleteCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(OrgShapeDeleteCommand);
        const username = flags['target-org'].getUsername();
        if (!username)
            throw new core_1.SfError('No username found for target-org');
        const orgId = flags['target-org'].getOrgId();
        if (!flags['no-prompt']) {
            if (!(await this.confirm(messages.getMessage('deleteCommandYesNo', [username])))) {
                return;
            }
        }
        const conn = flags['target-org'].getConnection(flags['api-version']);
        if (!(await (0, orgShapeListUtils_1.isShapeEnabled)(conn))) {
            throw messages.createError('noAccess', [username]);
        }
        const deleteRes = await (0, exports.deleteAll)(conn, username);
        if (deleteRes.shapeIds.length === 0) {
            this.info(messages.getMessage('noShapesHumanSuccess', [orgId]));
            return;
        }
        if (deleteRes.failures.length > 0) {
            setExitCode(68);
            this.styledHeader('Partial Success');
            this.logSuccess(messages.getMessage('humanSuccess', [orgId]));
            this.log('');
            this.styledHeader('Failures');
            const columns = {
                shapeId: { header: 'Shape ID' },
                message: { header: 'Error Message' },
            };
            this.table(deleteRes.failures, columns);
        }
        else if (deleteRes.failures.length === deleteRes.shapeIds.length) {
            setExitCode(1);
        }
        else {
            setExitCode(0);
            this.logSuccess(messages.getMessage('humanSuccess', [orgId]));
        }
        return {
            orgId,
            shapeIds: deleteRes.shapeIds,
            failures: deleteRes.failures,
        };
    }
}
exports.OrgShapeDeleteCommand = OrgShapeDeleteCommand;
OrgShapeDeleteCommand.summary = messages.getMessage('summary');
OrgShapeDeleteCommand.description = messages.getMessage('description');
OrgShapeDeleteCommand.examples = messages.getMessages('examples');
OrgShapeDeleteCommand.aliases = ['force:org:shape:delete'];
OrgShapeDeleteCommand.deprecateAliases = true;
OrgShapeDeleteCommand.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'p',
        summary: messages.getMessage('flags.no-prompt.summary'),
        aliases: ['noprompt'],
        deprecateAliases: true,
    }),
};
/**
 * Delete all ShapeRepresentation records for the shapeOrg.
 *
 * @return List of SR IDs that were deleted
 */
const deleteAll = async (conn, username) => {
    let shapeIds = [];
    const deleteAllResult = {
        shapeIds: [],
        failures: [],
    };
    try {
        const result = await conn.query('SELECT Id FROM ShapeRepresentation');
        if (result.totalSize === 0) {
            return deleteAllResult;
        }
        shapeIds = result.records.map((shape) => shape.Id);
    }
    catch (err) {
        const JsForceErr = err;
        if (JsForceErr.errorCode && JsForceErr.errorCode === 'INVALID_TYPE') {
            // ShapeExportPref is not enabled, or user does not have CRUD access
            throw messages.createError('noAccess', [username]);
        }
        // non-access error
        throw JsForceErr;
    }
    await Promise.all(shapeIds.map(async (id) => {
        try {
            const delResult = await conn.sobject('ShapeRepresentation').delete(id);
            if (delResult.success) {
                deleteAllResult.shapeIds.push(id);
            }
        }
        catch (err) {
            deleteAllResult.failures.push({
                shapeId: id,
                message: err instanceof Error ? err.message : 'error contained no message',
            });
        }
    }));
    return deleteAllResult;
};
exports.deleteAll = deleteAll;
const setExitCode = (code) => {
    process.exitCode = code;
};
//# sourceMappingURL=shape.js.map