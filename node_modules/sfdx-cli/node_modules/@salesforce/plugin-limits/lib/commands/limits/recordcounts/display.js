"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitsRecordCountsDisplayCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-limits', 'recordcounts');
class LimitsRecordCountsDisplayCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        try {
            const { flags } = await this.parse(LimitsRecordCountsDisplayCommand);
            const conn = flags['target-org'].getConnection(flags['api-version']);
            const sobjectsQuery = flags.sobject.length > 0 ? `=${flags.sobject.join()}` : '';
            const geturl = `/limits/recordCount?sObjects${sobjectsQuery}`;
            const result = await conn.request(geturl);
            const recordCounts = result.sObjects
                .filter((record) => (flags.sobject.length > 0 ? flags.sobject.includes(record.name) : result.sObjects))
                .sort((a, b) => a.name.localeCompare(b.name));
            this.table(recordCounts, {
                name: { header: 'sObject' },
                count: { header: 'Record Count' },
            });
            return recordCounts;
        }
        catch (err) {
            if (err instanceof Error || typeof err === 'string') {
                throw core_1.SfError.wrap(err);
            }
            throw err;
        }
    }
}
exports.LimitsRecordCountsDisplayCommand = LimitsRecordCountsDisplayCommand;
LimitsRecordCountsDisplayCommand.aliases = ['force:limits:recordcounts:display', 'org:list:sobject:record-counts'];
LimitsRecordCountsDisplayCommand.summary = messages.getMessage('summary');
LimitsRecordCountsDisplayCommand.description = messages.getMessage('description');
LimitsRecordCountsDisplayCommand.examples = messages.getMessages('examples');
LimitsRecordCountsDisplayCommand.flags = {
    sobject: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 's',
        summary: messages.getMessage('sobjectFlagDescription'),
        aliases: ['sobjecttype'],
        default: [],
    }),
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=display.js.map