"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitsApiDisplayCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-limits', 'display');
class LimitsApiDisplayCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        try {
            const { flags } = await this.parse(LimitsApiDisplayCommand);
            const conn = flags['target-org'].getConnection(flags['api-version']);
            const result = await conn.request('/limits');
            const limits = Object.entries(result).map(([name, { Max, Remaining }]) => ({
                name,
                max: Max,
                remaining: Remaining,
            }));
            this.table(limits, { name: { header: 'Name' }, remaining: { header: 'Remaining' }, max: { header: 'Max' } });
            return limits;
        }
        catch (err) {
            if (err instanceof Error || typeof err === 'string') {
                throw core_1.SfError.wrap(err);
            }
            throw err;
        }
    }
}
exports.LimitsApiDisplayCommand = LimitsApiDisplayCommand;
LimitsApiDisplayCommand.aliases = ['force:limits:api:display', 'org:list:limits'];
LimitsApiDisplayCommand.summary = messages.getMessage('summary');
LimitsApiDisplayCommand.description = messages.getMessage('description');
LimitsApiDisplayCommand.examples = messages.getMessages('examples');
LimitsApiDisplayCommand.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=display.js.map