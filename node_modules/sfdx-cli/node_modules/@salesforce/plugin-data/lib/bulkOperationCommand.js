"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkOperationCommand = void 0;
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const os = require("os");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const flags_1 = require("./flags");
const bulkUtils_1 = require("./bulkUtils");
const BulkBaseCommand_1 = require("./BulkBaseCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.operation.command');
class BulkOperationCommand extends BulkBaseCommand_1.BulkBaseCommand {
    /**
     * create and execute batches based on the record arrays; wait for completion response if -w flag is set with > 0 minutes
     * to get proper logging/printing to console pass the instance of UX that called this method
     *
     * @param job {IngestJobV2}
     * @param input
     * @param sobjectType {string}
     * @param wait {number}
     */
    static async executeBulkV2DataRequest(job, input, sobjectType, wait) {
        await job.open();
        const timeNow = Date.now();
        let remainingTime = wait ? kit_1.Duration.minutes(wait).milliseconds : 0;
        job.emit('jobProgress', { remainingTime, stage: 'uploading' });
        await job.uploadData(input);
        remainingTime = remainingTime - (Date.now() - timeNow);
        job.emit('jobProgress', { remainingTime, stage: 'uploadComplete' });
        await job.close();
        if (remainingTime > 0) {
            job.emit('startPolling');
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            await (0, bulkUtils_1.waitOrTimeout)(job, remainingTime);
        }
        return job.check();
    }
    async runBulkOperation(sobject, csvFileName, connection, wait, operation, options) {
        this.cache = await this.getCache();
        this.isAsync = !wait;
        this.operation = operation;
        this.wait = wait;
        try {
            const csvRecords = fs.createReadStream(csvFileName, { encoding: 'utf-8' });
            this.spinner.start(`Running ${this.isAsync ? 'async ' : ''}bulk ${operation} request`);
            this.endWaitTime = Date.now() + kit_1.Duration.minutes(this.wait).milliseconds;
            this.spinner.status = this.getRemainingTimeStatus();
            const createJobOptions = {
                object: sobject,
                operation,
                externalIdFieldName: options?.extIdField,
            };
            if (os.platform() === 'win32') {
                createJobOptions.lineEnding = 'CRLF';
            }
            this.job = connection.bulk2.createJob(createJobOptions);
            this.connection = connection;
            this.setupLifecycleListeners();
            try {
                const jobInfo = await BulkOperationCommand.executeBulkV2DataRequest(this.job, csvRecords, sobject, this.wait);
                if (this.isAsync) {
                    await this.cache?.createCacheEntryForRequest(this.job.id ?? '', this.connection?.getUsername(), this.connection?.getApiVersion());
                }
                this.displayBulkV2Result(jobInfo);
                const result = { jobInfo };
                if (!(0, bulkUtils_1.isBulkV2RequestDone)(jobInfo) || !this.jsonEnabled()) {
                    return result;
                }
                result.records = (0, bulkUtils_1.transformResults)(await this.job.getAllResults());
                return result;
            }
            catch (err) {
                this.spinner.stop();
                throw err;
            }
        }
        finally {
            this.spinner.stop();
        }
    }
}
exports.BulkOperationCommand = BulkOperationCommand;
BulkOperationCommand.baseFlags = {
    ...flags_1.orgFlags,
    file: sf_plugins_core_1.Flags.file({
        char: 'f',
        summary: messages.getMessage('flags.csvfile'),
        required: true,
        exists: true,
        aliases: ['csvfile'],
        deprecateAliases: true,
    }),
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        summary: messages.getMessage('flags.sobjecttype'),
        required: true,
        aliases: ['sobjecttype'],
        deprecateAliases: true,
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        unit: 'minutes',
        summary: messages.getMessage('flags.wait'),
        min: 0,
        default: kit_1.Duration.minutes(0),
        exclusive: ['async'],
    }),
    async: sf_plugins_core_1.Flags.boolean({
        char: 'a',
        summary: messages.getMessage('flags.async.summary'),
        default: false,
        exclusive: ['wait'],
    }),
};
//# sourceMappingURL=bulkOperationCommand.js.map