"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const bulkDataRequestCache_1 = require("../../../bulkDataRequestCache");
const bulkOperationCommand_1 = require("../../../bulkOperationCommand");
const bulkUtils_1 = require("../../../bulkUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulkv2.upsert');
class Upsert extends bulkOperationCommand_1.BulkOperationCommand {
    async run() {
        const { flags } = await this.parse(Upsert);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        await (0, bulkUtils_1.validateSobjectType)(flags.sobject, conn);
        return this.runBulkOperation(flags.sobject, flags.file, conn, flags.async ? 0 : flags.wait?.minutes, 'upsert', {
            extIdField: flags['external-id'],
        });
    }
    // eslint-disable-next-line class-methods-use-this
    async getCache() {
        return bulkDataRequestCache_1.BulkUpsertRequestCache.create();
    }
}
exports.default = Upsert;
Upsert.summary = messages.getMessage('summary');
Upsert.description = messages.getMessage('description');
Upsert.examples = messages.getMessages('examples');
Upsert.flags = {
    'external-id': sf_plugins_core_1.Flags.string({
        char: 'i',
        summary: messages.getMessage('flags.externalid'),
        required: true,
        aliases: ['externalid'],
        deprecateAliases: true,
    }),
};
//# sourceMappingURL=bulk.js.map