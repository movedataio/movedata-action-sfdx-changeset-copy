"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const flags_1 = require("../../../flags");
const dataCommand_1 = require("../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'record.delete');
class Delete extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Delete);
        this.spinner.start('Deleting Record');
        let status = 'Success';
        try {
            const conn = flags['use-tooling-api']
                ? flags['target-org'].getConnection(flags['api-version']).tooling
                : flags['target-org'].getConnection(flags['api-version']);
            // "where flag" will be defined if sobjectId is not
            const sObjectId = flags['record-id'] ?? (await (0, dataCommand_1.query)(conn, flags.sobject, flags.where)).Id;
            const result = await conn.sobject(flags.sobject).destroy(sObjectId);
            if (result.success) {
                this.log(messages.getMessage('deleteSuccess', [sObjectId]));
            }
            else {
                status = 'Failed';
                const errors = (0, dataCommand_1.collectErrorMessages)(result);
                this.error(messages.getMessage('deleteFailure', [errors]));
            }
            this.spinner.stop(status);
            return result;
        }
        catch (err) {
            status = 'Failed';
            this.spinner.stop(status);
            if (!(err instanceof Error)) {
                throw err;
            }
            throw new core_1.SfError(err.message, err.name);
        }
    }
}
exports.default = Delete;
Delete.summary = messages.getMessage('summary');
Delete.description = messages.getMessage('description');
Delete.examples = messages.getMessages('examples');
Delete.aliases = ['force:data:record:delete'];
Delete.deprecateAliases = true;
Delete.flags = {
    ...flags_1.orgFlags,
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        required: true,
        summary: messages.getMessage('flags.sobject'),
        aliases: ['sobjecttype'],
        deprecateAliases: true,
    }),
    // eslint-disable-next-line sf-plugin/id-flag-suggestions
    'record-id': sf_plugins_core_1.Flags.salesforceId({
        length: 'both',
        char: 'i',
        summary: messages.getMessage('flags.recordId'),
        exactlyOne: ['where', 'record-id'],
        aliases: ['sobjectid'],
        deprecateAliases: true,
    }),
    where: sf_plugins_core_1.Flags.string({
        char: 'w',
        summary: messages.getMessage('flags.where'),
        exactlyOne: ['where', 'record-id'],
    }),
    'use-tooling-api': sf_plugins_core_1.Flags.boolean({
        char: 't',
        summary: messages.getMessage('flags.useToolingApi'),
        aliases: ['usetoolingapi'],
        deprecateAliases: true,
    }),
    perflog: flags_1.perflogFlag,
};
//# sourceMappingURL=record.js.map