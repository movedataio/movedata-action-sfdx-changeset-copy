"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const importApi_1 = require("../../../api/data/tree/importApi");
const flags_1 = require("../../../flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'tree.import');
/**
 * Command that provides data import capability via the SObject Tree Save API.
 */
class Import extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Import);
        const logger = await core_1.Logger.child('Import');
        const importApi = new importApi_1.ImportApi(flags['target-org'], this.config.bin, this.config.pjson.oclif.topicSeparator ?? ':');
        if (flags['config-help']) {
            // Display config help and return
            const schema = importApi.getSchema();
            if (!this.jsonEnabled()) {
                new core_1.SchemaPrinter(logger, schema).getLines().forEach((line) => this.log(line));
            }
            return schema;
        }
        const importConfig = {
            sobjectTreeFiles: flags.files,
            contentType: flags['content-type'],
            plan: flags.plan,
        };
        const importResults = await importApi.import(importConfig);
        const processedResult = (importResults.responseRefs ?? []).map((ref) => {
            const type = (0, ts_types_1.getString)(importResults.sobjectTypes, ref.referenceId, 'Unknown');
            return { refId: ref.referenceId, type, id: ref.id };
        });
        this.styledHeader('Import Results');
        this.table(processedResult, {
            refId: { header: 'Reference ID' },
            type: { header: 'Type' },
            id: { header: 'ID' },
        });
        return processedResult;
    }
}
exports.default = Import;
Import.summary = messages.getMessage('summary');
Import.description = messages.getMessage('description');
Import.examples = messages.getMessages('examples');
Import.aliases = ['force:data:tree:import'];
Import.deprecateAliases = true;
Import.flags = {
    ...flags_1.orgFlags,
    files: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'f',
        summary: messages.getMessage('flags.files'),
        exclusive: ['plan'],
        aliases: ['sobjecttreefiles'],
        deprecateAliases: true,
    }),
    plan: sf_plugins_core_1.Flags.file({
        char: 'p',
        summary: messages.getMessage('flags.plan'),
        exists: true,
    }),
    'content-type': sf_plugins_core_1.Flags.string({
        char: 'c',
        summary: messages.getMessage('flags.contenttype'),
        hidden: true,
        aliases: ['contenttype'],
        deprecateAliases: true,
    }),
    // displays the schema for a data import plan
    'config-help': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.confighelp'),
        aliases: ['confighelp'],
        deprecateAliases: true,
    }),
};
//# sourceMappingURL=tree.js.map