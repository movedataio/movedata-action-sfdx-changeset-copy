"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const flags_1 = require("../../../flags");
const dataCommand_1 = require("../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'record.create');
class Create extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Create);
        this.spinner.start(`Creating record for ${flags.sobject}`);
        const sobject = (flags['use-tooling-api']
            ? flags['target-org'].getConnection(flags['api-version']).tooling
            : flags['target-org'].getConnection(flags['api-version'])).sobject(flags.sobject);
        const values = (0, dataCommand_1.stringToDictionary)(flags.values);
        const result = await sobject.insert(values);
        if (result.success) {
            this.log(messages.getMessage('createSuccess', [result.id || 'unknown id']));
            this.spinner.stop();
        }
        else {
            const errors = (0, dataCommand_1.collectErrorMessages)(result);
            this.spinner.stop('failed');
            this.error(messages.getMessage('createFailure', [errors]));
        }
        return result;
    }
}
exports.default = Create;
Create.summary = messages.getMessage('summary');
Create.description = messages.getMessage('description');
Create.examples = messages.getMessages('examples');
Create.aliases = ['force:data:record:create'];
Create.deprecateAliases = true;
Create.flags = {
    ...flags_1.orgFlags,
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        required: true,
        summary: messages.getMessage('flags.sobject'),
        aliases: ['sobjecttype'],
        deprecateAliases: true,
    }),
    values: sf_plugins_core_1.Flags.string({
        char: 'v',
        required: true,
        summary: messages.getMessage('flags.values'),
    }),
    'use-tooling-api': sf_plugins_core_1.Flags.boolean({
        char: 't',
        summary: messages.getMessage('flags.useToolingApi'),
        aliases: ['usetoolingapi'],
        deprecateAliases: true,
    }),
    perflog: flags_1.perflogFlag,
};
//# sourceMappingURL=record.js.map