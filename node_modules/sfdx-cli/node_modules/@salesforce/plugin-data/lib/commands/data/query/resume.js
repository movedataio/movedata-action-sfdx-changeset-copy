"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkQueryReport = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const bulk_1 = require("jsforce/lib/api/bulk");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const flags_1 = require("../../../flags");
const queryUtils_1 = require("../../../queryUtils");
const bulkDataRequestCache_1 = require("../../../bulkDataRequestCache");
core_1.Messages.importMessagesDirectory(__dirname);
const reportMessages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.report');
// needed by the flags loaded from the other command
const queryMessages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'soql.query');
class BulkQueryReport extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(BulkQueryReport);
        const cache = await bulkDataRequestCache_1.BulkQueryRequestCache.create();
        const resumeOptions = await cache.resolveResumeOptionsFromCache(flags['bulk-query-id'], flags['use-most-recent'], flags['target-org'], flags['api-version']);
        const job = new bulk_1.QueryJobV2({ ...resumeOptions.options, operation: 'query' });
        job.jobInfo = resumeOptions.jobInfo;
        const results = await job.getResults();
        const queryResult = (0, queryUtils_1.transformBulkResults)(results, '');
        if (!this.jsonEnabled()) {
            (0, queryUtils_1.displayResults)({ ...queryResult }, flags['result-format']);
        }
        if (queryResult.result.done) {
            await bulkDataRequestCache_1.BulkQueryRequestCache.unset(resumeOptions.jobInfo.id);
        }
        return queryResult.result;
    }
}
exports.BulkQueryReport = BulkQueryReport;
BulkQueryReport.summary = reportMessages.getMessage('summary');
BulkQueryReport.description = reportMessages.getMessage('description');
BulkQueryReport.examples = reportMessages.getMessages('examples');
BulkQueryReport.aliases = ['force:data:soql:bulk:report'];
BulkQueryReport.deprecateAliases = true;
BulkQueryReport.flags = {
    'target-org': { ...sf_plugins_core_1.optionalOrgFlagWithDeprecations, summary: queryMessages.getMessage('flags.targetOrg.summary') },
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'result-format': flags_1.resultFormatFlag,
    'bulk-query-id': sf_plugins_core_1.Flags.salesforceId({
        length: 18,
        char: 'i',
        startsWith: '750',
        summary: reportMessages.getMessage('flags.bulkQueryId'),
        aliases: ['bulkqueryid'],
        deprecateAliases: true,
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: reportMessages.getMessage('flags.useMostRecent.summary'),
        exclusive: ['bulk-query-id'],
    }),
};
//# sourceMappingURL=resume.js.map