"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const flags_1 = require("../../../../flags");
const batcher_1 = require("../../../../batcher");
const bulkUtils_1 = require("../../../../bulkUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.upsert');
class Upsert extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Upsert);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        this.spinner.start('Bulk Upsert');
        await (0, bulkUtils_1.validateSobjectType)(flags.sobject, conn);
        const batcher = new batcher_1.Batcher(conn, new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), this.config.bin, this.config.pjson.oclif.topicSeparator ?? ':');
        const csvStream = fs.createReadStream(flags.file, { encoding: 'utf-8' });
        const concurrencyMode = flags.serial ? 'Serial' : 'Parallel';
        const job = conn.bulk.createJob(flags.sobject, 'upsert', {
            extIdField: flags['external-id'],
            concurrencyMode,
        });
        // eslint-disable-next-line @typescript-eslint/no-misused-promises,no-async-promise-executor
        return new Promise(async (resolve, reject) => {
            job.on('error', (err) => {
                reject(err);
            });
            try {
                resolve(await batcher.createAndExecuteBatches(job, csvStream, flags.sobject, flags.wait?.minutes));
                this.spinner.stop();
            }
            catch (e) {
                this.spinner.stop('error');
                reject(e);
            }
        });
    }
}
exports.default = Upsert;
Upsert.summary = messages.getMessage('summary');
Upsert.description = messages.getMessage('description');
Upsert.examples = messages.getMessages('examples');
Upsert.flags = {
    ...flags_1.orgFlags,
    'external-id': sf_plugins_core_1.Flags.string({
        char: 'i',
        summary: messages.getMessage('flags.externalid'),
        required: true,
        aliases: ['externalid'],
        deprecateAliases: true,
    }),
    file: sf_plugins_core_1.Flags.file({
        exists: true,
        char: 'f',
        summary: messages.getMessage('flags.csvfile'),
        required: true,
        aliases: ['csvfile'],
        deprecateAliases: true,
    }),
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        summary: messages.getMessage('flags.sobjecttype'),
        required: true,
        aliases: ['sobjecttype'],
        deprecateAliases: true,
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        unit: 'minutes',
        summary: messages.getMessage('flags.wait'),
        min: 0,
        default: kit_1.Duration.minutes(0),
    }),
    serial: sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: messages.getMessage('flags.serial'),
        default: false,
    }),
};
//# sourceMappingURL=upsert.js.map