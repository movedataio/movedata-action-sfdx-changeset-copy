"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const flags_1 = require("../../../../flags");
const batcher_1 = require("../../../../batcher");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.status');
class Status extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Status);
        this.spinner.start('Getting Status');
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const batcher = new batcher_1.Batcher(conn, new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), this.config.bin, this.config.pjson.oclif.topicSeparator ?? ':');
        if (flags['job-id'] && flags['batch-id']) {
            // view batch status
            const job = conn.bulk.job(flags['job-id']);
            let found = false;
            const batches = await job.list();
            batches.forEach((batch) => {
                if (batch.id === flags['batch-id']) {
                    batcher.bulkStatus(batch);
                    found = true;
                }
            });
            if (!found) {
                throw new core_1.SfError(messages.getMessage('NoBatchFound', [flags['batch-id'], flags['job-id']]), 'NoBatchFound');
            }
            this.spinner.stop();
            return batches;
        }
        else {
            // view job status
            const jobStatus = await batcher.fetchAndDisplayJobStatus(flags['job-id']);
            this.spinner.stop();
            return jobStatus;
        }
    }
}
exports.default = Status;
Status.summary = messages.getMessage('summary');
Status.description = messages.getMessage('description');
Status.examples = messages.getMessages('examples');
Status.flags = {
    ...flags_1.orgFlags,
    'batch-id': sf_plugins_core_1.Flags.salesforceId({
        length: 18,
        char: 'b',
        startsWith: '751',
        summary: messages.getMessage('flags.batchid'),
        aliases: ['batchid'],
        deprecateAliases: true,
    }),
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        length: 18,
        char: 'i',
        startsWith: '750',
        summary: messages.getMessage('flags.jobid'),
        required: true,
        aliases: ['jobid'],
        deprecateAliases: true,
    }),
};
//# sourceMappingURL=status.js.map