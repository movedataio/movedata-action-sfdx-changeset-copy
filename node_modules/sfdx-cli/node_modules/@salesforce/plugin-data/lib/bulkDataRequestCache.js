"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkUpsertRequestCache = exports.BulkDeleteRequestCache = exports.BulkQueryRequestCache = exports.BulkDataRequestCache = void 0;
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'messages');
class BulkDataRequestCache extends core_1.TTLConfig {
    static getDefaultOptions() {
        return {
            isGlobal: true,
            isState: true,
            filename: BulkDataRequestCache.getFileName(),
            stateFolder: core_1.Global.SF_STATE_FOLDER,
            ttl: kit_1.Duration.days(3),
        };
    }
    /**
     * Creates a new bulk data request cache entry for the given bulk request id.
     *
     * @param bulkRequestId
     * @param username
     */
    async createCacheEntryForRequest(bulkRequestId, username, apiVersion) {
        if (!username) {
            throw messages.createError('usernameRequired');
        }
        this.set(bulkRequestId, {
            jobId: bulkRequestId,
            username,
            apiVersion,
        });
        await this.write();
        core_1.Logger.childFromRoot('DataRequestCache').debug(`bulk cache saved for ${bulkRequestId}`);
    }
    async resolveResumeOptionsFromCache(bulkJobId, useMostRecent, org, apiVersion) {
        if (!useMostRecent && !bulkJobId) {
            throw messages.createError('bulkRequestIdRequiredWhenNotUsingMostRecent');
        }
        const resumeOptions = {
            options: {
                operation: 'query',
                query: '',
                pollingOptions: { pollTimeout: 0, pollInterval: 0 },
            },
        };
        if (useMostRecent) {
            const key = this.getLatestKey();
            if (key) {
                const entry = this.get(key);
                resumeOptions.options.connection = (await core_1.Org.create({ aliasOrUsername: entry.username })).getConnection(apiVersion);
                resumeOptions.jobInfo = { id: entry.jobId };
                return resumeOptions;
            }
        }
        if (bulkJobId) {
            const entry = this.get(bulkJobId);
            if (entry) {
                resumeOptions.options.connection = (await core_1.Org.create({ aliasOrUsername: entry.username })).getConnection(apiVersion);
                resumeOptions.jobInfo = { id: entry.jobId };
                return resumeOptions;
            }
            else if (org) {
                resumeOptions.options.connection = org.getConnection(apiVersion);
                resumeOptions.jobInfo = { id: bulkJobId };
                return resumeOptions;
            }
            else {
                throw messages.createError('cannotCreateResumeOptionsWithoutAnOrg');
            }
        }
        else if (useMostRecent) {
            throw messages.createError('cannotFindMostRecentCacheEntry');
        }
        else {
            throw messages.createError('bulkRequestIdRequiredWhenNotUsingMostRecent');
        }
    }
}
exports.BulkDataRequestCache = BulkDataRequestCache;
class BulkQueryRequestCache extends BulkDataRequestCache {
    static getDefaultOptions() {
        return {
            isGlobal: true,
            isState: true,
            filename: BulkQueryRequestCache.getFileName(),
            stateFolder: core_1.Global.SF_STATE_FOLDER,
            ttl: kit_1.Duration.days(3),
        };
    }
    static getFileName() {
        return 'bulk-data-query-cache.json';
    }
    static async unset(key) {
        const cache = await BulkQueryRequestCache.create();
        cache.unset(key);
        await cache.write();
    }
}
exports.BulkQueryRequestCache = BulkQueryRequestCache;
class BulkDeleteRequestCache extends BulkDataRequestCache {
    static getDefaultOptions() {
        return {
            isGlobal: true,
            isState: true,
            filename: BulkDeleteRequestCache.getFileName(),
            stateFolder: core_1.Global.SF_STATE_FOLDER,
            ttl: kit_1.Duration.days(3),
        };
    }
    static getFileName() {
        return 'bulk-data-delete-cache.json';
    }
    static async unset(key) {
        const cache = await BulkDeleteRequestCache.create();
        cache.unset(key);
        await cache.write();
    }
}
exports.BulkDeleteRequestCache = BulkDeleteRequestCache;
class BulkUpsertRequestCache extends BulkDataRequestCache {
    static getDefaultOptions() {
        return {
            isGlobal: true,
            isState: true,
            filename: BulkUpsertRequestCache.getFileName(),
            stateFolder: core_1.Global.SF_STATE_FOLDER,
            ttl: kit_1.Duration.days(3),
        };
    }
    static getFileName() {
        return 'bulk-data-upsert-cache.json';
    }
    static async unset(key) {
        const cache = await BulkUpsertRequestCache.create();
        cache.unset(key);
        await cache.write();
    }
}
exports.BulkUpsertRequestCache = BulkUpsertRequestCache;
//# sourceMappingURL=bulkDataRequestCache.js.map