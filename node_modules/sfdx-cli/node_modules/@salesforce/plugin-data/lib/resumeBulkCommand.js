"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResumeBulkCommand = void 0;
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const bulkUtils_1 = require("./bulkUtils");
const BulkBaseCommand_1 = require("./BulkBaseCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.resume.command');
class ResumeBulkCommand extends BulkBaseCommand_1.BulkBaseCommand {
    async resume(resumeOptions, wait) {
        this.spinner.start('Getting status');
        const conn = resumeOptions.options.connection;
        this.job = conn.bulk2.job({ id: resumeOptions.jobInfo.id });
        this.wait = wait.milliseconds;
        this.endWaitTime = Date.now() + wait.milliseconds;
        this.spinner.status = this.getRemainingTimeStatus();
        this.setupLifecycleListeners();
        await (0, bulkUtils_1.waitOrTimeout)(this.job, wait.milliseconds);
        const jobInfo = await this.job.check();
        this.spinner.stop();
        this.displayBulkV2Result(jobInfo);
        const result = { jobInfo };
        if (!(0, bulkUtils_1.isBulkV2RequestDone)(jobInfo) || !this.jsonEnabled()) {
            return result;
        }
        result.records = (0, bulkUtils_1.transformResults)(await this.job.getAllResults());
        return result;
    }
}
exports.ResumeBulkCommand = ResumeBulkCommand;
ResumeBulkCommand.baseFlags = {
    'target-org': { ...sf_plugins_core_1.optionalOrgFlagWithDeprecations, summary: messages.getMessage('flags.targetOrg.summary') },
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        length: 18,
        char: 'i',
        startsWith: '750',
        summary: messages.getMessage('flags.jobid'),
        aliases: ['jobid'],
        deprecateAliases: true,
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.useMostRecent.summary'),
        default: true,
        exclusive: ['job-id'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        summary: messages.getMessage('flags.wait.summary'),
        unit: 'minutes',
        min: 0,
        default: kit_1.Duration.minutes(0),
    }),
    'api-version': sf_plugins_core_1.Flags.orgApiVersion(),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=resumeBulkCommand.js.map