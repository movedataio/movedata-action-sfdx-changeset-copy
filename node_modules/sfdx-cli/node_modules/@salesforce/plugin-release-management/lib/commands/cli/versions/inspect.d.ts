import { SfCommand } from '@salesforce/sf-plugins-core';
import { Interfaces } from '@oclif/core';
import { CLI } from '../../../types';
export type Info = {
    origin: string;
    version: string;
    channel: Channel;
    location: Location;
    dependencies?: Dependency[];
};
export type Dependency = {
    name: string;
    version: string;
};
export declare enum Channel {
    LEGACY = "legacy",
    STABLE = "stable",
    STABLE_RC = "stable-rc",
    LATEST = "latest",
    LATEST_RC = "latest-rc",
    NIGHTLY = "nightly"
}
export declare enum Location {
    ARCHIVE = "archive",
    NPM = "npm"
}
type ArchiveChannel = Extract<Channel, Channel.STABLE | Channel.STABLE_RC | Channel.NIGHTLY | Channel.LEGACY>;
type Archives = Record<ArchiveChannel, string[]>;
export default class Inspect extends SfCommand<Info[]> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly flags: {
        dependencies: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        salesforce: Interfaces.BooleanFlag<boolean>;
        channels: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        locations: Interfaces.OptionFlag<string[], import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        cli: Interfaces.OptionFlag<CLI, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    };
    workingDir: string;
    archives: Archives;
    private flags;
    run(): Promise<Info[]>;
    private initArchives;
    private inspectArchives;
    private inspectNpm;
    private getDependencies;
    private logResults;
}
export {};
