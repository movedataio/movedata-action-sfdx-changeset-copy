"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable sf-plugin/command-example */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const package_1 = require("../../../package");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-release-management', 'npm.dependencies.pin');
class Pin extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Pin);
        const packageJson = await package_1.Package.create();
        const pkg = packageJson.pinDependencyVersions(flags.tag);
        if (flags.dryrun) {
            this.warn('Running in --dryrun mode. No changes will be written to the package.json.');
        }
        else {
            packageJson.writePackageJson();
        }
        this.table(pkg, {
            name: { header: 'Name' },
            version: { header: 'Version' },
            tag: { header: 'Tag' },
            alias: { header: 'Alias' },
        });
        return pkg;
    }
}
exports.default = Pin;
Pin.summary = messages.getMessage('description');
Pin.description = messages.getMessage('description');
Pin.flags = {
    dryrun: sf_plugins_core_1.Flags.boolean({
        char: 'd',
        default: false,
        summary: messages.getMessage('flags.dryrun'),
    }),
    tag: sf_plugins_core_1.Flags.string({
        char: 't',
        summary: messages.getMessage('flags.tag'),
        default: 'latest',
    }),
};
//# sourceMappingURL=pin.js.map