"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const package_1 = require("../../../package");
const inspectCommits_1 = require("../../../inspectCommits");
class Validate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Validate);
        const packages = [await package_1.Package.create()];
        const responses = await Promise.all(packages.map(async (pkg) => ({
            ...(await (0, inspectCommits_1.inspectCommits)(pkg)),
            name: pkg.name,
            currentVersion: pkg.packageJson.version,
        })));
        const majorBump = responses.some((resp) => !!resp.isMajorBump);
        if (majorBump) {
            throw new core_1.SfError('Major version bump detected. You must manually update the version in the package.json to release a new major version.', 'MajorBumpDetected');
        }
        const shouldRelease = responses.some((resp) => !!resp.shouldRelease) && !majorBump;
        this.log(shouldRelease.toString());
        return flags.verbose ? { shouldRelease, majorBump, packages: responses } : { shouldRelease, majorBump };
    }
}
exports.default = Validate;
Validate.summary = 'inspects the git commits to see if there are any commits that will warrant a new release';
Validate.description = 'inspects the git commits to see if there are any commits that will warrant a new release';
Validate.flags = {
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: 'show all commits for all packages (only works with --json flag)',
    }),
};
//# sourceMappingURL=validate.js.map