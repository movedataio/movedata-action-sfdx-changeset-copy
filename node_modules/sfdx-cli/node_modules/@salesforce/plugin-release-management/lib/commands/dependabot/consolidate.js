"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_2 = require("@octokit/core");
const kit_1 = require("@salesforce/kit");
const chalk_1 = require("chalk");
const shelljs_1 = require("shelljs");
const ts_types_1 = require("@salesforce/ts-types");
const dependabot_1 = require("../../dependabot");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-release-management', 'dependabot.consolidate');
class Consolidate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Consolidate);
        const baseRepoObject = await (0, dependabot_1.getOwnerAndRepo)(flags.owner, flags.repo);
        const baseBranch = (0, ts_types_1.ensureString)(flags['base-branch']);
        const targetBranch = (0, ts_types_1.ensureString)(flags['target-branch']);
        const auth = (0, ts_types_1.ensureString)(new kit_1.Env().getString('GH_TOKEN'), 'GH_TOKEN is required to be set in the environment');
        const octokit = new core_2.Octokit({ auth });
        const pullRequests = await octokit.request('GET /repos/{owner}/{repo}/pulls', baseRepoObject);
        const dependabotPRs = pullRequests.data.filter((d) => d.state === 'open' &&
            d.user.login === 'dependabot[bot]' &&
            (0, dependabot_1.meetsVersionCriteria)(d.title, flags['max-version-bump']) &&
            !flags.ignore.some((i) => d.title.includes(i)));
        let prBody = `This PR consolidates all dependabot PRs that are less than or equal to a ${flags['max-version-bump']} version bump${os.EOL}${os.EOL}`;
        for (const pr of dependabotPRs) {
            prBody += `Closes #${pr.number}${os.EOL}`;
        }
        const prTitle = `Consolidate ${flags['max-version-bump']} dependabot PRs`;
        this.log((0, chalk_1.bold)('PR Title:'));
        this.log(prTitle);
        this.log((0, chalk_1.bold)('PR Body:'));
        this.log(prBody);
        this.log((0, chalk_1.bold)('Commits:'));
        for (const pr of dependabotPRs) {
            this.log(`  ${(0, chalk_1.cyan)(pr.head.sha)} [#${pr.number} ${pr.title}]`);
        }
        if (!flags.dryrun) {
            try {
                this.exec('git fetch origin');
                this.exec('git fetch -p');
                this.exec(`git checkout ${baseBranch}`);
                this.exec('git pull');
                this.exec(`git checkout -b ${targetBranch}`);
                const shas = dependabotPRs.map((d) => d.head.sha);
                for (const sha of shas) {
                    this.exec(`git cherry-pick ${sha} --strategy-option=theirs`);
                }
                if (!flags['no-pr']) {
                    this.exec(`git push -u origin ${targetBranch} --no-verify`);
                    const response = await octokit.request('POST /repos/{owner}/{repo}/pulls', {
                        ...baseRepoObject,
                        head: targetBranch,
                        base: baseBranch,
                        body: prBody,
                        title: prTitle,
                    });
                    this.log();
                    // eslint-disable-next-line no-underscore-dangle
                    this.log(`${(0, chalk_1.green)('Created Pull Request:')} ${response.data._links.html.href}`);
                }
            }
            catch (err) {
                if (!(err instanceof Error) || typeof err !== 'string') {
                    throw err;
                }
                this.error(err);
            }
        }
    }
    exec(cmd, silent = false) {
        this.log((0, chalk_1.bold)(cmd));
        (0, shelljs_1.exec)(cmd, { silent });
    }
}
exports.default = Consolidate;
Consolidate.summary = messages.getMessage('description');
Consolidate.description = messages.getMessage('description');
Consolidate.examples = messages.getMessages('examples');
Consolidate.flags = {
    'max-version-bump': dependabot_1.maxVersionBumpFlag,
    'base-branch': sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('baseBranch'),
        char: 'b',
        default: 'main',
        required: true,
    }),
    'target-branch': sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('targetBranch'),
        char: 't',
        default: 'consolidate-dependabot',
        required: true,
    }),
    ignore: (0, sf_plugins_core_1.arrayWithDeprecation)({
        summary: messages.getMessage('ignore'),
    }),
    dryrun: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('dryrun'),
        char: 'd',
        default: false,
    }),
    'no-pr': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('noPR'),
        default: false,
    }),
    owner: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('owner'),
        char: 'o',
    }),
    repo: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('repo'),
        char: 'r',
        dependsOn: ['owner'],
    }),
};
//# sourceMappingURL=consolidate.js.map