"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisplayUserCommand = void 0;
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'display');
class DisplayUserCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DisplayUserCommand);
        this.logger = await core_1.Logger.child(this.constructor.name);
        const username = (0, ts_types_1.ensureString)(flags['target-org'].getUsername());
        const userAuthDataArray = await flags['target-org'].readUserAuthFiles();
        // userAuthDataArray contains all the Org's users AuthInfo, we just need the default or -o, which is in the username variable
        const userAuthData = userAuthDataArray
            .find((uat) => uat.getFields().username === username)
            ?.getFields(true);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        let profileName = userAuthData?.userProfileName;
        let userId = userAuthData?.userId;
        try {
            // the user executing this command may not have access to the Profile sObject.
            if (!profileName) {
                const PROFILE_NAME_QUERY = `SELECT name FROM Profile WHERE Id IN (SELECT ProfileId FROM User WHERE username='${username}')`;
                profileName = (await conn.singleRecordQuery(PROFILE_NAME_QUERY)).Name;
            }
        }
        catch (err) {
            profileName = 'unknown';
            this.logger.debug(`Query for the profile name failed for username: ${username} with message: ${(0, ts_types_1.getString)(err, 'message')}`);
        }
        try {
            if (!userId) {
                const USER_QUERY = `SELECT id FROM User WHERE username='${username}'`;
                userId = (await conn.singleRecordQuery(USER_QUERY)).Id;
            }
        }
        catch (err) {
            userId = 'unknown';
            this.logger.debug(`Query for the user ID failed for username: ${username} with message: ${(0, ts_types_1.getString)(err, 'message')}`);
        }
        const result = {
            accessToken: conn.accessToken,
            id: userId,
            instanceUrl: userAuthData?.instanceUrl,
            loginUrl: userAuthData?.loginUrl,
            orgId: flags['target-org'].getOrgId(),
            profileName,
            username,
        };
        const stateAggregator = await core_1.StateAggregator.getInstance();
        const alias = stateAggregator.aliases.get(username);
        if (alias) {
            result.alias = alias;
        }
        if (userAuthData?.password) {
            result.password = userAuthData.password;
        }
        this.warn(messages.getMessage('securityWarning'));
        this.log('');
        this.print(result);
        return result;
    }
    print(result) {
        const columns = {
            key: { header: 'key' },
            label: { header: 'label' },
        };
        const tableRow = [];
        // to get proper capitalization and spacing, enter the rows
        tableRow.push({ key: 'Username', label: result.username ?? 'unknown' });
        tableRow.push({ key: 'Profile Name', label: result.profileName });
        tableRow.push({ key: 'Id', label: result.id });
        tableRow.push({ key: 'Org Id', label: result.orgId });
        tableRow.push({ key: 'Access Token', label: result.accessToken ?? '' });
        tableRow.push({ key: 'Instance Url', label: result.instanceUrl ?? '' });
        tableRow.push({ key: 'Login Url', label: result.loginUrl ?? '' });
        if (result.alias)
            tableRow.push({ key: 'Alias', label: result.alias });
        if (result.password)
            tableRow.push({ key: 'Password', label: result.password });
        this.styledHeader('User Description');
        this.table(tableRow, columns);
    }
}
exports.DisplayUserCommand = DisplayUserCommand;
DisplayUserCommand.deprecateAliases = true;
DisplayUserCommand.aliases = ['force:user:display'];
DisplayUserCommand.summary = messages.getMessage('summary');
DisplayUserCommand.description = messages.getMessage('description');
DisplayUserCommand.examples = messages.getMessages('examples');
DisplayUserCommand.flags = {
    'target-dev-hub': {
        ...sf_plugins_core_1.optionalHubFlagWithDeprecations,
        hidden: true,
        deprecated: {
            message: messages.getMessage('flags.target-hub.deprecation'),
        },
    },
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=user.js.map