"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssignPermSetCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const assign_1 = require("../../../baseCommands/user/permset/assign");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'permset.assign');
class AssignPermSetCommand extends assign_1.UserPermSetAssignBaseCommand {
    async run() {
        const { flags } = await this.parse(AssignPermSetCommand);
        this.aliasOrUsernames = (0, kit_1.ensureArray)(flags['on-behalf-of'] ?? flags['target-org'].getUsername());
        this.permSetNames = flags.name;
        this.connection = flags['target-org'].getConnection(flags['api-version']);
        this.org = await core_1.Org.create({ connection: this.connection });
        return this.assign();
    }
}
exports.AssignPermSetCommand = AssignPermSetCommand;
AssignPermSetCommand.summary = messages.getMessage('summary');
AssignPermSetCommand.description = messages.getMessage('description');
AssignPermSetCommand.examples = messages.getMessages('examples');
AssignPermSetCommand.flags = {
    name: sf_plugins_core_1.Flags.string({
        aliases: ['permsetname'],
        deprecateAliases: true,
        char: 'n',
        summary: messages.getMessage('flags.permsetName.summary'),
        required: true,
        multiple: true,
    }),
    'on-behalf-of': sf_plugins_core_1.Flags.string({
        char: 'b',
        summary: messages.getMessage('flags.onBehalfOf.summary'),
        aliases: ['onbehalfof'],
        deprecateAliases: true,
        multiple: true,
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({ summary: messages.getMessage('flags.target-org.summary'), required: true }),
    'api-version': sf_plugins_core_1.Flags.orgApiVersion(),
};
//# sourceMappingURL=permset.js.map