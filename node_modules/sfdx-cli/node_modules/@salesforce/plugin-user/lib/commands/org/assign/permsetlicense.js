"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssignPermSetLicenseCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const assign_1 = require("../../../baseCommands/user/permsetlicense/assign");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'permsetlicense.assign');
class AssignPermSetLicenseCommand extends assign_1.UserPermSetLicenseAssignBaseCommand {
    async run() {
        const { flags } = await this.parse(AssignPermSetLicenseCommand);
        const username = flags['target-org'].getUsername();
        this.usernamesOrAliases = (0, kit_1.ensureArray)(flags['on-behalf-of'] ?? username);
        this.pslName = flags.name;
        this.connection = flags['target-org'].getConnection(flags['api-version']);
        return this.assign();
    }
}
exports.AssignPermSetLicenseCommand = AssignPermSetLicenseCommand;
AssignPermSetLicenseCommand.summary = messages.getMessage('summary');
AssignPermSetLicenseCommand.description = messages.getMessage('description');
AssignPermSetLicenseCommand.examples = messages.getMessages('examples');
AssignPermSetLicenseCommand.flags = {
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        required: true,
        aliases: ['perm-set-license', 'psl'],
    }),
    'on-behalf-of': (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'b',
        summary: messages.getMessage('flags.onBehalfOf.summary'),
        aliases: ['onbehalfof'],
        deprecateAliases: true,
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({ summary: messages.getMessage('flags.target-org.summary'), required: true }),
    'api-version': sf_plugins_core_1.Flags.orgApiVersion(),
};
//# sourceMappingURL=permsetlicense.js.map