"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForceUserPasswordGenerateCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const generate_1 = require("../../../../baseCommands/user/password/generate");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'password.generate');
class ForceUserPasswordGenerateCommand extends generate_1.UserPasswordGenerateBaseCommand {
    async run() {
        const { flags } = await this.parse(ForceUserPasswordGenerateCommand);
        this.usernames = (0, kit_1.ensureArray)(flags['on-behalf-of'] ?? flags['target-org'].getUsername());
        this.length = flags.length;
        this.complexity = flags.complexity;
        this.org = flags['target-org'];
        this.connection = this.org.getConnection(flags['api-version']);
        return this.generate();
    }
}
exports.ForceUserPasswordGenerateCommand = ForceUserPasswordGenerateCommand;
ForceUserPasswordGenerateCommand.summary = messages.getMessage('summary');
ForceUserPasswordGenerateCommand.description = messages.getMessage('description');
ForceUserPasswordGenerateCommand.examples = messages.getMessages('examples');
ForceUserPasswordGenerateCommand.flags = {
    'on-behalf-of': (0, sf_plugins_core_1.arrayWithDeprecation)({
        aliases: ['onbehalfof'],
        deprecateAliases: true,
        char: 'o',
        summary: messages.getMessage('flags.onBehalfOf.summary'),
    }),
    length: sf_plugins_core_1.Flags.integer({
        char: 'l',
        summary: messages.getMessage('flags.length.summary'),
        min: 8,
        max: 1000,
        default: 13,
    }),
    // the higher the value, the stronger the password
    complexity: sf_plugins_core_1.Flags.integer({
        char: 'c',
        summary: messages.getMessage('flags.complexity.summary'),
        min: 0,
        max: 5,
        default: 5,
    }),
    'target-dev-hub': {
        ...sf_plugins_core_1.optionalHubFlagWithDeprecations,
        hidden: true,
        deprecated: {
            message: messages.getMessage('flags.target-hub.deprecation'),
        },
    },
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'u',
        summary: messages.getMessage('flags.target-org.summary'),
        aliases: ['targetusername'],
        deprecateAliases: true,
        required: true,
    }),
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=generate.js.map