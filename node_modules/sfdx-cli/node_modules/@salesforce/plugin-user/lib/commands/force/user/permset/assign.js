"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForceUserPermSetAssignCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const assign_1 = require("../../../../baseCommands/user/permset/assign");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'permset.assign');
class ForceUserPermSetAssignCommand extends assign_1.UserPermSetAssignBaseCommand {
    async run() {
        const { flags } = await this.parse(ForceUserPermSetAssignCommand);
        this.aliasOrUsernames = (0, kit_1.ensureArray)(flags['on-behalf-of'] ?? flags['target-org'].getUsername());
        this.permSetNames = flags['perm-set-name'];
        this.connection = flags['target-org'].getConnection(flags['api-version']);
        this.org = await core_1.Org.create({ connection: this.connection });
        return this.assign();
    }
}
exports.ForceUserPermSetAssignCommand = ForceUserPermSetAssignCommand;
ForceUserPermSetAssignCommand.hidden = true;
ForceUserPermSetAssignCommand.summary = messages.getMessage('summary');
ForceUserPermSetAssignCommand.description = messages.getMessage('description.force');
ForceUserPermSetAssignCommand.examples = messages.getMessages('examples.force');
ForceUserPermSetAssignCommand.flags = {
    'perm-set-name': (0, sf_plugins_core_1.arrayWithDeprecation)({
        aliases: ['permsetname'],
        deprecateAliases: true,
        char: 'n',
        summary: messages.getMessage('flags.permsetName.summary'),
        required: true,
    }),
    'on-behalf-of': (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'o',
        summary: messages.getMessage('flags.onBehalfOf.summary'),
        aliases: ['onbehalfof'],
        deprecateAliases: true,
    }),
    'target-org': sf_plugins_core_1.Flags.requiredOrg({
        char: 'u',
        summary: messages.getMessage('flags.target-org.summary'),
        aliases: ['targetusername'],
        deprecateAliases: true,
        required: true,
    }),
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=assign.js.map