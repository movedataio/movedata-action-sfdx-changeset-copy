"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermSetAssignBaseCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
class UserPermSetAssignBaseCommand extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.aliasOrUsernames = [];
        this.permSetNames = [];
        this.successes = [];
        this.failures = [];
    }
    async assign() {
        try {
            // sequentially to avoid auth file collisions until configFile if safer
            /* eslint-disable no-await-in-loop */
            for (const aliasOrUsername of this.aliasOrUsernames) {
                // Attempt to convert any aliases to usernames.  Not found alias will be **assumed** to be a username
                const username = (await core_1.StateAggregator.getInstance()).aliases.resolveUsername(aliasOrUsername);
                const user = await core_1.User.create({ org: this.org });
                // get userId of whomever the permset will be assigned to via query to avoid AuthInfo if remote user
                const queryResult = await this.connection.singleRecordQuery(`SELECT Id FROM User WHERE Username='${username}'`);
                // this is hard to parallelize because core returns void instead of some result object we can handle.  Promise.allSettled might work
                for (const permSetName of this.permSetNames) {
                    try {
                        await user.assignPermissionSets(queryResult.Id, [permSetName]);
                        this.successes.push({
                            name: aliasOrUsername,
                            value: permSetName,
                        });
                    }
                    catch (e) {
                        const err = e;
                        this.failures.push({
                            name: aliasOrUsername,
                            message: err.message,
                        });
                    }
                }
            }
            /* eslint-enable no-await-in-loop */
        }
        catch (e) {
            if (e instanceof Error || typeof e === 'string') {
                throw core_1.SfError.wrap(e);
            }
            throw e;
        }
        this.print();
        this.setExitCode();
        return {
            successes: this.successes,
            failures: this.failures,
        };
    }
    print() {
        if (this.failures.length > 0 && this.successes.length > 0) {
            this.styledHeader('Partial Success');
            this.styledHeader('Permsets Assigned');
            this.table(this.successes, { name: { header: 'Username' }, value: { header: 'Permission Set Assignment' } });
            this.log('');
            this.styledHeader('Failures');
            this.table(this.failures, { name: { header: 'Username' }, message: { header: 'Error Message' } });
        }
        else if (this.successes.length > 0) {
            this.styledHeader('Permsets Assigned');
            this.table(this.successes, { name: { header: 'Username' }, value: { header: 'Permission Set Assignment' } });
        }
        else if (this.failures.length > 0) {
            this.styledHeader('Failures');
            this.table(this.failures, { name: { header: 'Username' }, message: { header: 'Error Message' } });
        }
    }
    setExitCode() {
        if (this.failures.length && this.successes.length) {
            process.exitCode = 68;
        }
        else if (this.failures.length) {
            process.exitCode = 1;
        }
        else if (this.successes.length) {
            process.exitCode = 0;
        }
    }
}
exports.UserPermSetAssignBaseCommand = UserPermSetAssignBaseCommand;
//# sourceMappingURL=assign.js.map