"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPasswordGenerateBaseCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'password.generate');
class UserPasswordGenerateBaseCommand extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.passwordData = [];
    }
    async generate() {
        const passwordCondition = {
            length: this.length,
            complexity: this.complexity,
        };
        // sequentially to avoid auth file collisions until configFile if safer
        /* eslint-disable no-await-in-loop */
        for (const aliasOrUsername of this.usernames) {
            try {
                // Convert any aliases to usernames
                // fetch will return undefined if there's no Alias for that name
                const username = (await core_1.StateAggregator.getInstance()).aliases.resolveUsername(aliasOrUsername);
                const authInfo = await core_1.AuthInfo.create({ username });
                const connection = await core_1.Connection.create({ authInfo });
                connection.setApiVersion(this.connection.getApiVersion());
                const org = await core_1.Org.create({ connection });
                const user = await core_1.User.create({ org });
                const password = core_1.User.generatePasswordUtf8(passwordCondition);
                // we only need the Id, so instead of User.retrieve we'll just query
                // this avoids permission issues if ProfileId is restricted for the user querying for it
                const result = await connection.singleRecordQuery(`SELECT Id FROM User WHERE Username='${username}'`);
                // userId is used by `assignPassword` so we need to set it here
                authInfo.getFields().userId = result.Id;
                await user.assignPassword(authInfo, password);
                password.value((pass) => {
                    this.passwordData.push({ username, password: pass.toString('utf-8') });
                    authInfo.update({ password: pass.toString('utf-8') });
                });
                await authInfo.save();
            }
            catch (e) {
                const err = e;
                if (err.message.includes('Cannot set password for self') ||
                    err.message.includes('The requested Resource does not exist')) {
                    // we don't have access to the apiVersion from what happened in the try, so until v51 is r2, we have to check versions the hard way
                    const authInfo = await core_1.AuthInfo.create({ username: aliasOrUsername });
                    const connection = await core_1.Connection.create({ authInfo });
                    connection.setApiVersion(this.connection.getApiVersion());
                    if (parseInt(connection.getApiVersion(), 10) >= 51) {
                        throw messages.createError('noSelfSetError');
                    }
                    throw new core_1.SfError(messages.getMessage('noSelfSetErrorV50'), 'noSelfSetErrorError');
                }
                throw core_1.SfError.wrap(err);
            }
        }
        /* eslint-enable no-await-in-loop */
        this.print();
        return this.passwordData.length === 1 ? this.passwordData[0] : this.passwordData;
    }
    print() {
        if (this.passwordData) {
            const successMsg = messages.getMessage('success', [this.passwordData[0].password, this.passwordData[0].username]);
            const viewMsg = messages.getMessage('viewWithCommand', [this.passwordData[0].username]);
            this.log(`${successMsg}${os.EOL}${viewMsg}`);
        }
        else {
            this.log(messages.getMessage('successMultiple', [os.EOL]));
            const columnData = {
                username: { header: 'USERNAME' },
                password: { header: 'PASSWORD' },
            };
            this.table(this.passwordData, columnData);
        }
    }
}
exports.UserPasswordGenerateBaseCommand = UserPasswordGenerateBaseCommand;
//# sourceMappingURL=generate.js.map