"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPackage = exports.createPackageDirEntry = exports.createPackageRequestFromContext = void 0;
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const pkgUtils = require("../utils/packageUtils");
const packageUtils_1 = require("../utils/packageUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/packaging', 'package_create');
function createPackageRequestFromContext(project, options) {
    const namespace = options.noNamespace ? '' : project.getSfProjectJson().getContents().namespace || '';
    return {
        Name: options.name,
        Description: options.description,
        NamespacePrefix: namespace,
        ContainerOptions: options.packageType,
        IsOrgDependent: options.orgDependent,
        PackageErrorUsername: options.errorNotificationUsername,
    };
}
exports.createPackageRequestFromContext = createPackageRequestFromContext;
/**
 * Create packageDirectory json entry for this package that can be written to sfdx-project.json
 *
 * @param project
 * @param packageId the 0Ho id of the package to create the entry for
 * @private
 */
function createPackageDirEntry(project, options) {
    let packageDirs = project.getSfProjectJson().getContents().packageDirectories;
    let isNew = false;
    if (!packageDirs) {
        packageDirs = [];
    }
    // see if package exists (exists means it has an id or package)
    let packageDir = packageDirs.find((pd) => pd.path === options.path && !pd.id && !pd.package);
    if (!packageDir) {
        // no match - create a new one
        isNew = true;
        packageDir = pkgUtils.DEFAULT_PACKAGE_DIR;
        packageDir.path = packageDir.path || options.path;
    }
    if (packageDirs.length === 0) {
        packageDir.default = true;
    }
    else if (isNew) {
        packageDir.default = !packageDirs.find((pd) => pd.default);
    }
    packageDir.package = packageDir.package || options.name;
    packageDir.versionName = packageDir.versionName || pkgUtils.DEFAULT_PACKAGE_DIR.versionName;
    packageDir.versionNumber = packageDir.versionNumber || pkgUtils.DEFAULT_PACKAGE_DIR.versionNumber;
    packageDir.versionDescription = packageDir.versionDescription || options.description;
    return packageDir;
}
exports.createPackageDirEntry = createPackageDirEntry;
async function createPackage(connection, project, options) {
    // strip trailing slash from path param
    options.path = options.path.replace(/\/$/, '');
    const request = createPackageRequestFromContext(project, options);
    let packageId = null;
    const createResult = await connection.tooling
        .sobject('Package2')
        .create(request)
        .catch((err) => {
        const error = (0, ts_types_1.isString)(err) ? new Error(err) : err;
        throw core_1.SfError.wrap((0, packageUtils_1.applyErrorAction)((0, packageUtils_1.massageErrorMessage)(error)));
    });
    if (!createResult.success) {
        throw pkgUtils.combineSaveErrors('Package2', 'create', createResult.errors);
    }
    packageId = createResult.id;
    const queryResult = await connection.tooling.query(`SELECT Id FROM Package2 WHERE Id='${packageId}'`);
    if (!queryResult?.records[0]) {
        throw messages.createError('unableToFindPackageWithId', [packageId]);
    }
    const record = queryResult.records[0];
    if (!process.env.SFDX_PROJECT_AUTOUPDATE_DISABLE_FOR_PACKAGE_CREATE) {
        const packageDirectory = createPackageDirEntry(project, options);
        project.getSfProjectJson().addPackageDirectory(packageDirectory);
        project.getSfProjectJson().addPackageAlias(options.name, record.Id);
        await project.getSfProjectJson().write();
    }
    return { Id: record.Id };
}
exports.createPackage = createPackage;
//# sourceMappingURL=packageCreate.js.map