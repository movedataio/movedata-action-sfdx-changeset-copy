"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityPublishResource = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const url_1 = require("url");
const core_1 = require("@salesforce/core");
const CommunitiesServices_1 = require("../service/CommunitiesServices");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'publish');
class CommunityPublishResource {
    constructor(options) {
        this.options = options;
    }
    async fetchRelativeConnectUrl() {
        return `/connect/communities/${await this.fetchCommunityId()}/publish`;
    }
    // eslint-disable-next-line class-methods-use-this
    getRequestMethod() {
        return 'POST';
    }
    // eslint-disable-next-line class-methods-use-this
    fetchPostParams() {
        return Promise.resolve(JSON.stringify({}));
    }
    handleSuccess(result) {
        return {
            id: result.id,
            message: messages.getMessage('response.message'),
            name: result.name,
            status: this.info.status,
            url: new url_1.URL(result.url).toString(),
        };
    }
    // eslint-disable-next-line class-methods-use-this
    handleError(error) {
        throw error;
    }
    async fetchCommunityId() {
        this.info = await CommunitiesServices_1.CommunitiesServices.fetchCommunityInfoFromName(this.options.org, this.options.name);
        if (!this.info) {
            throw messages.createError('error.communityNotExists', [this.options.name]);
        }
        return this.info.id;
    }
}
exports.CommunityPublishResource = CommunityPublishResource;
//# sourceMappingURL=CommunityPublishResource.js.map