"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityListTemplatesCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const CommunityTemplatesResource_1 = require("../../../shared/community/connect/CommunityTemplatesResource");
const ConnectExecutor_1 = require("../../../shared/connect/services/ConnectExecutor");
const utils_1 = require("../../../shared/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'template.list');
/**
 * A command to fetch available community templates a community. This is just an sfdx wrapper around
 * the get available community templates connect endpoint
 */
class CommunityListTemplatesCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(CommunityListTemplatesCommand);
        const listTemplateCommand = new CommunityTemplatesResource_1.CommunityTemplatesResource();
        return new ConnectExecutor_1.ConnectExecutor(listTemplateCommand, await (0, utils_1.applyApiVersionToOrg)(flags['target-org'], flags['api-version']))
            .callConnectApi()
            .then((results) => {
            this.displayResults(results);
            return results;
        });
    }
    displayResults(results) {
        const columns = {
            templateName: { header: 'Template Name' },
            publisher: { header: 'Publisher' },
        };
        this.styledHeader(messages.getMessage('response.styledHeader'));
        this.table(results.templates, columns);
        this.log();
        this.log(messages.getMessage('response.TotalField'), results.total.toString());
    }
}
exports.CommunityListTemplatesCommand = CommunityListTemplatesCommand;
CommunityListTemplatesCommand.deprecateAliases = true;
CommunityListTemplatesCommand.aliases = ['force:community:template:list'];
CommunityListTemplatesCommand.summary = messages.getMessage('summary');
CommunityListTemplatesCommand.description = messages.getMessage('description');
CommunityListTemplatesCommand.examples = messages.getMessages('examples');
CommunityListTemplatesCommand.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=template.js.map