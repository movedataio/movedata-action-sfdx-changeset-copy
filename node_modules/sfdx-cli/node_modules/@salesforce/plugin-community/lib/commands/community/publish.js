"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityPublishCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const CommunityPublishResource_1 = require("../../shared/community/connect/CommunityPublishResource");
const ConnectExecutor_1 = require("../../shared/connect/services/ConnectExecutor");
const utils_1 = require("../../shared/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'publish');
/**
 * A command to publish a community. This is just an sfdx wrapper around
 * the community publish connect endpoint
 */
class CommunityPublishCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(CommunityPublishCommand);
        const publishCommand = new CommunityPublishResource_1.CommunityPublishResource({
            name: flags.name,
            org: flags['target-org'],
        });
        return new ConnectExecutor_1.ConnectExecutor(publishCommand, await (0, utils_1.applyApiVersionToOrg)(flags['target-org'], flags['api-version']))
            .callConnectApi()
            .then((results) => {
            this.displayResults(results);
            return results;
        });
    }
    displayResults(results) {
        const columns = {
            id: { header: 'Id' },
            message: { header: 'Message' },
            name: { header: 'Name' },
            status: { header: 'Status' },
            url: { header: 'Url' },
        };
        this.styledHeader(messages.getMessage('response.styleHeader'));
        this.table([results], columns);
    }
}
exports.CommunityPublishCommand = CommunityPublishCommand;
CommunityPublishCommand.deprecateAliases = true;
CommunityPublishCommand.aliases = ['force:community:publish'];
CommunityPublishCommand.summary = messages.getMessage('summary');
CommunityPublishCommand.description = messages.getMessage('description');
CommunityPublishCommand.examples = messages.getMessages('examples');
CommunityPublishCommand.flags = {
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        required: true,
    }),
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=publish.js.map