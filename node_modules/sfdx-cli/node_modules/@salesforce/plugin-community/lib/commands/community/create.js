"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityCreateCommand = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const CommunityNameValueParser_1 = require("../../shared/community/commands/CommunityNameValueParser");
const ConnectExecutor_1 = require("../../shared/connect/services/ConnectExecutor");
const CommunityCreateResource_1 = require("../../shared/community/connect/CommunityCreateResource");
const utils_1 = require("../../shared/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'create');
const MESSAGE_KEY = 'message';
const NAME_KEY = 'name';
const ACTION_KEY = 'action';
/**
 * A command to create a community.
 * This is just an sfdx wrapper around the community create connect endpoint
 */
class CommunityCreateCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        this.logger = core_1.Logger.childFromRoot(this.constructor.name);
        const { flags, argv } = await this.parse(CommunityCreateCommand);
        const varargs = this.parseVarargs(argv);
        const createCommand = new CommunityCreateResource_1.CommunityCreateResource({
            name: flags.name,
            urlPathPrefix: flags['url-path-prefix'],
            templateName: flags['template-name'],
            description: flags.description,
            templateParams: varargs['templateParams'],
        });
        return new ConnectExecutor_1.ConnectExecutor(createCommand, await (0, utils_1.applyApiVersionToOrg)(flags['target-org'], flags['api-version']))
            .callConnectApi()
            .then((results) => {
            this.displayResults(results);
            return results;
        });
    }
    parseVarargs(args) {
        this.logger.debug(`parseVarargs([${args.join(', ')}])`);
        // It never looks like args is ever undefined as long as varargs is turned on for the command...
        // But since the signature says it's optional, we should probably gate this even though it's unnecessary right now.
        if (args === undefined) {
            return {};
        }
        const parser = new CommunityNameValueParser_1.CommunityNameValueParser(CommunityCreateCommand.validationPatterns);
        const values = parser.parse(args);
        this.logger.debug('parseVarargs result:' + JSON.stringify(values));
        return values;
    }
    displayResults(results) {
        const columns = {
            [NAME_KEY]: { header: 'Name' },
            [MESSAGE_KEY]: { header: 'Message' },
            [ACTION_KEY]: { header: 'Action' },
        };
        this.styledHeader(messages.getMessage('response.styleHeader'));
        this.table([results], columns, { 'no-truncate': true });
    }
}
exports.CommunityCreateCommand = CommunityCreateCommand;
CommunityCreateCommand.deprecateAliases = true;
CommunityCreateCommand.aliases = ['force:community:create'];
CommunityCreateCommand.summary = messages.getMessage('summary');
CommunityCreateCommand.description = messages.getMessage('description');
CommunityCreateCommand.examples = messages.getMessages('examples');
CommunityCreateCommand.strict = false;
CommunityCreateCommand.flags = {
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        required: true,
    }),
    'template-name': sf_plugins_core_1.Flags.string({
        char: 't',
        summary: messages.getMessage('flags.templateName.summary'),
        description: messages.getMessage('flags.templateName.description'),
        required: true,
        deprecateAliases: true,
        aliases: ['templatename'],
    }),
    'url-path-prefix': sf_plugins_core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.urlPathPrefix.summary'),
        description: messages.getMessage('flags.urlPathPrefix.description'),
        // The api requires you to pass this, it accepts an empty string
        default: '',
        deprecateAliases: true,
        aliases: ['urlpathprefix'],
    }),
    description: sf_plugins_core_1.Flags.string({
        char: 'd',
        summary: messages.getMessage('flags.description.summary'),
        description: messages.getMessage('flags.description.description'),
    }),
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
};
CommunityCreateCommand.validationPatterns = [
    // Exact matches
    'name',
    'urlPathPrefix',
    'templateName',
    'description',
    // templateParams.*, but must be only word characters (e.g. no spaces, special chars)
    'templateParams(\\.\\w+)+',
];
//# sourceMappingURL=create.js.map