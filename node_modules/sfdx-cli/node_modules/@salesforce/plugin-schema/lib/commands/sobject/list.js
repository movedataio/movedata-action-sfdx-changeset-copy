"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SObjectList = exports.SObjectType = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("node:os");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-schema', 'list');
var SObjectType;
(function (SObjectType) {
    SObjectType[SObjectType["ALL"] = 0] = "ALL";
    SObjectType[SObjectType["STANDARD"] = 1] = "STANDARD";
    SObjectType[SObjectType["CUSTOM"] = 2] = "CUSTOM";
})(SObjectType = exports.SObjectType || (exports.SObjectType = {}));
class SObjectList extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(SObjectList);
        const category = flags.sobject.toUpperCase();
        const type = SObjectType[category];
        const allDescriptions = await flags['target-org'].getConnection(flags['api-version']).describeGlobal();
        const sobjects = allDescriptions.sobjects
            .filter((sobject) => {
            const isCustom = sobject.custom;
            return (type === SObjectType.ALL ||
                (type === SObjectType.CUSTOM && isCustom) ||
                (type === SObjectType.STANDARD && !isCustom));
        })
            .map((sobject) => sobject.name);
        if (sobjects.length) {
            this.log(sobjects.join(os.EOL));
        }
        else {
            this.log(messages.getMessage('noTypeFound', [SObjectType[type]]));
        }
        return sobjects;
    }
}
exports.SObjectList = SObjectList;
SObjectList.summary = messages.getMessage('summary');
SObjectList.description = messages.getMessage('description');
SObjectList.examples = messages.getMessages('examples');
SObjectList.aliases = ['force:schema:sobject:list'];
SObjectList.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        default: 'ALL',
        summary: messages.getMessage('flags.sobject.summary'),
        aliases: ['sobjecttypecategory', 'c'],
        parse: (val) => {
            const lowercasedType = val.toLowerCase();
            if (!['all', 'standard', 'custom'].includes(lowercasedType)) {
                throw messages.createError('invalid-sobject-type');
            }
            return Promise.resolve(lowercasedType);
        },
    }),
};
//# sourceMappingURL=list.js.map