"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSandboxTableAsText = exports.getTableDataFromProcessObj = exports.SandboxProgress = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@oclif/core");
const timeUtils_1 = require("../shared/timeUtils");
const stagedProgress_1 = require("./stagedProgress");
const columns = {
    key: { header: 'Field' },
    value: { header: 'Value' },
};
class SandboxProgress extends stagedProgress_1.StagedProgress {
    constructor(stageNames = ['Pending', 'Processing', 'Activating', 'Authenticating']) {
        super(stageNames);
    }
    // eslint-disable-next-line class-methods-use-this
    getLogSandboxProcessResult(result) {
        const { sandboxProcessObj } = result;
        const sandboxReadyForUse = `Sandbox ${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id}) is ready for use.`;
        return sandboxReadyForUse;
    }
    // eslint-disable-next-line class-methods-use-this
    getSandboxProgress(
    // sometimes an undefined sandboxRes is passed in
    event) {
        const waitingOnAuth = 'waitingOnAuth' in event ? event.waitingOnAuth : false;
        const { sandboxProcessObj } = event;
        const waitTimeInSec = 'remainingWait' in event ? event.remainingWait ?? 0 : 0;
        const sandboxIdentifierMsg = `${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id})`;
        return {
            id: sandboxIdentifierMsg,
            status: waitingOnAuth || sandboxProcessObj.Status === 'Completed' ? 'Authenticating' : sandboxProcessObj.Status,
            percentComplete: sandboxProcessObj.CopyProgress,
            remainingWaitTime: waitTimeInSec,
            remainingWaitTimeHuman: waitTimeInSec === 0 ? '' : `${(0, timeUtils_1.getClockForSeconds)(waitTimeInSec)} until timeout.`,
        };
    }
    formatProgressStatus(withClock = true) {
        const table = (0, exports.getSandboxTableAsText)(undefined, this.statusData?.sandboxProcessObj).join(os.EOL);
        return [
            withClock && this.statusData
                ? `${(0, timeUtils_1.getClockForSeconds)(this.statusData.sandboxProgress.remainingWaitTime)} until timeout. ${this.statusData.sandboxProgress.percentComplete}%`
                : undefined,
            table,
            '---------------------',
            'Sandbox Create Stages',
            this.formatStages(),
        ]
            .filter((line) => line)
            .join(os.EOL);
    }
    // eslint-disable-next-line class-methods-use-this
    mapCurrentStage(currentStage) {
        switch (currentStage) {
            case 'Pending Remote Creation':
                return 'Pending';
            case 'Remote Sandbox Created':
                return 'Pending';
            case 'Completed':
                return 'Authenticating';
            default:
                return currentStage;
        }
    }
}
exports.SandboxProgress = SandboxProgress;
const getTableDataFromProcessObj = (sandboxProcessObj, authUserName) => [
    { key: 'Id', value: sandboxProcessObj.Id },
    { key: 'SandboxName', value: sandboxProcessObj.SandboxName },
    { key: 'Status', value: sandboxProcessObj.Status },
    { key: 'LicenseType', value: sandboxProcessObj.LicenseType },
    { key: 'SandboxInfoId', value: sandboxProcessObj.SandboxInfoId },
    { key: 'Created Date', value: sandboxProcessObj.CreatedDate },
    { key: 'CopyProgress', value: `${sandboxProcessObj.CopyProgress}%` },
    ...(sandboxProcessObj.SourceId ? [{ key: 'SourceId', value: sandboxProcessObj.SourceId }] : []),
    ...(sandboxProcessObj.Description ? [{ key: 'Description', value: sandboxProcessObj.Description }] : []),
    ...(sandboxProcessObj.SandboxOrganization
        ? [{ key: 'SandboxOrg', value: sandboxProcessObj.SandboxOrganization }]
        : []),
    ...(sandboxProcessObj.ApexClassId ? [{ key: 'ApexClassId', value: sandboxProcessObj.ApexClassId }] : []),
    ...(sandboxProcessObj.Description ? [{ key: 'Description', value: sandboxProcessObj.Description }] : []),
    ...(authUserName ? [{ key: 'Authorized Sandbox Username', value: authUserName }] : []),
];
exports.getTableDataFromProcessObj = getTableDataFromProcessObj;
const getSandboxTableAsText = (sandboxUsername, sandboxProgress) => {
    if (!sandboxProgress) {
        return [];
    }
    const tableRows = [];
    core_1.ux.table((0, exports.getTableDataFromProcessObj)(sandboxProgress, sandboxUsername), columns, {
        printLine: (s) => {
            tableRows.push(s);
        },
    });
    return tableRows;
};
exports.getSandboxTableAsText = getSandboxTableAsText;
//# sourceMappingURL=sandboxProgress.js.map