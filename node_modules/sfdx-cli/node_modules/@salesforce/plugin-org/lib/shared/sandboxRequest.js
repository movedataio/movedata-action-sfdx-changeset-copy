"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSandboxRequest = exports.generateSboxName = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const core_1 = require("@salesforce/core");
const utils_1 = require("./utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'create');
const cloneMessages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'clone');
const generateSboxName = async () => {
    // sandbox names are 10 chars or less, a radix of 36 = [a-z][0-9]
    // technically without querying the production org, the generated name could already exist, but the chances of that are lower than the perf penalty of querying and verifying
    const generated = `sbx${Date.now().toString(36).slice(-7)}`;
    await core_1.Lifecycle.getInstance().emitWarning(`No SandboxName defined, generating new SandboxName: ${generated}`);
    return generated;
};
exports.generateSboxName = generateSboxName;
async function createSandboxRequest(isClone = false, definitionFile, logger, properties) {
    if (!logger) {
        logger = await core_1.Logger.child('createSandboxRequest');
    }
    logger.debug('Varargs: %s ', properties);
    const sandboxDefFileContents = definitionFile
        ? (0, utils_1.lowerToUpper)(JSON.parse(fs.readFileSync(definitionFile, 'utf-8')))
        : {};
    const capitalizedVarArgs = properties ? (0, utils_1.lowerToUpper)(properties) : {};
    // varargs override file input
    const sandboxReqWithName = {
        ...sandboxDefFileContents,
        ...capitalizedVarArgs,
        SandboxName: capitalizedVarArgs.SandboxName ??
            sandboxDefFileContents.SandboxName ??
            (await (0, exports.generateSboxName)()),
    };
    const { SourceSandboxName, ...sandboxReq } = sandboxReqWithName;
    logger.debug('SandboxRequest after merging DefFile and Varargs: %s ', sandboxReq);
    if (isClone) {
        if (!SourceSandboxName) {
            // error - we need SourceSandboxName to know which sandbox to clone from
            throw new core_1.SfError(cloneMessages.getMessage('missingSourceSandboxName', ['SourceSandboxName']), cloneMessages.getMessage('missingSourceSandboxNameAction', ['SourceSandboxName']));
        }
        return { sandboxReq, srcSandboxName: SourceSandboxName };
    }
    else {
        if (!sandboxReq.LicenseType) {
            throw new core_1.SfError(messages.getMessage('missingLicenseType'));
        }
        return { sandboxReq };
    }
}
exports.createSandboxRequest = createSandboxRequest;
//# sourceMappingURL=sandboxRequest.js.map