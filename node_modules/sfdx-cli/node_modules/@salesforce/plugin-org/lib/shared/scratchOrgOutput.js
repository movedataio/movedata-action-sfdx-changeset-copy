"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatFutureStage = exports.formatCompletedStage = exports.formatCurrentStage = exports.formatOrgId = exports.formatUsername = exports.formatRequest = exports.formatStage = exports.buildStatus = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const change_case_1 = require("change-case");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const boldBlue = (input) => chalk.rgb(81, 176, 235).bold(input);
const boldPurple = (input) => chalk.rgb(157, 129, 221).bold(input);
const buildStatus = (data, baseUrl) => `
RequestId: ${(0, exports.formatRequest)(baseUrl, data.scratchOrgInfo?.Id)}
OrgId: ${(0, exports.formatOrgId)(data.scratchOrgInfo?.ScratchOrg)}
Username: ${(0, exports.formatUsername)(data.scratchOrgInfo?.SignupUsername)}
${(0, exports.formatStage)(data.stage)}`;
exports.buildStatus = buildStatus;
const formatStage = (currentStage) => core_1.scratchOrgLifecycleStages
    .map((stage, stageIndex) => {
    // current stage
    if (currentStage === stage)
        return (0, exports.formatCurrentStage)(stage);
    // completed stages
    if (core_1.scratchOrgLifecycleStages.indexOf(currentStage) > stageIndex)
        return (0, exports.formatCompletedStage)(stage);
    // future stage
    return (0, exports.formatFutureStage)(stage);
})
    .join('\n');
exports.formatStage = formatStage;
const formatRequest = (baseUrl, id) => `${id ? `${chalk.bold(id)} (${baseUrl}/${id})` : ''}`;
exports.formatRequest = formatRequest;
const formatUsername = (username) => `${username ? `${boldBlue(username)} ` : ''}`;
exports.formatUsername = formatUsername;
const formatOrgId = (id) => `${id ? `${boldBlue(id)} ` : ''}`;
exports.formatOrgId = formatOrgId;
const formatCurrentStage = (stage) => boldPurple((0, change_case_1.capitalCase)(stage));
exports.formatCurrentStage = formatCurrentStage;
const formatCompletedStage = (stage) => sf_plugins_core_1.StandardColors.success.bold(`âœ“ ${(0, change_case_1.capitalCase)(stage)}`);
exports.formatCompletedStage = formatCompletedStage;
const formatFutureStage = (stage) => sf_plugins_core_1.StandardColors.info((0, change_case_1.capitalCase)(stage));
exports.formatFutureStage = formatFutureStage;
//# sourceMappingURL=scratchOrgOutput.js.map