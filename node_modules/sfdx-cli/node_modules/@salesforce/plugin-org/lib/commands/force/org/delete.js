"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delete = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const flags_1 = require("../../../shared/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'delete');
class Delete extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Delete);
        const resolvedUsername = flags['target-org'];
        const orgId = (await core_1.AuthInfo.create({ username: resolvedUsername })).getFields().orgId;
        const isSandbox = await (await core_1.StateAggregator.getInstance()).sandboxes.hasFile(orgId);
        // read the config file for the org to be deleted, if it has a PROD_ORG_USERNAME entry, it's a sandbox
        // we either need permission to proceed without a prompt OR get the user to confirm
        if (flags['no-prompt'] ||
            (await this.confirm(messages.getMessage('confirmDelete', [isSandbox ? 'sandbox' : 'scratch', resolvedUsername])))) {
            let alreadyDeleted = false;
            let successMessageKey = 'commandSandboxSuccess';
            try {
                const org = await core_1.Org.create({ aliasOrUsername: resolvedUsername });
                // will determine if it's a scratch org or sandbox and will delete from the appropriate parent org (DevHub or Production)
                await org.delete();
            }
            catch (e) {
                if (e instanceof Error && e.name === 'DomainNotFoundError') {
                    // the org has expired, so remote operations won't work
                    // let's clean up the files locally
                    const authRemover = await core_1.AuthRemover.create();
                    await authRemover.removeAuth(resolvedUsername);
                }
                else if (e instanceof Error && e.name === 'ScratchOrgNotFound') {
                    alreadyDeleted = true;
                }
                else if (e instanceof Error && e.name === 'SandboxNotFound') {
                    successMessageKey = 'sandboxConfigOnlySuccess';
                }
                else {
                    throw e;
                }
            }
            this.log(isSandbox
                ? messages.getMessage(successMessageKey, [resolvedUsername])
                : messages.getMessage(alreadyDeleted ? 'deleteOrgConfigOnlyCommandSuccess' : 'deleteOrgCommandSuccess', [
                    resolvedUsername,
                ]));
        }
        return { username: resolvedUsername, orgId };
    }
}
exports.Delete = Delete;
Delete.summary = messages.getMessage('summary');
Delete.description = messages.getMessage('description');
Delete.examples = messages.getMessages('examples');
Delete.state = 'deprecated';
Delete.deprecationOptions = {
    message: messages.getMessage('deprecation'),
};
Delete.flags = {
    'target-org': (0, flags_1.orgThatMightBeDeleted)({
        required: true,
        summary: messages.getMessage('flags.target-org.summary'),
    }),
    targetdevhubusername: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.targetdevhubusername'),
        char: 'v',
        hidden: true,
        deprecated: {
            version: '58.0',
            message: messages.getMessage('flags.targetdevhubusername'),
        },
    }),
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'p',
        summary: messages.getMessage('flags.noprompt'),
        deprecateAliases: true,
        aliases: ['noprompt'],
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=delete.js.map