"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const sandboxRequest_1 = require("../../../shared/sandboxRequest");
const sandboxReporter_1 = require("../../../shared/sandboxReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'create');
class Create extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.varArgs = {};
    }
    async run() {
        const { flags, args, argv } = await this.parse(Create);
        this.flags = flags;
        this.varArgs = (0, sf_plugins_core_1.parseVarArgs)(args, argv);
        this.logger = await core_1.Logger.child(this.constructor.name);
        this.logger.debug('Create started with args %s ', flags);
        if (flags.type === core_1.OrgTypes.Sandbox) {
            this.validateSandboxFlags();
            return this.createSandbox();
        }
        else {
            // default to scratch org
            return this.createScratchOrg();
        }
    }
    validateSandboxFlags() {
        if (this.flags.retry !== 0) {
            throw new core_1.SfError(messages.getMessage('retryIsNotValidForSandboxes'), 'retryIsNotValidForSandboxes');
        }
        if (this.flags.clientid) {
            this.warn(messages.getMessage('clientIdNotSupported', [this.flags.clientid]));
        }
        if (this.flags.nonamespace) {
            this.warn(messages.getMessage('noNamespaceNotSupported', [this.flags.nonamespace]));
        }
        if (this.flags.noancestors) {
            this.warn(messages.getMessage('noAncestorsNotSupported', [this.flags.noancestors]));
        }
        if (this.flags.durationdays) {
            this.warn(messages.getMessage('durationDaysNotSupported', [this.flags.durationdays]));
        }
    }
    async createSandbox() {
        if (!this.flags['target-org']) {
            throw new core_1.SfError(messages.getMessage('requiresUsername'));
        }
        const lifecycle = core_1.Lifecycle.getInstance();
        const username = this.flags['target-org'].getUsername();
        // register the sandbox event listeners before calling `prodOrg.createSandbox()`
        lifecycle.on(core_1.SandboxEvents.EVENT_ASYNC_RESULT, async (results) => Promise.resolve(this.log(messages.getMessage('sandboxSuccess', [results.Id, results.SandboxName, username]))));
        lifecycle.on(core_1.SandboxEvents.EVENT_STATUS, async (results) => Promise.resolve(this.log(sandboxReporter_1.SandboxReporter.sandboxProgress(results))));
        lifecycle.on(core_1.SandboxEvents.EVENT_AUTH, async (results) => {
            this.sandboxAuth = results;
            return Promise.resolve();
        });
        lifecycle.on(core_1.SandboxEvents.EVENT_RESULT, async (results) => {
            const { sandboxReadyForUse, data } = sandboxReporter_1.SandboxReporter.logSandboxProcessResult(results);
            this.log(sandboxReadyForUse);
            this.styledHeader('Sandbox Org Creation Status');
            this.table(data, {
                key: { header: 'Name' },
                value: { header: 'Value' },
            });
            if (results.sandboxRes?.authUserName) {
                if (this.flags.setalias) {
                    const stateAggregator = await core_1.StateAggregator.getInstance();
                    stateAggregator.aliases.set(this.flags.setalias, results.sandboxRes.authUserName);
                    const result = await stateAggregator.aliases.write();
                    this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, result);
                }
                if (this.flags.setdefaultusername) {
                    const globalConfig = this.configAggregator.getGlobalConfig();
                    globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, results.sandboxRes.authUserName);
                    const result = await globalConfig.write();
                    this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                }
            }
        });
        const { sandboxReq } = await (0, sandboxRequest_1.createSandboxRequest)(false, this.flags.definitionfile, this.logger, this.varArgs);
        this.logger.debug('Calling create with SandboxRequest: %s ', sandboxReq);
        const wait = this.flags.wait;
        try {
            return await this.flags['target-org'].createSandbox(sandboxReq, { wait });
        }
        catch (e) {
            // guaranteed to be SfError from core;
            const err = e;
            if (err?.message.includes('The org cannot be found')) {
                // there was most likely an issue with DNS when auth'ing to the new sandbox, but it was created.
                if (this.flags.setalias && this.sandboxAuth) {
                    const stateAggregator = await core_1.StateAggregator.getInstance();
                    stateAggregator.aliases.set(this.flags.setalias, this.sandboxAuth.authUserName);
                    const result = await stateAggregator.aliases.write();
                    this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, result);
                }
                if (this.flags.setdefaultusername && this.sandboxAuth) {
                    const globalConfig = this.configAggregator.getGlobalConfig();
                    globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, this.sandboxAuth.authUserName);
                    const result = await globalConfig.write();
                    this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                }
                err.actions = [messages.getMessage('dnsTimeout'), messages.getMessage('partialSuccess')];
                err.exitCode = 68;
            }
            throw err;
        }
    }
    async createScratchOrg() {
        this.logger.debug('OK, will do scratch org creation');
        if (!this.flags['target-dev-hub']) {
            throw new core_1.SfError(messages.getMessage('RequiresDevhubUsernameError'));
        }
        // Ensure we have an org config input source.
        if (!this.flags.definitionfile && Object.keys(this.varArgs).length === 0) {
            throw new core_1.SfError(messages.getMessage('noConfig'));
        }
        this.logger.debug('validation complete');
        // If the user supplied a specific client ID, we have no way of knowing if it's
        // a certificate-based Connected App or not. Therefore, we have to assume that
        // we'll need the client secret, so prompt the user for it.
        const { clientSecret } = this.flags.clientid
            ? await this.prompt([
                { name: 'clientSecret', type: 'mask', message: messages.getMessage('secretPrompt') },
            ])
            : { clientSecret: undefined };
        const createCommandOptions = {
            connectedAppConsumerKey: this.flags.clientid,
            durationDays: this.flags.durationdays,
            nonamespace: this.flags.nonamespace,
            noancestors: this.flags.noancestors,
            wait: this.flags.wait,
            retry: this.flags.retry,
            apiversion: this.flags['api-version'],
            definitionfile: this.flags.definitionfile,
            orgConfig: this.varArgs,
            clientSecret,
            setDefault: this.flags.setdefaultusername === true,
            alias: this.flags.setalias,
            tracksSource: true,
        };
        const { username, scratchOrgInfo, authFields, warnings } = await this.flags['target-dev-hub'].scratchOrgCreate(createCommandOptions);
        if (!scratchOrgInfo) {
            throw new core_1.SfError('No scratch org info returned from scratchOrgCreate');
        }
        if (!authFields?.orgId) {
            throw new core_1.SfError('Information missing from authFields');
        }
        await core_1.Lifecycle.getInstance().emit('scratchOrgInfo', scratchOrgInfo);
        this.logger.debug(`orgConfig.loginUrl: ${authFields?.loginUrl}`);
        this.logger.debug(`orgConfig.instanceUrl: ${authFields?.instanceUrl}`);
        this.log(messages.getMessage('scratchOrgCreateSuccess', [authFields?.orgId, username]));
        if (warnings.length > 0) {
            warnings.forEach((warning) => {
                this.warn(warning);
            });
        }
        return {
            username,
            scratchOrgInfo,
            authFields,
            warnings,
            orgId: authFields?.orgId,
        };
    }
}
exports.Create = Create;
Create.summary = messages.getMessage('summary');
Create.description = messages.getMessage('description');
Create.examples = messages.getMessages('examples');
// waiting for oclif bug fix around missing config.id.
// public static state = 'deprecated';
// public static deprecationOptions = {
//   message: messages.getMessage('deprecation'),
// };
// needed to allow varargs
Create.strict = false;
Create.flags = {
    'target-org': {
        ...sf_plugins_core_1.optionalOrgFlagWithDeprecations,
        summary: messages.getMessage('flags.targetOrg.summary'),
    },
    'target-dev-hub': sf_plugins_core_1.optionalHubFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    type: sf_plugins_core_1.Flags.custom({
        options: [core_1.OrgTypes.Scratch, core_1.OrgTypes.Sandbox],
    })({
        char: 't',
        summary: messages.getMessage('flags.type'),
        default: core_1.OrgTypes.Scratch,
    }),
    definitionfile: sf_plugins_core_1.Flags.file({
        exists: true,
        char: 'f',
        summary: messages.getMessage('flags.definitionFile'),
    }),
    nonamespace: sf_plugins_core_1.Flags.boolean({
        char: 'n',
        summary: messages.getMessage('flags.noNamespace'),
    }),
    noancestors: sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.noAncestors'),
    }),
    clientid: sf_plugins_core_1.Flags.string({
        char: 'i',
        summary: messages.getMessage('flags.clientId'),
    }),
    setdefaultusername: sf_plugins_core_1.Flags.boolean({
        char: 's',
        summary: messages.getMessage('flags.setDefaultUsername'),
    }),
    setalias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: messages.getMessage('flags.setAlias'),
    }),
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        summary: messages.getMessage('flags.wait'),
        min: 6,
        defaultValue: 6,
    }),
    durationdays: sf_plugins_core_1.Flags.integer({
        char: 'd',
        summary: messages.getMessage('flags.durationDays'),
        min: 1,
        max: 30,
        default: 7,
    }),
    retry: sf_plugins_core_1.Flags.integer({
        hidden: true,
        default: 0,
        max: 10,
        summary: messages.getMessage('flags.retry'),
    }),
};
//# sourceMappingURL=create.js.map