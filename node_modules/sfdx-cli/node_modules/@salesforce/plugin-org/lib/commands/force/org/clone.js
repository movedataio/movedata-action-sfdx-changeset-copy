"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgCloneCommand = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const sandboxRequest_1 = require("../../../shared/sandboxRequest");
const sandboxReporter_1 = require("../../../shared/sandboxReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'clone');
class OrgCloneCommand extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags, args, argv } = await this.parse(OrgCloneCommand);
        this.logger = await core_1.Logger.child(this.constructor.name);
        const varargs = (0, sf_plugins_core_1.parseVarArgs)(args, argv);
        const lifecycle = core_1.Lifecycle.getInstance();
        if (flags.type === core_1.OrgTypes.Sandbox) {
            lifecycle.on(core_1.SandboxEvents.EVENT_ASYNC_RESULT, async (results) => 
            // Keep all console output in the command
            Promise.resolve(this.log(messages.getMessage('commandSuccess', [results.Id, results.SandboxName]))));
            lifecycle.on(core_1.SandboxEvents.EVENT_STATUS, async (results) => Promise.resolve(this.log(sandboxReporter_1.SandboxReporter.sandboxProgress(results))));
            lifecycle.on(core_1.SandboxEvents.EVENT_RESULT, async (results) => {
                const { sandboxReadyForUse, data } = sandboxReporter_1.SandboxReporter.logSandboxProcessResult(results);
                this.log(sandboxReadyForUse);
                this.styledHeader('Sandbox Org Cloning Status');
                this.table(data, {
                    key: { header: 'Name' },
                    value: { header: 'Value' },
                });
                if (results?.sandboxRes?.authUserName) {
                    if (flags.setalias)
                        await this.setAlias(flags.setalias, results.sandboxRes.authUserName);
                    if (flags.setdefaultusername)
                        await this.setDefaultUsername(results.sandboxRes.authUserName);
                }
            });
            const { sandboxReq, srcSandboxName } = await (0, sandboxRequest_1.createSandboxRequest)(true, flags.definitionfile, this.logger, varargs);
            this.logger.debug('Calling clone with SandboxRequest: %s and SandboxName: %s ', sandboxReq, srcSandboxName);
            flags['target-org'].getConnection(flags['api-version']);
            return flags['target-org'].cloneSandbox(sandboxReq, srcSandboxName, { wait: flags.wait });
        }
        else {
            throw new core_1.SfError(messages.getMessage('commandOrganizationTypeNotSupport', [core_1.OrgTypes.Sandbox]), messages.getMessage('commandOrganizationTypeNotSupportAction', [core_1.OrgTypes.Sandbox]));
        }
    }
    async setAlias(alias, username) {
        const stateAggregator = await core_1.StateAggregator.getInstance();
        stateAggregator.aliases.set(alias, username);
        const result = stateAggregator.aliases.getAll();
        this.logger.debug('Set Alias: %s result: %s', alias, result);
    }
    async setDefaultUsername(username) {
        const globalConfig = this.configAggregator.getGlobalConfig();
        globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, username);
        const result = await globalConfig.write();
        this.logger.debug('Set defaultUsername: %s result: %s', username, result);
    }
}
exports.OrgCloneCommand = OrgCloneCommand;
OrgCloneCommand.examples = messages.getMessages('examples');
OrgCloneCommand.summary = messages.getMessage('summary');
OrgCloneCommand.description = messages.getMessage('description');
OrgCloneCommand.strict = false;
OrgCloneCommand.state = 'deprecated';
OrgCloneCommand.deprecationOptions = {
    to: 'org:create:sandbox',
    version: '60.0',
};
OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME = 'SourceSandboxName';
OrgCloneCommand.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    type: sf_plugins_core_1.Flags.custom({
        options: ['sandbox'],
    })({
        char: 't',
        summary: messages.getMessage('flags.type'),
        required: true,
    }),
    definitionfile: sf_plugins_core_1.Flags.file({
        char: 'f',
        exists: true,
        summary: messages.getMessage('flags.definitionfile'),
    }),
    setdefaultusername: sf_plugins_core_1.Flags.boolean({
        char: 's',
        summary: messages.getMessage('flags.setdefaultusername'),
    }),
    setalias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: messages.getMessage('flags.setalias'),
    }),
    wait: sf_plugins_core_1.Flags.duration({
        unit: 'minutes',
        char: 'w',
        summary: messages.getMessage('flags.wait'),
        description: messages.getMessage('flagsLong.wait'),
        min: 2,
        defaultValue: 6,
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=clone.js.map