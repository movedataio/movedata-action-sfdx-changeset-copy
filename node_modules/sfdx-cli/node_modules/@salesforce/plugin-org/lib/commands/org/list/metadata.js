"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListMetadata = void 0;
const fs = require("fs");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'list.metadata');
class ListMetadata extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ListMetadata);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const query = flags.folder
            ? { type: flags['metadata-type'], folder: flags.folder }
            : { type: flags['metadata-type'] };
        const listResult = await conn.metadata.list(query, flags['api-version']);
        if (flags['output-file']) {
            fs.writeFileSync(flags['output-file'], JSON.stringify(listResult, null, 2));
            this.logSuccess(`Wrote result file to ${flags['output-file']}.`);
        }
        else if (listResult?.length) {
            this.styledJSON(listResult);
        }
        else {
            this.warn(messages.getMessage('noMatchingMetadata', [flags['metadata-type'], conn.getUsername()]));
        }
        return listResult;
    }
}
exports.ListMetadata = ListMetadata;
ListMetadata.summary = messages.getMessage('summary');
ListMetadata.description = messages.getMessage('description');
ListMetadata.examples = messages.getMessages('examples');
ListMetadata.aliases = ['force:mdapi:listmetadata'];
ListMetadata.deprecateAliases = true;
ListMetadata.flags = {
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        aliases: ['apiversion', 'a'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.api-version.summary'),
    }),
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'output-file': sf_plugins_core_1.Flags.file({
        aliases: ['resultfile'],
        deprecateAliases: true,
        char: 'f',
        summary: messages.getMessage('flags.output-file.summary'),
    }),
    'metadata-type': sf_plugins_core_1.Flags.string({
        aliases: ['metadatatype'],
        deprecateAliases: true,
        char: 'm',
        summary: messages.getMessage('flags.metadata-type.summary'),
        required: true,
    }),
    folder: sf_plugins_core_1.Flags.string({
        summary: messages.getMessage('flags.folder.summary'),
        description: messages.getMessage('flags.folder.description'),
    }),
};
//# sourceMappingURL=metadata.js.map