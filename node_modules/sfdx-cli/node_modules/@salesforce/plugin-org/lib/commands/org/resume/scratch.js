"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const node_assert_1 = require("node:assert");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const scratchOrgOutput_1 = require("../../../shared/scratchOrgOutput");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'resume_scratch');
class EnvResumeScratch extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(EnvResumeScratch);
        const cache = await core_1.ScratchOrgCache.create();
        const lifecycle = core_1.Lifecycle.getInstance();
        const jobId = flags['use-most-recent'] ? cache.getLatestKey() : flags['job-id'];
        if (!jobId && flags['use-most-recent'])
            throw messages.createError('error.NoRecentJobId');
        // oclif doesn't know that the exactlyOne flag will ensure that one of these is set, and there we definitely have a jobID.
        (0, node_assert_1.strict)(jobId);
        const { hubBaseUrl } = cache.get(jobId);
        let lastStatus;
        lifecycle.on(core_1.scratchOrgLifecycleEventName, async (data) => {
            lastStatus = (0, scratchOrgOutput_1.buildStatus)(data, hubBaseUrl);
            this.spinner.status = lastStatus;
            return Promise.resolve();
        });
        this.log();
        this.spinner.start('Creating Scratch Org');
        const { username, scratchOrgInfo, authFields, warnings } = await (0, core_1.scratchOrgResume)(jobId);
        this.spinner.stop(lastStatus);
        this.log();
        this.logSuccess(messages.getMessage('success'));
        return { username, scratchOrgInfo, authFields, warnings, orgId: scratchOrgInfo?.Id };
    }
}
exports.default = EnvResumeScratch;
EnvResumeScratch.summary = messages.getMessage('summary');
EnvResumeScratch.description = messages.getMessage('description');
EnvResumeScratch.examples = messages.getMessages('examples');
EnvResumeScratch.aliases = ['env:resume:scratch'];
EnvResumeScratch.deprecateAliases = true;
EnvResumeScratch.flags = {
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        length: 'both',
        summary: messages.getMessage('flags.job-id.summary'),
        description: messages.getMessage('flags.job-id.description'),
        exactlyOne: ['use-most-recent', 'job-id'],
        startsWith: '2SR',
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
};
//# sourceMappingURL=scratch.js.map