"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListMetadataTypes = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'metadata-types');
class ListMetadataTypes extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ListMetadataTypes);
        const connection = flags['target-org'].getConnection(flags['api-version']);
        const describeResult = await connection.metadata.describe(flags['api-version']);
        if (flags['filter-known']) {
            this.debug('Filtering for only metadata types unregistered in the CLI');
            const registry = new source_deploy_retrieve_1.RegistryAccess();
            describeResult.metadataObjects = describeResult.metadataObjects.filter((md) => {
                try {
                    // An error is thrown when a type can't be found by name, and we want
                    // the ones that can't be found.
                    registry.getTypeByName(md.xmlName);
                    return false;
                }
                catch (e) {
                    return true;
                }
            });
        }
        if (flags['output-file']) {
            await fs.promises.writeFile(flags['output-file'], JSON.stringify(describeResult, null, 2));
            this.logSuccess(`Wrote result file to ${flags['output-file']}.`);
        }
        else {
            this.styledJSON(describeResult);
        }
        return describeResult;
    }
}
exports.ListMetadataTypes = ListMetadataTypes;
ListMetadataTypes.summary = messages.getMessage('summary');
ListMetadataTypes.description = messages.getMessage('description');
ListMetadataTypes.examples = messages.getMessages('examples');
ListMetadataTypes.aliases = ['force:mdapi:describemetadata'];
ListMetadataTypes.deprecateAliases = true;
ListMetadataTypes.flags = {
    'api-version': sf_plugins_core_1.Flags.orgApiVersion({
        aliases: ['apiversion', 'a'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.api-version.summary'),
    }),
    loglevel: sf_plugins_core_1.loglevel,
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'output-file': sf_plugins_core_1.Flags.file({
        aliases: ['resultfile'],
        deprecateAliases: true,
        char: 'f',
        summary: messages.getMessage('flags.output-file.summary'),
        description: messages.getMessage('flags.output-file.description'),
    }),
    'filter-known': sf_plugins_core_1.Flags.boolean({
        aliases: ['filterknown'],
        deprecateAliases: true,
        char: 'k',
        summary: messages.getMessage('flags.filter-known.summary'),
        hidden: true,
    }),
};
//# sourceMappingURL=metadata-types.js.map