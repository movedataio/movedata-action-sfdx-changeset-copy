import { SandboxProcessObject } from '@salesforce/core';
import * as Interfaces from '@oclif/core/lib/interfaces';
import { SandboxCommandBase } from '../../../shared/sandboxCommandBase';
export declare enum SandboxLicenseType {
    developer = "Developer",
    developerPro = "Developer_Pro",
    partial = "Partial",
    full = "Full"
}
export default class CreateSandbox extends SandboxCommandBase<SandboxProcessObject> {
    static summary: string;
    static description: string;
    static examples: string[];
    static readonly aliases: string[];
    static readonly deprecateAliases = true;
    static flags: {
        'definition-file': Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'set-default': Interfaces.BooleanFlag<boolean>;
        alias: Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        wait: Interfaces.OptionFlag<import("@salesforce/kit").Duration | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'poll-interval': Interfaces.OptionFlag<import("@salesforce/kit").Duration | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        async: Interfaces.BooleanFlag<boolean>;
        name: Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        clone: Interfaces.OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'license-type': Interfaces.OptionFlag<SandboxLicenseType, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'target-org': Interfaces.OptionFlag<import("@salesforce/core").Org, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
        'no-prompt': Interfaces.BooleanFlag<boolean>;
        'no-track-source': Interfaces.BooleanFlag<boolean>;
    };
    private flags;
    run(): Promise<SandboxProcessObject>;
    protected getCheckSandboxStatusParams(): string[];
    private createSandboxRequest;
    private createSandbox;
    private initSandboxProcessData;
    private confirmSandboxReq;
    private validateFlags;
    private getSourceId;
}
