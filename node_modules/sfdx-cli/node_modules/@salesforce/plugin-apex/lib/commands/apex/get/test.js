"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const apex_node_1 = require("@salesforce/apex-node");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const reporters_1 = require("../../../reporters");
const utils_1 = require("../../../utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-apex', 'report');
class Test extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Test);
        // add listener for errors
        process.on('uncaughtException', (err) => {
            throw messages.createError('apexLibErr', [err.message]);
        });
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const testService = new apex_node_1.TestService(conn);
        const result = await testService.reportAsyncResults(flags['test-run-id'], flags['code-coverage']);
        const testReporter = new reporters_1.TestReporter(new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }), conn, this.config.bin);
        return testReporter.report(result, {
            'output-dir': flags['output-dir'],
            'result-format': flags['result-format'],
            json: flags.json,
            'code-coverage': flags['code-coverage'],
        });
    }
}
exports.default = Test;
Test.summary = messages.getMessage('summary');
Test.description = messages.getMessage('description');
Test.examples = messages.getMessages('examples');
Test.deprecateAliases = true;
Test.aliases = ['force:apex:test:report'];
Test.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'test-run-id': sf_plugins_core_1.Flags.salesforceId({
        deprecateAliases: true,
        aliases: ['testrunid'],
        char: 'i',
        summary: messages.getMessage('flags.test-run-id.summary'),
        required: true,
        startsWith: '707',
        length: 'both',
    }),
    'code-coverage': sf_plugins_core_1.Flags.boolean({
        aliases: ['codecoverage'],
        deprecateAliases: true,
        char: 'c',
        summary: messages.getMessage('flags.code-coverage.summary'),
    }),
    'output-dir': sf_plugins_core_1.Flags.directory({
        aliases: ['outputdir', 'output-directory'],
        deprecateAliases: true,
        char: 'd',
        summary: messages.getMessage('flags.output-dir.summary'),
    }),
    'result-format': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['resultformat'],
        char: 'r',
        summary: messages.getMessage('flags.result-format.summary'),
        options: utils_1.resultFormat,
        default: 'human',
    }),
};
//# sourceMappingURL=test.js.map