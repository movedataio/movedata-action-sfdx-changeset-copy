"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const apex_node_1 = require("@salesforce/apex-node");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const runReporter_1 = require("../../reporters/runReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-apex', 'run');
class Run extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Run);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const exec = new apex_node_1.ExecuteService(conn);
        const execAnonOptions = {
            ...(flags.file ? { apexFilePath: flags.file } : { userInput: true }),
        };
        const result = await exec.executeAnonymous(execAnonOptions);
        const formattedResult = runReporter_1.default.formatJson(result);
        if (!result.compiled || !result.success) {
            const err = !result.compiled
                ? new core_1.SfError(messages.getMessage('executeCompileFailure'), 'executeCompileFailure')
                : new core_1.SfError(messages.getMessage('executeRuntimeFailure'), 'executeRuntimeFailure');
            err.setData(formattedResult);
            throw err;
        }
        this.log(runReporter_1.default.formatDefault(result));
        return formattedResult;
    }
}
exports.default = Run;
Run.summary = messages.getMessage('summary');
Run.description = messages.getMessage('description');
Run.examples = messages.getMessages('examples');
Run.aliases = ['force:apex:execute'];
Run.deprecateAliases = true;
Run.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    file: sf_plugins_core_1.Flags.file({
        deprecateAliases: true,
        aliases: ['apexcodefile'],
        char: 'f',
        summary: messages.getMessage('flags.file'),
    }),
};
//# sourceMappingURL=run.js.map