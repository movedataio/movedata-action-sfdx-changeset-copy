"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const apex_node_1 = require("@salesforce/apex-node");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const utils_1 = require("../../../utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-apex', 'get');
class Log extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Log);
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const logService = new apex_node_1.LogService(conn);
        const logResults = await logService.getLogs({
            logId: flags['log-id'],
            numberOfLogs: flags.number,
            outputDir: flags['output-dir'],
        });
        if (logResults.length === 0) {
            this.log(messages.getMessage('noResultsFound'));
            return [];
        }
        if (flags['output-dir']) {
            this.log(`Log files written to ${flags['output-dir']}`);
            // TODO: look at this --outputdir will change what --json returns
            return logResults.map((logResult) => logResult.log);
        }
        return logResults.map((logResult) => {
            this.log((0, utils_1.colorLogs)(logResult.log));
            return { log: logResult.log };
        });
    }
}
exports.default = Log;
Log.summary = messages.getMessage('summary');
Log.description = messages.getMessage('description');
Log.examples = messages.getMessages('examples');
Log.deprecateAliases = true;
Log.aliases = ['force:apex:log:get'];
Log.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    'log-id': sf_plugins_core_1.Flags.salesforceId({
        deprecateAliases: true,
        aliases: ['logid'],
        char: 'i',
        summary: messages.getMessage('flags.log-id.summary'),
        startsWith: '07L',
        length: 'both',
    }),
    // Removed default because it will take priority over 'log-id' in the apex library
    // https://github.com/forcedotcom/salesforcedx-apex/blob/main/src/logs/logService.ts#L57-L60
    // eslint-disable-next-line sf-plugin/flag-min-max-default
    number: sf_plugins_core_1.Flags.integer({
        char: 'n',
        min: 1,
        max: 25,
        summary: messages.getMessage('flags.number.summary'),
    }),
    'output-dir': sf_plugins_core_1.Flags.directory({
        aliases: ['outputdir', 'output-directory'],
        deprecateAliases: true,
        char: 'd',
        summary: messages.getMessage('flags.output-dir.summary'),
        description: messages.getMessage('flags.output-dir.description'),
    }),
};
//# sourceMappingURL=log.js.map