"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const apex_node_1 = require("@salesforce/apex-node");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const legacyColorization_1 = require("../../../legacyColorization");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-apex', 'tail');
class Log extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(Log);
        this.color = flags.color;
        const conn = flags['target-org'].getConnection(flags['api-version']);
        const logService = this.getLogService(conn);
        if (!flags['skip-trace-flag']) {
            await logService.prepareTraceFlag(flags['debug-level'] ?? '');
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-misused-promises
        await logService.tail(flags['target-org'], this.logTailer.bind(this));
        this.log(messages.getMessage('finishedTailing'));
    }
    async logTailer(fullLog) {
        if (fullLog) {
            if (this.jsonEnabled()) {
                this.styledJSON({
                    status: process.exitCode,
                    result: fullLog,
                });
            }
            else {
                const output = this.color ? await (0, legacyColorization_1.colorizeLog)(fullLog) : fullLog;
                this.log(output);
            }
        }
    }
    /**
     * for UT purposes
     *
     * @param conn : Connection to the org
     * @private
     */
    // eslint-disable-next-line class-methods-use-this
    getLogService(conn) {
        return new apex_node_1.LogService(conn);
    }
}
exports.default = Log;
Log.summary = messages.getMessage('summary');
Log.description = messages.getMessage('description');
Log.examples = messages.getMessages('examples');
Log.deprecateAliases = true;
Log.aliases = ['force:apex:log:tail'];
Log.flags = {
    'target-org': sf_plugins_core_1.requiredOrgFlagWithDeprecations,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    loglevel: sf_plugins_core_1.loglevel,
    color: sf_plugins_core_1.Flags.boolean({
        char: 'c',
        summary: messages.getMessage('flags.color.summary'),
    }),
    'debug-level': sf_plugins_core_1.Flags.string({
        deprecateAliases: true,
        aliases: ['debuglevel'],
        char: 'd',
        summary: messages.getMessage('flags.debug-level.summary'),
        exclusive: ['skip-trace-flag'],
    }),
    'skip-trace-flag': sf_plugins_core_1.Flags.boolean({
        deprecateAliases: true,
        aliases: ['skiptraceflag'],
        char: 's',
        summary: messages.getMessage('flags.skip-trace-flag.summary'),
    }),
};
//# sourceMappingURL=log.js.map