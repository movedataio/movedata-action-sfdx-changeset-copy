"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@salesforce/core");
const utils_1 = require("../utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-apex', 'run');
class RunReporter {
    static formatDefault(response) {
        const outputText = [];
        if (response.success) {
            outputText.push((0, utils_1.colorSuccess)(messages.getMessage('executeCompileSuccess')), (0, utils_1.colorSuccess)(messages.getMessage('executeRuntimeSuccess')), '', response.logs ?? '');
        }
        else {
            if (!response.diagnostic) {
                throw Error('No diagnostic property found on response.');
            }
            const diagnostic = response.diagnostic[0];
            if (!response.compiled) {
                outputText.push((0, utils_1.colorError)(`Error: Line: ${diagnostic.lineNumber}, Column: ${diagnostic.columnNumber}`), (0, utils_1.colorError)(`Error: ${diagnostic.compileProblem}\n`));
            }
            else {
                outputText.push((0, utils_1.colorSuccess)(messages.getMessage('executeCompileSuccess')), (0, utils_1.colorError)(`Error: ${diagnostic.exceptionMessage}`), (0, utils_1.colorError)(`Error: ${diagnostic.exceptionStackTrace}`), '', response.logs ?? '');
            }
        }
        return outputText.join(os.EOL);
    }
    static formatJson(response) {
        return {
            success: response.success,
            compiled: response.compiled,
            compileProblem: response.diagnostic?.[0].compileProblem ?? '',
            exceptionMessage: response.diagnostic?.[0].exceptionMessage ?? '',
            exceptionStackTrace: response.diagnostic?.[0].exceptionStackTrace ?? '',
            line: response.diagnostic?.[0].lineNumber ?? -1,
            column: response.diagnostic?.[0].columnNumber ?? -1,
            logs: response.logs,
        };
    }
}
exports.default = RunReporter;
//# sourceMappingURL=runReporter.js.map