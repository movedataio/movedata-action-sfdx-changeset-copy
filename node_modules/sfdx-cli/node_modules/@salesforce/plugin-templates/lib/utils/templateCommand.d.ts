import { Ux } from '@salesforce/sf-plugins-core';
import { ConfigAggregator } from '@salesforce/core';
import { CreateOutput } from '@salesforce/templates';
import { ForceGeneratorAdapter } from '@salesforce/templates/lib/utils';
import VisualforceComponentGenerator from '@salesforce/templates/lib/generators/visualforceComponentGenerator';
import VisualforcePageGenerator from '@salesforce/templates/lib/generators/visualforcePageGenerator';
import ApexClassGenerator from '@salesforce/templates/lib/generators/apexClassGenerator';
import LightningTestGenerator from '@salesforce/templates/lib/generators/lightningTestGenerator';
import StaticResourceGenerator from '@salesforce/templates/lib/generators/staticResourceGenerator';
import ProjectGenerator from '@salesforce/templates/lib/generators/projectGenerator';
import LightningInterfaceGenerator from '@salesforce/templates/lib/generators/lightningInterfaceGenerator';
import LightningAppGenerator from '@salesforce/templates/lib/generators/lightningAppGenerator';
import LightningEventGenerator from '@salesforce/templates/lib/generators/lightningEventGenerator';
import AnalyticsTemplateGenerator from '@salesforce/templates/lib/generators/analyticsTemplateGenerator';
import LightningComponentGenerator from '@salesforce/templates/lib/generators/lightningComponentGenerator';
import ApexTriggerGenerator from '@salesforce/templates/lib/generators/apexTriggerGenerator';
export type generatorInputs = {
    ux: Ux;
    templates?: string;
} & ({
    generator: typeof VisualforcePageGenerator;
    opts: typeof VisualforcePageGenerator.prototype.options;
} | {
    generator: typeof ApexClassGenerator;
    opts: typeof ApexClassGenerator.prototype.options;
} | {
    generator: typeof ApexTriggerGenerator;
    opts: typeof ApexTriggerGenerator.prototype.options;
} | {
    generator: typeof VisualforceComponentGenerator;
    opts: typeof VisualforceComponentGenerator.prototype.options;
} | {
    generator: typeof LightningTestGenerator;
    opts: typeof LightningTestGenerator.prototype.options;
} | {
    generator: typeof StaticResourceGenerator;
    opts: typeof StaticResourceGenerator.prototype.options;
} | {
    generator: typeof ProjectGenerator;
    opts: typeof ProjectGenerator.prototype.options;
} | {
    generator: typeof LightningInterfaceGenerator;
    opts: typeof LightningInterfaceGenerator.prototype.options;
} | {
    generator: typeof LightningAppGenerator;
    opts: typeof LightningAppGenerator.prototype.options;
} | {
    generator: typeof LightningEventGenerator;
    opts: typeof LightningEventGenerator.prototype.options;
} | {
    generator: typeof AnalyticsTemplateGenerator;
    opts: typeof AnalyticsTemplateGenerator.prototype.options;
} | {
    generator: typeof LightningComponentGenerator;
    opts: typeof LightningComponentGenerator.prototype.options;
});
export declare function runGenerator({ ux, templates, generator, opts }: generatorInputs): Promise<CreateOutput>;
export declare const getCustomTemplates: (configAggregator: ConfigAggregator) => string | undefined;
export declare const buildJson: (adapter: ForceGeneratorAdapter, targetDir: string) => CreateOutput;
