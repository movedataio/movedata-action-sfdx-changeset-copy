"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildJson = exports.getCustomTemplates = exports.runGenerator = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const core_1 = require("@salesforce/core");
const templates_1 = require("@salesforce/templates");
const utils_1 = require("@salesforce/templates/lib/utils");
const yeoman = require("yeoman-environment");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-templates', 'messages');
function runGenerator({ ux, templates, generator, opts }) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (templates) {
            yield templates_1.TemplateService.getInstance().setCustomTemplatesRootPathOrGitRepo(templates);
        }
        const adapter = new utils_1.ForceGeneratorAdapter();
        // @ts-expect-error the adapter doesn't fully implement the yeoman adapter interface
        const env = yeoman.createEnv(undefined, undefined, adapter);
        env.registerStub(generator, 'generator');
        yield env.run('generator', opts);
        const targetDir = path.resolve((_a = opts.outputdir) !== null && _a !== void 0 ? _a : '.');
        ux.log(messages.getMessage('TargetDirOutput', [targetDir]));
        ux.log(adapter.log.getOutput());
        return (0, exports.buildJson)(adapter, targetDir);
    });
}
exports.runGenerator = runGenerator;
const getCustomTemplates = (configAggregator) => {
    try {
        // we're still accessing the old `customOrgMetadataTemplates` key, but this is deprecated and we'll use the new key to access the value
        const customTemplatesFromConfig = configAggregator.getPropertyValue(core_1.OrgConfigProperties.ORG_CUSTOM_METADATA_TEMPLATES);
        return customTemplatesFromConfig;
    }
    catch (err) {
        return undefined;
    }
};
exports.getCustomTemplates = getCustomTemplates;
// exported for test
const buildJson = (adapter, targetDir) => {
    const cleanOutput = adapter.log.getCleanOutput();
    const rawOutput = `target dir = ${targetDir}\n${adapter.log.getOutput()}`;
    const output = {
        outputDir: targetDir,
        created: cleanOutput,
        rawOutput,
    };
    return output;
};
exports.buildJson = buildJson;
//# sourceMappingURL=templateCommand.js.map