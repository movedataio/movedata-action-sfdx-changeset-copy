"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const lightningInterfaceGenerator_1 = require("@salesforce/templates/lib/generators/lightningInterfaceGenerator");
const utils_1 = require("@salesforce/templates/lib/utils");
const core_1 = require("@salesforce/core");
const templateCommand_1 = require("../../../utils/templateCommand");
const flags_1 = require("../../../utils/flags");
const lightningInterfaceFileSuffix = /.intf$/;
const BUNDLE_TYPE = 'Interface';
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-templates', 'lightningInterface');
const lightningCommon = core_1.Messages.loadMessages('@salesforce/plugin-templates', 'lightning');
class LightningInterface extends sf_plugins_core_1.SfCommand {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { flags } = yield this.parse(LightningInterface);
            const flagsAsOptions = {
                interfacename: flags.name,
                outputdir: flags['output-dir'],
                internal: flags.internal,
                apiversion: flags['api-version'],
                template: 'DefaultLightningIntf',
            };
            return (0, templateCommand_1.runGenerator)({
                generator: lightningInterfaceGenerator_1.default,
                opts: flagsAsOptions,
                ux: new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }),
                templates: (0, templateCommand_1.getCustomTemplates)(this.configAggregator),
            });
        });
    }
}
exports.default = LightningInterface;
LightningInterface.summary = lightningCommon.getMessage('summary', [BUNDLE_TYPE]);
LightningInterface.description = lightningCommon.getMessage('description', [BUNDLE_TYPE]);
LightningInterface.examples = messages.getMessages('examples');
LightningInterface.aliases = ['force:lightning:interface:create'];
LightningInterface.deprecateAliases = true;
LightningInterface.flags = {
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: lightningCommon.getMessage('flags.name', [BUNDLE_TYPE]),
        description: lightningCommon.getMessage('flags.name.description'),
        required: true,
        aliases: ['interfacename'],
        deprecateAliases: true,
    }),
    template: sf_plugins_core_1.Flags.string({
        char: 't',
        summary: lightningCommon.getMessage('flags.template'),
        description: lightningCommon.getMessage('flags.template.description'),
        default: 'DefaultLightningIntf',
        options: utils_1.CreateUtil.getCommandTemplatesForFiletype(lightningInterfaceFileSuffix, 'lightninginterface'),
    }),
    'output-dir': flags_1.outputDirFlagLightning,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    internal: flags_1.internalFlag,
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=interface.js.map