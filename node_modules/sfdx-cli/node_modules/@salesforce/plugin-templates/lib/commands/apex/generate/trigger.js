"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const apexTriggerGenerator_1 = require("@salesforce/templates/lib/generators/apexTriggerGenerator");
const utils_1 = require("@salesforce/templates/lib/utils");
const core_1 = require("@salesforce/core");
const templateCommand_1 = require("../../../utils/templateCommand");
const flags_1 = require("../../../utils/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const apexTriggerFileSuffix = /.trigger$/;
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-templates', 'messages');
const messages = core_1.Messages.loadMessages('@salesforce/plugin-templates', 'apexTrigger');
class ApexTrigger extends sf_plugins_core_1.SfCommand {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { flags } = yield this.parse(ApexTrigger);
            return (0, templateCommand_1.runGenerator)({
                generator: apexTriggerGenerator_1.default,
                opts: {
                    triggername: flags.name,
                    outputdir: flags['output-dir'],
                    template: 'ApexTrigger',
                    sobject: flags.sobject,
                    triggerevents: flags.event,
                },
                ux: new sf_plugins_core_1.Ux({ jsonEnabled: this.jsonEnabled() }),
                templates: (0, templateCommand_1.getCustomTemplates)(this.configAggregator),
            });
        });
    }
}
exports.default = ApexTrigger;
ApexTrigger.summary = messages.getMessage('summary');
ApexTrigger.description = messages.getMessage('description');
ApexTrigger.examples = messages.getMessages('examples');
ApexTrigger.aliases = ['force:apex:trigger:create'];
ApexTrigger.deprecateAliases = true;
ApexTrigger.flags = {
    name: sf_plugins_core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name'),
        description: messages.getMessage('flags.name.description'),
        required: true,
        aliases: ['triggername'],
        deprecateAliases: true,
    }),
    template: sf_plugins_core_1.Flags.string({
        char: 't',
        summary: commonMessages.getMessage('flags.template'),
        description: commonMessages.getMessage('flags.template.description'),
        default: 'ApexTrigger',
        options: utils_1.CreateUtil.getCommandTemplatesForFiletype(apexTriggerFileSuffix, 'apextrigger'),
    }),
    'output-dir': flags_1.outputDirFlag,
    'api-version': sf_plugins_core_1.orgApiVersionFlagWithDeprecations,
    sobject: sf_plugins_core_1.Flags.string({
        char: 's',
        summary: messages.getMessage('flags.sobject'),
        default: 'SOBJECT',
    }),
    event: (0, sf_plugins_core_1.arrayWithDeprecation)({
        char: 'e',
        aliases: ['triggerevents'],
        deprecateAliases: true,
        summary: messages.getMessage('flags.event'),
        default: ['before insert'],
        options: [
            'before insert',
            'before update',
            'before delete',
            'after insert',
            'after update',
            'after delete',
            'after undelete',
        ],
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=trigger.js.map