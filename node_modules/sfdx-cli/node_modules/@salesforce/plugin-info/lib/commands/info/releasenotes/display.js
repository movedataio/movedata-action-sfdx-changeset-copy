"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Needed this to ensure the "helpers" were declared before read in examples
/* eslint-disable @typescript-eslint/member-ordering */
const os = require("os");
const marked_1 = require("marked");
const TerminalRenderer = require("marked-terminal");
const kit_1 = require("@salesforce/kit");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const getInfoConfig_1 = require("../../../shared/getInfoConfig");
const getReleaseNotes_1 = require("../../../shared/getReleaseNotes");
const getDistTagVersion_1 = require("../../../shared/getDistTagVersion");
const parseReleaseNotes_1 = require("../../../shared/parseReleaseNotes");
// Initialize Messages with the current plugin directory
core_1.Messages.importMessagesDirectory(__dirname);
const HIDE_NOTES = 'SFDX_HIDE_RELEASE_NOTES';
const HIDE_FOOTER = 'SFDX_HIDE_RELEASE_NOTES_FOOTER';
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = core_1.Messages.loadMessages('@salesforce/plugin-info', 'display');
class Display extends sf_plugins_core_1.SfCommand {
    async run() {
        const logger = core_1.Logger.childFromRoot(this.constructor.name);
        const { flags } = await this.parse(Display);
        const env = new kit_1.Env();
        const isHook = !!flags.hook;
        if (env.getBoolean(HIDE_NOTES) && isHook) {
            // We don't ever want to exit the process for info:releasenotes:display (whatsnew)
            // In most cases we will log a message, but here we only trace log in case someone using stdout of the update command
            logger.trace(`release notes disabled via env var: ${HIDE_NOTES}`);
            logger.trace('exiting');
            await core_1.Lifecycle.getInstance().emitTelemetry({ eventName: 'NOTES_HIDDEN' });
            return;
        }
        try {
            const installedVersion = this.config.pjson.version;
            const infoConfig = await (0, getInfoConfig_1.getInfoConfig)(this.config.root);
            const { distTagUrl, releaseNotesPath, releaseNotesFilename } = infoConfig.releasenotes;
            let version = flags.version ?? installedVersion;
            if (Display.helpers.includes(version)) {
                version = await (0, getDistTagVersion_1.getDistTagVersion)(distTagUrl, version);
            }
            const releaseNotes = await (0, getReleaseNotes_1.getReleaseNotes)(releaseNotesPath, releaseNotesFilename, version);
            const tokens = (0, parseReleaseNotes_1.parseReleaseNotes)(releaseNotes, version, releaseNotesPath);
            marked_1.marked.setOptions({
                renderer: new TerminalRenderer({ emoji: false }),
            });
            tokens.unshift(marked_1.marked.lexer(`# Release notes for '${this.config.bin}':`)[0]);
            if (flags.json) {
                const body = tokens.map((token) => token.raw).join(os.EOL);
                return { body, url: releaseNotesPath };
            }
            else {
                this.log(marked_1.marked.parser(tokens));
            }
            if (isHook) {
                if (env.getBoolean(HIDE_FOOTER)) {
                    await core_1.Lifecycle.getInstance().emitTelemetry({ eventName: 'FOOTER_HIDDEN' });
                }
                else {
                    const footer = messages.getMessage('footer', [this.config.bin, releaseNotesPath, HIDE_NOTES, HIDE_FOOTER]);
                    this.log(marked_1.marked.parse(footer));
                }
            }
        }
        catch (err) {
            if (isHook) {
                // Do not throw error if --hook is passed, just warn so we don't exit any processes.
                // --hook is passed in the post install/update scripts
                const { message, stack, name } = err;
                this.warn(`${this.id} failed: ${message}`);
                logger.trace(stack);
                await core_1.Lifecycle.getInstance().emitTelemetry({
                    eventName: 'COMMAND_ERROR',
                    type: 'EXCEPTION',
                    errorName: name,
                    errorMessage: message,
                    Error: Object.assign({
                        name,
                        message,
                        stack,
                    }, err),
                });
                return;
            }
            throw err;
        }
    }
}
exports.default = Display;
Display.helpers = ['stable', 'stable-rc', 'latest', 'latest-rc', 'rc'];
Display.summary = messages.getMessage('summary');
Display.description = messages.getMessage('description');
Display.aliases = ['whatsnew'];
Display.examples = messages.getMessages('examples', [Display.helpers.join(', ')]);
Display.flags = {
    version: sf_plugins_core_1.Flags.string({
        char: 'v',
        summary: messages.getMessage('flags.version.summary'),
    }),
    hook: sf_plugins_core_1.Flags.boolean({
        hidden: true,
        summary: messages.getMessage('flags.hook.summary'),
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=display.js.map