"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnSet = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-settings', 'config.unset');
class UnSet extends config_1.ConfigCommand {
    constructor() {
        super(...arguments);
        this.unsetResponses = { successes: [], failures: [] };
    }
    async run() {
        const { argv, flags } = await this.parse(UnSet);
        await core_1.SfdxConfigAggregator.create({});
        if (!argv || argv.length === 0) {
            throw messages.createError('error.NoConfigKeysFound');
        }
        const config = await core_1.Config.create(core_1.Config.getDefaultOptions(flags.global));
        await config.read();
        for (const key of argv) {
            try {
                config.unset(key);
                this.unsetResponses.successes.push({ name: key, success: true });
            }
            catch (err) {
                const error = err;
                if (error.message.includes('Deprecated config name')) {
                    const meta = core_1.Config.getPropertyConfigMeta(key);
                    config.unset(meta?.key ?? key);
                    this.unsetResponses.successes.push({
                        name: key,
                        success: true,
                        error,
                        message: error.message.replace(/\.\.$/, '.'),
                    });
                }
                else if (error.name.includes('UnknownConfigKeyError') && !this.jsonEnabled()) {
                    const suggestion = this.calculateSuggestion(key);
                    // eslint-disable-next-line no-await-in-loop
                    const answer = (await this.confirm(messages.getMessage('didYouMean', [suggestion]), 10 * 1000)) ?? false;
                    if (answer) {
                        config.unset(suggestion);
                        this.unsetResponses.successes.push({
                            name: suggestion,
                            success: true,
                            error,
                            message: error.message.replace(/\.\.$/, '.'),
                        });
                    }
                }
                else {
                    this.pushFailure(key, err);
                }
            }
        }
        await config.write();
        this.responses = [...this.unsetResponses.successes, ...this.unsetResponses.failures];
        this.output('Unset Config', false);
        return this.unsetResponses;
    }
    pushFailure(name, err, value) {
        const error = core_1.SfError.wrap(err);
        this.unsetResponses.failures.push({
            name,
            success: false,
            value,
            error,
            message: error.message.replace(/\.\.$/, '.'),
        });
        process.exitCode = 1;
    }
}
exports.UnSet = UnSet;
UnSet.description = messages.getMessage('description');
UnSet.summary = messages.getMessage('summary');
UnSet.examples = messages.getMessages('examples');
UnSet.strict = false;
UnSet.aliases = ['force:config:unset'];
UnSet.deprecateAliases = true;
UnSet.configurationVariablesSection = config_1.CONFIG_HELP_SECTION;
UnSet.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    global: sf_plugins_core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.global.summary'),
    }),
};
//# sourceMappingURL=unset.js.map