"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const alias_1 = require("../../alias");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-settings', 'alias.unset');
class AliasUnset extends alias_1.AliasCommand {
    async run() {
        const { flags, argv } = await this.parse(AliasUnset);
        const stateAggregator = await core_1.StateAggregator.getInstance();
        const aliases = stateAggregator.aliases.getAll();
        const toRemove = flags.all ? Object.keys(aliases) : argv;
        if (toRemove.length === 0) {
            if (flags.all) {
                this.warn(messages.getMessage('warning.NoAliasesSet'));
                return [];
            }
            // No arg was passed, we don't know what to unset.
            throw messages.createError('error.NameRequired');
        }
        // Confirm the users wants to remove all aliases. Supports --no-prompt.
        if (flags.all && !flags['no-prompt'] && !(await this.confirm(messages.getMessage('prompt.RemoveAllAliases')))) {
            return [];
        }
        const results = toRemove.map((alias) => {
            // We will log the value in the output in case an alias was unset by mistake.
            const value = aliases[alias];
            try {
                stateAggregator.aliases.unset(alias);
                return { alias, value, success: true };
            }
            catch (err) {
                const { name, message } = err;
                return { alias, value, success: false, error: { name, message } };
            }
        });
        await stateAggregator.aliases.write();
        this.output('Alias Unset', results);
        return results;
    }
}
exports.default = AliasUnset;
AliasUnset.summary = messages.getMessage('summary');
AliasUnset.description = messages.getMessage('description');
AliasUnset.examples = messages.getMessages('examples');
AliasUnset.strict = false; // This allows varargs
AliasUnset.aliases = ['force:alias:unset'];
AliasUnset.deprecateAliases = true;
AliasUnset.flags = {
    loglevel: sf_plugins_core_1.loglevel,
    all: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.all.summary'),
        char: 'a',
    }),
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.no-prompt.summary'),
        char: 'p',
    }),
};
//# sourceMappingURL=unset.js.map