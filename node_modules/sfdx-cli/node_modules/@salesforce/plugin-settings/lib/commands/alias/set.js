"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const alias_1 = require("../../alias");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-settings', 'alias.set');
class AliasSet extends alias_1.AliasCommand {
    async run() {
        await this.parse(AliasSet);
        const stateAggregator = await core_1.StateAggregator.getInstance();
        const { args, argv } = await this.parse(AliasSet);
        if (!argv.length)
            throw messages.createError('error.ArgumentsRequired');
        const parsed = (0, sf_plugins_core_1.parseVarArgs)(args, argv);
        const results = Object.entries(parsed).map(([alias, value]) => {
            try {
                // to support plugin-settings in sfdx, which allowed setting an alias to undefined, when that happens we'll unset the alias
                // which is what the user wants
                if (!value) {
                    stateAggregator.aliases.unset(alias);
                }
                else {
                    stateAggregator.aliases.set(alias, value);
                }
                return { alias, success: true, value };
            }
            catch (err) {
                const { name, message } = err;
                return { alias, success: false, error: { name, message }, value };
            }
        });
        await stateAggregator.aliases.write();
        this.output('Alias Set', results);
        return results;
    }
}
exports.default = AliasSet;
AliasSet.summary = messages.getMessage('summary');
AliasSet.description = messages.getMessage('description');
AliasSet.examples = messages.getMessages('examples');
AliasSet.strict = false; // This allows varargs
AliasSet.aliases = ['force:alias:set'];
AliasSet.deprecateAliases = true;
AliasSet.flags = { loglevel: sf_plugins_core_1.loglevel };
//# sourceMappingURL=set.js.map