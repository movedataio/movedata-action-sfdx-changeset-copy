"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const authBaseCommand_1 = require("../../../authBaseCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'sfdxurl.store');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
const AUTH_URL_FORMAT = 'force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>';
class LoginSfdxUrl extends authBaseCommand_1.AuthBaseCommand {
    async run() {
        const { flags } = await this.parse(LoginSfdxUrl);
        if (await this.shouldExitCommand(flags['no-prompt']))
            return {};
        const authFile = flags['sfdx-url-file'];
        const sfdxAuthUrl = authFile.endsWith('.json') ? await getUrlFromJson(authFile) : await (0, promises_1.readFile)(authFile, 'utf8');
        if (!sfdxAuthUrl) {
            throw new Error(`Error getting the auth URL from file ${authFile}. Please ensure it meets the description shown in the documentation for this command.`);
        }
        const oauth2Options = core_1.AuthInfo.parseSfdxAuthUrl(sfdxAuthUrl);
        const authInfo = await core_1.AuthInfo.create({ oauth2Options });
        await authInfo.save();
        await authInfo.handleAliasAndDefaultSettings({
            alias: flags.alias,
            setDefault: flags['set-default'],
            setDefaultDevHub: flags['set-default-dev-hub'],
        });
        const result = authInfo.getFields(true);
        // ensure the clientSecret field... even if it is empty
        result.clientSecret = result.clientSecret ?? '';
        await core_1.AuthInfo.identifyPossibleScratchOrgs(result, authInfo);
        const successMsg = commonMessages.getMessage('authorizeCommandSuccess', [result.username, result.orgId]);
        this.logSuccess(successMsg);
        return result;
    }
}
exports.default = LoginSfdxUrl;
LoginSfdxUrl.summary = messages.getMessage('summary');
LoginSfdxUrl.description = messages.getMessage('description', [AUTH_URL_FORMAT]);
LoginSfdxUrl.examples = messages.getMessages('examples');
LoginSfdxUrl.aliases = ['force:auth:sfdxurl:store', 'auth:sfdxurl:store'];
LoginSfdxUrl.flags = {
    'sfdx-url-file': sf_plugins_core_1.Flags.file({
        char: 'f',
        summary: messages.getMessage('flags.sfdx-url-file.summary'),
        required: true,
        deprecateAliases: true,
        aliases: ['sfdxurlfile'],
    }),
    'set-default-dev-hub': sf_plugins_core_1.Flags.boolean({
        char: 'd',
        summary: commonMessages.getMessage('flags.set-default-dev-hub.summary'),
        deprecateAliases: true,
        aliases: ['setdefaultdevhub', 'setdefaultdevhubusername'],
    }),
    'set-default': sf_plugins_core_1.Flags.boolean({
        char: 's',
        summary: commonMessages.getMessage('flags.set-default.summary'),
        deprecateAliases: true,
        aliases: ['setdefaultusername'],
    }),
    alias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: commonMessages.getMessage('flags.alias.summary'),
        deprecateAliases: true,
        aliases: ['setalias'],
    }),
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'p',
        summary: commonMessages.getMessage('flags.no-prompt.summary'),
        required: false,
        hidden: true,
        deprecateAliases: true,
        aliases: ['noprompt'],
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
const getUrlFromJson = async (authFile) => {
    const jsonContents = await (0, promises_1.readFile)(authFile, 'utf8');
    const authFileJson = (0, kit_1.parseJson)(jsonContents);
    return authFileJson.result?.sfdxAuthUrl ?? authFileJson.sfdxAuthUrl;
};
//# sourceMappingURL=sfdx-url.js.map