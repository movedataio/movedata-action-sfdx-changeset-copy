"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'list');
class ListAuth extends sf_plugins_core_1.SfCommand {
    async run() {
        await this.parse(ListAuth);
        try {
            const auths = await core_1.AuthInfo.listAllAuthorizations();
            if (auths.length === 0) {
                this.log(messages.getMessage('noResultsFound'));
                return [];
            }
            const mappedAuths = auths.map((auth) => {
                // core3 moved to aliases as a string[], revert to alias as a string
                auth.alias = auth.aliases ? auth.aliases.join(',') : '';
                delete auth.aliases;
                return auth;
            });
            const hasErrors = auths.filter((auth) => !!auth.error).length > 0;
            let columns = {
                alias: { header: 'ALIAS' },
                username: { header: 'USERNAME' },
                orgId: { header: 'ORG ID' },
                instanceUrl: { header: 'INSTANCE URL' },
                oauthMethod: { header: 'AUTH METHOD' },
            };
            if (hasErrors) {
                columns = { ...columns, ...{ error: { header: 'ERROR' } } };
            }
            this.styledHeader('authenticated orgs');
            this.table(mappedAuths, columns);
            return mappedAuths;
        }
        catch (err) {
            this.log(messages.getMessage('noResultsFound'));
            return [];
        }
    }
}
exports.default = ListAuth;
ListAuth.summary = messages.getMessage('summary');
ListAuth.description = messages.getMessage('description');
ListAuth.examples = messages.getMessages('examples');
ListAuth.deprecateAliases = true;
ListAuth.aliases = ['force:auth:list', 'auth:list'];
ListAuth.flags = {
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=auth.js.map