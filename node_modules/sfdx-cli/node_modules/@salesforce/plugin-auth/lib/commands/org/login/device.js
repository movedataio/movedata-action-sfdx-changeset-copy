"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_2 = require("@oclif/core");
const authBaseCommand_1 = require("../../../authBaseCommand");
const common_1 = require("../../../common");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'device.login');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
class LoginDevice extends authBaseCommand_1.AuthBaseCommand {
    async run() {
        const { flags } = await this.parse(LoginDevice);
        if (await this.shouldExitCommand(false))
            return {};
        const oauthConfig = {
            loginUrl: await common_1.Common.resolveLoginUrl((0, ts_types_1.get)(flags['instance-url'], 'href', null)),
            clientId: flags['client-id'],
        };
        const deviceOauthService = await core_1.DeviceOauthService.create(oauthConfig);
        const loginData = await deviceOauthService.requestDeviceLogin();
        if (this.jsonEnabled()) {
            core_2.ux.log(JSON.stringify(loginData, null, 2));
        }
        else {
            this.styledHeader(messages.getMessage('actionRequired'));
            this.log(messages.getMessage('enterCode', [loginData.user_code, loginData.verification_uri]));
            this.log();
        }
        const approval = await deviceOauthService.awaitDeviceApproval(loginData);
        if (approval) {
            const authInfo = await deviceOauthService.authorizeAndSave(approval);
            await authInfo.handleAliasAndDefaultSettings({
                alias: flags.alias,
                setDefault: flags['set-default'],
                setDefaultDevHub: flags['set-default-dev-hub'],
            });
            const fields = authInfo.getFields(true);
            await core_1.AuthInfo.identifyPossibleScratchOrgs(fields, authInfo);
            const successMsg = messages.getMessage('success', [fields.username]);
            this.logSuccess(successMsg);
            return { ...fields, ...loginData };
        }
        else {
            return {};
        }
    }
}
exports.default = LoginDevice;
LoginDevice.summary = messages.getMessage('summary');
LoginDevice.description = messages.getMessage('description');
LoginDevice.examples = messages.getMessages('examples');
LoginDevice.aliases = ['force:auth:device:login', 'auth:device:login'];
LoginDevice.flags = {
    'client-id': sf_plugins_core_1.Flags.string({
        char: 'i',
        summary: commonMessages.getMessage('flags.client-id.summary'),
        deprecateAliases: true,
        aliases: ['clientid'],
    }),
    'instance-url': sf_plugins_core_1.Flags.url({
        char: 'r',
        summary: commonMessages.getMessage('flags.instance-url.summary'),
        description: commonMessages.getMessage('flags.instance-url.description'),
        deprecateAliases: true,
        aliases: ['instanceurl'],
    }),
    'set-default-dev-hub': sf_plugins_core_1.Flags.boolean({
        char: 'd',
        summary: commonMessages.getMessage('flags.set-default-dev-hub.summary'),
        deprecateAliases: true,
        aliases: ['setdefaultdevhub', 'setdefaultdevhubusername'],
    }),
    'set-default': sf_plugins_core_1.Flags.boolean({
        char: 's',
        summary: commonMessages.getMessage('flags.set-default.summary'),
        deprecateAliases: true,
        aliases: ['setdefaultusername'],
    }),
    alias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: commonMessages.getMessage('flags.alias.summary'),
        deprecateAliases: true,
        aliases: ['setalias'],
    }),
    'disable-masking': sf_plugins_core_1.Flags.boolean({
        summary: commonMessages.getMessage('flags.disable-masking.summary'),
        hidden: true,
        deprecateAliases: true,
        aliases: ['disablemasking'],
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=device.js.map