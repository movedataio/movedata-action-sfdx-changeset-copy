"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const authBaseCommand_1 = require("../../../authBaseCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'accesstoken.store');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
const ACCESS_TOKEN_FORMAT = '"<org id>!<accesstoken>"';
class LoginAccessToken extends authBaseCommand_1.AuthBaseCommand {
    async run() {
        const { flags } = await this.parse(LoginAccessToken);
        this.flags = flags;
        const instanceUrl = flags['instance-url'].href;
        const accessToken = await this.getAccessToken();
        const authInfo = await this.getUserInfo(accessToken, instanceUrl);
        return this.storeAuthFromAccessToken(authInfo);
    }
    // because stubbed on the test (instead of stubbing in core)
    // eslint-disable-next-line class-methods-use-this
    async getUserInfo(accessToken, instanceUrl) {
        return core_1.AuthInfo.create({ accessTokenOptions: { accessToken, instanceUrl, loginUrl: instanceUrl } });
    }
    async storeAuthFromAccessToken(authInfo) {
        if (await this.overwriteAuthInfo(authInfo.getUsername())) {
            await this.saveAuthInfo(authInfo);
            const successMsg = commonMessages.getMessage('authorizeCommandSuccess', [
                authInfo.getUsername(),
                authInfo.getFields(true).orgId,
            ]);
            this.logSuccess(successMsg);
        }
        return authInfo.getFields(true);
    }
    async saveAuthInfo(authInfo) {
        await authInfo.save();
        await authInfo.handleAliasAndDefaultSettings({
            alias: this.flags.alias,
            setDefault: this.flags['set-default'],
            setDefaultDevHub: this.flags['set-default-dev-hub'],
        });
        await core_1.AuthInfo.identifyPossibleScratchOrgs(authInfo.getFields(true), authInfo);
    }
    async overwriteAuthInfo(username) {
        if (!this.flags['no-prompt']) {
            const stateAggregator = await core_1.StateAggregator.getInstance();
            if (await stateAggregator.orgs.exists(username)) {
                return this.askOverwriteAuthFile(username);
            }
        }
        return true;
    }
    async getAccessToken() {
        const accessToken = kit_1.env.getString('SFDX_ACCESS_TOKEN') ?? (await this.askForAccessToken());
        if (!(0, core_1.matchesAccessToken)(accessToken)) {
            throw new core_1.SfError(messages.getMessage('invalidAccessTokenFormat', [ACCESS_TOKEN_FORMAT]));
        }
        return accessToken;
    }
}
exports.default = LoginAccessToken;
LoginAccessToken.summary = messages.getMessage('summary');
LoginAccessToken.description = messages.getMessage('description');
LoginAccessToken.examples = messages.getMessages('examples');
LoginAccessToken.deprecateAliases = true;
LoginAccessToken.aliases = ['force:auth:accesstoken:store', 'auth:accesstoken:store'];
LoginAccessToken.flags = {
    'instance-url': sf_plugins_core_1.Flags.url({
        char: 'r',
        summary: commonMessages.getMessage('flags.instance-url.summary'),
        description: commonMessages.getMessage('flags.instance-url.description'),
        required: true,
        deprecateAliases: true,
        aliases: ['instanceurl'],
    }),
    'set-default-dev-hub': sf_plugins_core_1.Flags.boolean({
        char: 'd',
        summary: commonMessages.getMessage('flags.set-default-dev-hub.summary'),
        default: false,
        deprecateAliases: true,
        aliases: ['setdefaultdevhub', 'setdefaultdevhubusername'],
    }),
    'set-default': sf_plugins_core_1.Flags.boolean({
        char: 's',
        summary: commonMessages.getMessage('flags.set-default.summary'),
        default: false,
        deprecateAliases: true,
        aliases: ['setdefaultusername'],
    }),
    alias: sf_plugins_core_1.Flags.string({
        char: 'a',
        summary: commonMessages.getMessage('flags.alias.summary'),
        deprecateAliases: true,
        aliases: ['setalias'],
    }),
    'no-prompt': sf_plugins_core_1.Flags.boolean({
        char: 'p',
        summary: commonMessages.getMessage('flags.no-prompt.summary'),
        required: false,
        default: false,
        deprecateAliases: true,
        aliases: ['noprompt'],
    }),
    loglevel: sf_plugins_core_1.loglevel,
};
//# sourceMappingURL=access-token.js.map